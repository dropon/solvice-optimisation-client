/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Unresolved type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Unresolved{}

// Unresolved Unresolved constraints in the solution
type Unresolved struct {
	// Constraint type.
	Constraint OnrouteConstraint `json:"constraint"`
	// Score impact of this conflict.
	Score string `json:"score"`
}

type _Unresolved Unresolved

// NewUnresolved instantiates a new Unresolved object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnresolved(constraint OnrouteConstraint, score string) *Unresolved {
	this := Unresolved{}
	this.Constraint = constraint
	this.Score = score
	return &this
}

// NewUnresolvedWithDefaults instantiates a new Unresolved object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnresolvedWithDefaults() *Unresolved {
	this := Unresolved{}
	return &this
}

// GetConstraint returns the Constraint field value
func (o *Unresolved) GetConstraint() OnrouteConstraint {
	if o == nil {
		var ret OnrouteConstraint
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *Unresolved) GetConstraintOk() (*OnrouteConstraint, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *Unresolved) SetConstraint(v OnrouteConstraint) {
	o.Constraint = v
}

// GetScore returns the Score field value
func (o *Unresolved) GetScore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *Unresolved) GetScoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *Unresolved) SetScore(v string) {
	o.Score = v
}

func (o Unresolved) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Unresolved) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["constraint"] = o.Constraint
	toSerialize["score"] = o.Score
	return toSerialize, nil
}

func (o *Unresolved) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"constraint",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnresolved := _Unresolved{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnresolved)

	if err != nil {
		return err
	}

	*o = Unresolved(varUnresolved)

	return err
}

type NullableUnresolved struct {
	value *Unresolved
	isSet bool
}

func (v NullableUnresolved) Get() *Unresolved {
	return v.value
}

func (v *NullableUnresolved) Set(val *Unresolved) {
	v.value = val
	v.isSet = true
}

func (v NullableUnresolved) IsSet() bool {
	return v.isSet
}

func (v *NullableUnresolved) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnresolved(val *Unresolved) *NullableUnresolved {
	return &NullableUnresolved{value: val, isSet: true}
}

func (v NullableUnresolved) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnresolved) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


