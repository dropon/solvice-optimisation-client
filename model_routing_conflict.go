/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoutingConflict type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutingConflict{}

// RoutingConflict Conflicts in the solution
type RoutingConflict struct {
	// Constraint type.
	Constraint string `json:"constraint"`
	// Score impact of this conflict.
	Score string `json:"score"`
	// Job id.
	Job NullableString `json:"job,omitempty"`
	// Resource id.
	Resource NullableString `json:"resource,omitempty"`
	// Tag id.
	Tag NullableString `json:"tag,omitempty"`
	Relation NullableString `json:"relation,omitempty"`
}

type _RoutingConflict RoutingConflict

// NewRoutingConflict instantiates a new RoutingConflict object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutingConflict(constraint string, score string) *RoutingConflict {
	this := RoutingConflict{}
	this.Constraint = constraint
	this.Score = score
	return &this
}

// NewRoutingConflictWithDefaults instantiates a new RoutingConflict object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutingConflictWithDefaults() *RoutingConflict {
	this := RoutingConflict{}
	return &this
}

// GetConstraint returns the Constraint field value
func (o *RoutingConflict) GetConstraint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Constraint
}

// GetConstraintOk returns a tuple with the Constraint field value
// and a boolean to check if the value has been set.
func (o *RoutingConflict) GetConstraintOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Constraint, true
}

// SetConstraint sets field value
func (o *RoutingConflict) SetConstraint(v string) {
	o.Constraint = v
}

// GetScore returns the Score field value
func (o *RoutingConflict) GetScore() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *RoutingConflict) GetScoreOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *RoutingConflict) SetScore(v string) {
	o.Score = v
}

// GetJob returns the Job field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutingConflict) GetJob() string {
	if o == nil || IsNil(o.Job.Get()) {
		var ret string
		return ret
	}
	return *o.Job.Get()
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutingConflict) GetJobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Job.Get(), o.Job.IsSet()
}

// HasJob returns a boolean if a field has been set.
func (o *RoutingConflict) HasJob() bool {
	if o != nil && o.Job.IsSet() {
		return true
	}

	return false
}

// SetJob gets a reference to the given NullableString and assigns it to the Job field.
func (o *RoutingConflict) SetJob(v string) {
	o.Job.Set(&v)
}
// SetJobNil sets the value for Job to be an explicit nil
func (o *RoutingConflict) SetJobNil() {
	o.Job.Set(nil)
}

// UnsetJob ensures that no value is present for Job, not even an explicit nil
func (o *RoutingConflict) UnsetJob() {
	o.Job.Unset()
}

// GetResource returns the Resource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutingConflict) GetResource() string {
	if o == nil || IsNil(o.Resource.Get()) {
		var ret string
		return ret
	}
	return *o.Resource.Get()
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutingConflict) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resource.Get(), o.Resource.IsSet()
}

// HasResource returns a boolean if a field has been set.
func (o *RoutingConflict) HasResource() bool {
	if o != nil && o.Resource.IsSet() {
		return true
	}

	return false
}

// SetResource gets a reference to the given NullableString and assigns it to the Resource field.
func (o *RoutingConflict) SetResource(v string) {
	o.Resource.Set(&v)
}
// SetResourceNil sets the value for Resource to be an explicit nil
func (o *RoutingConflict) SetResourceNil() {
	o.Resource.Set(nil)
}

// UnsetResource ensures that no value is present for Resource, not even an explicit nil
func (o *RoutingConflict) UnsetResource() {
	o.Resource.Unset()
}

// GetTag returns the Tag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutingConflict) GetTag() string {
	if o == nil || IsNil(o.Tag.Get()) {
		var ret string
		return ret
	}
	return *o.Tag.Get()
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutingConflict) GetTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tag.Get(), o.Tag.IsSet()
}

// HasTag returns a boolean if a field has been set.
func (o *RoutingConflict) HasTag() bool {
	if o != nil && o.Tag.IsSet() {
		return true
	}

	return false
}

// SetTag gets a reference to the given NullableString and assigns it to the Tag field.
func (o *RoutingConflict) SetTag(v string) {
	o.Tag.Set(&v)
}
// SetTagNil sets the value for Tag to be an explicit nil
func (o *RoutingConflict) SetTagNil() {
	o.Tag.Set(nil)
}

// UnsetTag ensures that no value is present for Tag, not even an explicit nil
func (o *RoutingConflict) UnsetTag() {
	o.Tag.Unset()
}

// GetRelation returns the Relation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RoutingConflict) GetRelation() string {
	if o == nil || IsNil(o.Relation.Get()) {
		var ret string
		return ret
	}
	return *o.Relation.Get()
}

// GetRelationOk returns a tuple with the Relation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RoutingConflict) GetRelationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Relation.Get(), o.Relation.IsSet()
}

// HasRelation returns a boolean if a field has been set.
func (o *RoutingConflict) HasRelation() bool {
	if o != nil && o.Relation.IsSet() {
		return true
	}

	return false
}

// SetRelation gets a reference to the given NullableString and assigns it to the Relation field.
func (o *RoutingConflict) SetRelation(v string) {
	o.Relation.Set(&v)
}
// SetRelationNil sets the value for Relation to be an explicit nil
func (o *RoutingConflict) SetRelationNil() {
	o.Relation.Set(nil)
}

// UnsetRelation ensures that no value is present for Relation, not even an explicit nil
func (o *RoutingConflict) UnsetRelation() {
	o.Relation.Unset()
}

func (o RoutingConflict) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutingConflict) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["constraint"] = o.Constraint
	toSerialize["score"] = o.Score
	if o.Job.IsSet() {
		toSerialize["job"] = o.Job.Get()
	}
	if o.Resource.IsSet() {
		toSerialize["resource"] = o.Resource.Get()
	}
	if o.Tag.IsSet() {
		toSerialize["tag"] = o.Tag.Get()
	}
	if o.Relation.IsSet() {
		toSerialize["relation"] = o.Relation.Get()
	}
	return toSerialize, nil
}

func (o *RoutingConflict) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"constraint",
		"score",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutingConflict := _RoutingConflict{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutingConflict)

	if err != nil {
		return err
	}

	*o = RoutingConflict(varRoutingConflict)

	return err
}

type NullableRoutingConflict struct {
	value *RoutingConflict
	isSet bool
}

func (v NullableRoutingConflict) Get() *RoutingConflict {
	return v.value
}

func (v *NullableRoutingConflict) Set(val *RoutingConflict) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingConflict) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingConflict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingConflict(val *RoutingConflict) *NullableRoutingConflict {
	return &NullableRoutingConflict{value: val, isSet: true}
}

func (v NullableRoutingConflict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingConflict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


