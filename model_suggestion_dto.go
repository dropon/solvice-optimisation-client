/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SuggestionDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuggestionDto{}

// SuggestionDto struct for SuggestionDto
type SuggestionDto struct {
	Score Score `json:"score"`
	Assignments []JobAssignment `json:"assignments"`
}

type _SuggestionDto SuggestionDto

// NewSuggestionDto instantiates a new SuggestionDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuggestionDto(score Score, assignments []JobAssignment) *SuggestionDto {
	this := SuggestionDto{}
	this.Score = score
	this.Assignments = assignments
	return &this
}

// NewSuggestionDtoWithDefaults instantiates a new SuggestionDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuggestionDtoWithDefaults() *SuggestionDto {
	this := SuggestionDto{}
	return &this
}

// GetScore returns the Score field value
func (o *SuggestionDto) GetScore() Score {
	if o == nil {
		var ret Score
		return ret
	}

	return o.Score
}

// GetScoreOk returns a tuple with the Score field value
// and a boolean to check if the value has been set.
func (o *SuggestionDto) GetScoreOk() (*Score, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Score, true
}

// SetScore sets field value
func (o *SuggestionDto) SetScore(v Score) {
	o.Score = v
}

// GetAssignments returns the Assignments field value
func (o *SuggestionDto) GetAssignments() []JobAssignment {
	if o == nil {
		var ret []JobAssignment
		return ret
	}

	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value
// and a boolean to check if the value has been set.
func (o *SuggestionDto) GetAssignmentsOk() ([]JobAssignment, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignments, true
}

// SetAssignments sets field value
func (o *SuggestionDto) SetAssignments(v []JobAssignment) {
	o.Assignments = v
}

func (o SuggestionDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuggestionDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["score"] = o.Score
	toSerialize["assignments"] = o.Assignments
	return toSerialize, nil
}

func (o *SuggestionDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"score",
		"assignments",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSuggestionDto := _SuggestionDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSuggestionDto)

	if err != nil {
		return err
	}

	*o = SuggestionDto(varSuggestionDto)

	return err
}

type NullableSuggestionDto struct {
	value *SuggestionDto
	isSet bool
}

func (v NullableSuggestionDto) Get() *SuggestionDto {
	return v.value
}

func (v *NullableSuggestionDto) Set(val *SuggestionDto) {
	v.value = val
	v.isSet = true
}

func (v NullableSuggestionDto) IsSet() bool {
	return v.isSet
}

func (v *NullableSuggestionDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuggestionDto(val *SuggestionDto) *NullableSuggestionDto {
	return &NullableSuggestionDto{value: val, isSet: true}
}

func (v NullableSuggestionDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuggestionDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


