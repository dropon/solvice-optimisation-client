/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Job type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Job{}

// Job A job to be performed by a resource.
type Job struct {
	// Unique description
	Name string `json:"name"`
	// Service duration of the job
	Duration NullableInt32 `json:"duration,omitempty"`
	// Job location
	Location NullableLocation `json:"location,omitempty"`
	// Priority level that influences job selection during optimization. Higher priority jobs are more likely to be included in the final solution when not all jobs can be assigned due to resource or time constraints. The priority is multiplied by job duration to calculate the selection weight. Particularly important when partialPlanning is enabled. Default value is 1.
	Priority NullableInt32 `json:"priority,omitempty"`
	// Urgency level that influences the scheduling order of jobs. Higher urgency jobs are preferentially scheduled earlier in the day and earlier in the planning period, helping ensure time-critical tasks are completed first. This affects the sequence of job execution rather than job selection.
	Urgency NullableInt32 `json:"urgency,omitempty"`
	// List of skill or capability tags that define resource requirements for this job. Tags create hard or soft constraints linking jobs to resources with matching capabilities. For example, a 'plumbing' tag ensures only resources with plumbing skills can be assigned to plumbing jobs.
	Tags []Tag `json:"tags,omitempty"`
	// List of resource preference rankings for this job. Each ranking specifies a resource name and a preference score (1-100), where lower values indicate stronger preference. This allows jobs to have preferred resources while still allowing assignment to other resources if needed, with the preference reflected in the optimization score.
	Rankings []Ranking `json:"rankings,omitempty"`
	// List of time windows during which this job can be started or executed. Each window defines a start and end time, creating temporal constraints for job scheduling. Multiple windows allow for flexible scheduling across different time periods. Jobs can only be assigned within these time boundaries.
	Windows []DateWindow `json:"windows,omitempty"`
	// Reduced service duration when this job is performed at the same location immediately after another job. This optimization recognizes that setup time, travel within a building, or equipment preparation may be shared between consecutive jobs at the same location. For example, if duration=600 and durationSquash=30, the second job at the same location takes only 30 seconds instead of 600.
	DurationSquash NullableInt32 `json:"durationSquash,omitempty"`
	// Fixed date assignment for this job that must be respected during optimization. When specified, the job can only be scheduled on this specific date, creating a hard constraint that the solver must honor. Useful for jobs that are already committed to customers or have date-specific requirements.
	PlannedDate NullableString `json:"plannedDate,omitempty"`
	// Fixed resource assignment for this job that must be respected during optimization. When specified, only the named resource can be assigned to this job, creating a hard constraint. Combined with plannedArrival, this allows for pre-committed assignments that the solver must work around when optimizing other jobs.
	PlannedResource NullableString `json:"plannedResource,omitempty"`
	// Fixed arrival time for this job that creates a soft constraint during optimization. The solver will try to schedule the job as close as possible to this time, with deviations penalized in the score according to the plannedWeight. This allows for customer appointment times or preferred scheduling while maintaining optimization flexibility.
	PlannedArrival NullableString `json:"plannedArrival,omitempty"`
	// In the case of partialPlanning planning, this indicates whether this order should be integrated into the planning or not.
	Hard NullableBool `json:"hard,omitempty"`
	// In the case of partialPlanning planning, this indicates the weight of this order.
	HardWeight NullableInt32 `json:"hardWeight,omitempty"`
	// Padding time before and after the job. In seconds
	Padding NullableInt32 `json:"padding,omitempty"`
	// Load
	Load []int32 `json:"load,omitempty"`
	// List of vehicle names that are allowed to be assigned to this order.
	// Deprecated
	AllowedResources []string `json:"allowedResources,omitempty"`
	// Warm start for the assigned resource: name of the vehicle to which this job is planned. Use this to speed up the solver and to start from an initial solution.
	InitialResource NullableString `json:"initialResource,omitempty"`
	// Warm start for the arrival time. Use this to speed up the solver and to start from an initial solution.
	InitialArrival NullableString `json:"initialArrival,omitempty"`
	// List of vehicle names that are allowed to be assigned to this order.
	DisallowedResources []string `json:"disallowedResources,omitempty"`
	// Complexity of the job
	Complexity NullableInt32 `json:"complexity,omitempty"`
	// Enables job interruption by resource unavailability breaks. When true, the job can start before a break, pause during the break, and resume afterward. Default: false.
	Resumable NullableBool `json:"resumable,omitempty"`
	// List of job types that this job represents. Used to enforce job type limitations per resource per timeframe.
	JobTypes []string `json:"jobTypes,omitempty"`
}

type _Job Job

// NewJob instantiates a new Job object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJob(name string) *Job {
	this := Job{}
	this.Name = name
	return &this
}

// NewJobWithDefaults instantiates a new Job object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobWithDefaults() *Job {
	this := Job{}
	return &this
}

// GetName returns the Name field value
func (o *Job) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Job) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Job) SetName(v string) {
	o.Name = v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetDuration() int32 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int32
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *Job) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt32 and assigns it to the Duration field.
func (o *Job) SetDuration(v int32) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *Job) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *Job) UnsetDuration() {
	o.Duration.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetLocation() Location {
	if o == nil || IsNil(o.Location.Get()) {
		var ret Location
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetLocationOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *Job) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableLocation and assigns it to the Location field.
func (o *Job) SetLocation(v Location) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *Job) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *Job) UnsetLocation() {
	o.Location.Unset()
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetPriority() int32 {
	if o == nil || IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *Job) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *Job) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *Job) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *Job) UnsetPriority() {
	o.Priority.Unset()
}

// GetUrgency returns the Urgency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetUrgency() int32 {
	if o == nil || IsNil(o.Urgency.Get()) {
		var ret int32
		return ret
	}
	return *o.Urgency.Get()
}

// GetUrgencyOk returns a tuple with the Urgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetUrgencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Urgency.Get(), o.Urgency.IsSet()
}

// HasUrgency returns a boolean if a field has been set.
func (o *Job) HasUrgency() bool {
	if o != nil && o.Urgency.IsSet() {
		return true
	}

	return false
}

// SetUrgency gets a reference to the given NullableInt32 and assigns it to the Urgency field.
func (o *Job) SetUrgency(v int32) {
	o.Urgency.Set(&v)
}
// SetUrgencyNil sets the value for Urgency to be an explicit nil
func (o *Job) SetUrgencyNil() {
	o.Urgency.Set(nil)
}

// UnsetUrgency ensures that no value is present for Urgency, not even an explicit nil
func (o *Job) UnsetUrgency() {
	o.Urgency.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetTags() []Tag {
	if o == nil {
		var ret []Tag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetTagsOk() ([]Tag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Job) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []Tag and assigns it to the Tags field.
func (o *Job) SetTags(v []Tag) {
	o.Tags = v
}

// GetRankings returns the Rankings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetRankings() []Ranking {
	if o == nil {
		var ret []Ranking
		return ret
	}
	return o.Rankings
}

// GetRankingsOk returns a tuple with the Rankings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetRankingsOk() ([]Ranking, bool) {
	if o == nil || IsNil(o.Rankings) {
		return nil, false
	}
	return o.Rankings, true
}

// HasRankings returns a boolean if a field has been set.
func (o *Job) HasRankings() bool {
	if o != nil && !IsNil(o.Rankings) {
		return true
	}

	return false
}

// SetRankings gets a reference to the given []Ranking and assigns it to the Rankings field.
func (o *Job) SetRankings(v []Ranking) {
	o.Rankings = v
}

// GetWindows returns the Windows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetWindows() []DateWindow {
	if o == nil {
		var ret []DateWindow
		return ret
	}
	return o.Windows
}

// GetWindowsOk returns a tuple with the Windows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetWindowsOk() ([]DateWindow, bool) {
	if o == nil || IsNil(o.Windows) {
		return nil, false
	}
	return o.Windows, true
}

// HasWindows returns a boolean if a field has been set.
func (o *Job) HasWindows() bool {
	if o != nil && !IsNil(o.Windows) {
		return true
	}

	return false
}

// SetWindows gets a reference to the given []DateWindow and assigns it to the Windows field.
func (o *Job) SetWindows(v []DateWindow) {
	o.Windows = v
}

// GetDurationSquash returns the DurationSquash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetDurationSquash() int32 {
	if o == nil || IsNil(o.DurationSquash.Get()) {
		var ret int32
		return ret
	}
	return *o.DurationSquash.Get()
}

// GetDurationSquashOk returns a tuple with the DurationSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetDurationSquashOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DurationSquash.Get(), o.DurationSquash.IsSet()
}

// HasDurationSquash returns a boolean if a field has been set.
func (o *Job) HasDurationSquash() bool {
	if o != nil && o.DurationSquash.IsSet() {
		return true
	}

	return false
}

// SetDurationSquash gets a reference to the given NullableInt32 and assigns it to the DurationSquash field.
func (o *Job) SetDurationSquash(v int32) {
	o.DurationSquash.Set(&v)
}
// SetDurationSquashNil sets the value for DurationSquash to be an explicit nil
func (o *Job) SetDurationSquashNil() {
	o.DurationSquash.Set(nil)
}

// UnsetDurationSquash ensures that no value is present for DurationSquash, not even an explicit nil
func (o *Job) UnsetDurationSquash() {
	o.DurationSquash.Unset()
}

// GetPlannedDate returns the PlannedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetPlannedDate() string {
	if o == nil || IsNil(o.PlannedDate.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedDate.Get()
}

// GetPlannedDateOk returns a tuple with the PlannedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetPlannedDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedDate.Get(), o.PlannedDate.IsSet()
}

// HasPlannedDate returns a boolean if a field has been set.
func (o *Job) HasPlannedDate() bool {
	if o != nil && o.PlannedDate.IsSet() {
		return true
	}

	return false
}

// SetPlannedDate gets a reference to the given NullableString and assigns it to the PlannedDate field.
func (o *Job) SetPlannedDate(v string) {
	o.PlannedDate.Set(&v)
}
// SetPlannedDateNil sets the value for PlannedDate to be an explicit nil
func (o *Job) SetPlannedDateNil() {
	o.PlannedDate.Set(nil)
}

// UnsetPlannedDate ensures that no value is present for PlannedDate, not even an explicit nil
func (o *Job) UnsetPlannedDate() {
	o.PlannedDate.Unset()
}

// GetPlannedResource returns the PlannedResource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetPlannedResource() string {
	if o == nil || IsNil(o.PlannedResource.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedResource.Get()
}

// GetPlannedResourceOk returns a tuple with the PlannedResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetPlannedResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedResource.Get(), o.PlannedResource.IsSet()
}

// HasPlannedResource returns a boolean if a field has been set.
func (o *Job) HasPlannedResource() bool {
	if o != nil && o.PlannedResource.IsSet() {
		return true
	}

	return false
}

// SetPlannedResource gets a reference to the given NullableString and assigns it to the PlannedResource field.
func (o *Job) SetPlannedResource(v string) {
	o.PlannedResource.Set(&v)
}
// SetPlannedResourceNil sets the value for PlannedResource to be an explicit nil
func (o *Job) SetPlannedResourceNil() {
	o.PlannedResource.Set(nil)
}

// UnsetPlannedResource ensures that no value is present for PlannedResource, not even an explicit nil
func (o *Job) UnsetPlannedResource() {
	o.PlannedResource.Unset()
}

// GetPlannedArrival returns the PlannedArrival field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetPlannedArrival() string {
	if o == nil || IsNil(o.PlannedArrival.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedArrival.Get()
}

// GetPlannedArrivalOk returns a tuple with the PlannedArrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetPlannedArrivalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedArrival.Get(), o.PlannedArrival.IsSet()
}

// HasPlannedArrival returns a boolean if a field has been set.
func (o *Job) HasPlannedArrival() bool {
	if o != nil && o.PlannedArrival.IsSet() {
		return true
	}

	return false
}

// SetPlannedArrival gets a reference to the given NullableString and assigns it to the PlannedArrival field.
func (o *Job) SetPlannedArrival(v string) {
	o.PlannedArrival.Set(&v)
}
// SetPlannedArrivalNil sets the value for PlannedArrival to be an explicit nil
func (o *Job) SetPlannedArrivalNil() {
	o.PlannedArrival.Set(nil)
}

// UnsetPlannedArrival ensures that no value is present for PlannedArrival, not even an explicit nil
func (o *Job) UnsetPlannedArrival() {
	o.PlannedArrival.Unset()
}

// GetHard returns the Hard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetHard() bool {
	if o == nil || IsNil(o.Hard.Get()) {
		var ret bool
		return ret
	}
	return *o.Hard.Get()
}

// GetHardOk returns a tuple with the Hard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetHardOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hard.Get(), o.Hard.IsSet()
}

// HasHard returns a boolean if a field has been set.
func (o *Job) HasHard() bool {
	if o != nil && o.Hard.IsSet() {
		return true
	}

	return false
}

// SetHard gets a reference to the given NullableBool and assigns it to the Hard field.
func (o *Job) SetHard(v bool) {
	o.Hard.Set(&v)
}
// SetHardNil sets the value for Hard to be an explicit nil
func (o *Job) SetHardNil() {
	o.Hard.Set(nil)
}

// UnsetHard ensures that no value is present for Hard, not even an explicit nil
func (o *Job) UnsetHard() {
	o.Hard.Unset()
}

// GetHardWeight returns the HardWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetHardWeight() int32 {
	if o == nil || IsNil(o.HardWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.HardWeight.Get()
}

// GetHardWeightOk returns a tuple with the HardWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetHardWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HardWeight.Get(), o.HardWeight.IsSet()
}

// HasHardWeight returns a boolean if a field has been set.
func (o *Job) HasHardWeight() bool {
	if o != nil && o.HardWeight.IsSet() {
		return true
	}

	return false
}

// SetHardWeight gets a reference to the given NullableInt32 and assigns it to the HardWeight field.
func (o *Job) SetHardWeight(v int32) {
	o.HardWeight.Set(&v)
}
// SetHardWeightNil sets the value for HardWeight to be an explicit nil
func (o *Job) SetHardWeightNil() {
	o.HardWeight.Set(nil)
}

// UnsetHardWeight ensures that no value is present for HardWeight, not even an explicit nil
func (o *Job) UnsetHardWeight() {
	o.HardWeight.Unset()
}

// GetPadding returns the Padding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetPadding() int32 {
	if o == nil || IsNil(o.Padding.Get()) {
		var ret int32
		return ret
	}
	return *o.Padding.Get()
}

// GetPaddingOk returns a tuple with the Padding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetPaddingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Padding.Get(), o.Padding.IsSet()
}

// HasPadding returns a boolean if a field has been set.
func (o *Job) HasPadding() bool {
	if o != nil && o.Padding.IsSet() {
		return true
	}

	return false
}

// SetPadding gets a reference to the given NullableInt32 and assigns it to the Padding field.
func (o *Job) SetPadding(v int32) {
	o.Padding.Set(&v)
}
// SetPaddingNil sets the value for Padding to be an explicit nil
func (o *Job) SetPaddingNil() {
	o.Padding.Set(nil)
}

// UnsetPadding ensures that no value is present for Padding, not even an explicit nil
func (o *Job) UnsetPadding() {
	o.Padding.Unset()
}

// GetLoad returns the Load field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetLoad() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Load
}

// GetLoadOk returns a tuple with the Load field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetLoadOk() ([]int32, bool) {
	if o == nil || IsNil(o.Load) {
		return nil, false
	}
	return o.Load, true
}

// HasLoad returns a boolean if a field has been set.
func (o *Job) HasLoad() bool {
	if o != nil && !IsNil(o.Load) {
		return true
	}

	return false
}

// SetLoad gets a reference to the given []int32 and assigns it to the Load field.
func (o *Job) SetLoad(v []int32) {
	o.Load = v
}

// GetAllowedResources returns the AllowedResources field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Job) GetAllowedResources() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedResources
}

// GetAllowedResourcesOk returns a tuple with the AllowedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Job) GetAllowedResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedResources) {
		return nil, false
	}
	return o.AllowedResources, true
}

// HasAllowedResources returns a boolean if a field has been set.
func (o *Job) HasAllowedResources() bool {
	if o != nil && !IsNil(o.AllowedResources) {
		return true
	}

	return false
}

// SetAllowedResources gets a reference to the given []string and assigns it to the AllowedResources field.
// Deprecated
func (o *Job) SetAllowedResources(v []string) {
	o.AllowedResources = v
}

// GetInitialResource returns the InitialResource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetInitialResource() string {
	if o == nil || IsNil(o.InitialResource.Get()) {
		var ret string
		return ret
	}
	return *o.InitialResource.Get()
}

// GetInitialResourceOk returns a tuple with the InitialResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetInitialResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InitialResource.Get(), o.InitialResource.IsSet()
}

// HasInitialResource returns a boolean if a field has been set.
func (o *Job) HasInitialResource() bool {
	if o != nil && o.InitialResource.IsSet() {
		return true
	}

	return false
}

// SetInitialResource gets a reference to the given NullableString and assigns it to the InitialResource field.
func (o *Job) SetInitialResource(v string) {
	o.InitialResource.Set(&v)
}
// SetInitialResourceNil sets the value for InitialResource to be an explicit nil
func (o *Job) SetInitialResourceNil() {
	o.InitialResource.Set(nil)
}

// UnsetInitialResource ensures that no value is present for InitialResource, not even an explicit nil
func (o *Job) UnsetInitialResource() {
	o.InitialResource.Unset()
}

// GetInitialArrival returns the InitialArrival field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetInitialArrival() string {
	if o == nil || IsNil(o.InitialArrival.Get()) {
		var ret string
		return ret
	}
	return *o.InitialArrival.Get()
}

// GetInitialArrivalOk returns a tuple with the InitialArrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetInitialArrivalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InitialArrival.Get(), o.InitialArrival.IsSet()
}

// HasInitialArrival returns a boolean if a field has been set.
func (o *Job) HasInitialArrival() bool {
	if o != nil && o.InitialArrival.IsSet() {
		return true
	}

	return false
}

// SetInitialArrival gets a reference to the given NullableString and assigns it to the InitialArrival field.
func (o *Job) SetInitialArrival(v string) {
	o.InitialArrival.Set(&v)
}
// SetInitialArrivalNil sets the value for InitialArrival to be an explicit nil
func (o *Job) SetInitialArrivalNil() {
	o.InitialArrival.Set(nil)
}

// UnsetInitialArrival ensures that no value is present for InitialArrival, not even an explicit nil
func (o *Job) UnsetInitialArrival() {
	o.InitialArrival.Unset()
}

// GetDisallowedResources returns the DisallowedResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetDisallowedResources() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DisallowedResources
}

// GetDisallowedResourcesOk returns a tuple with the DisallowedResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetDisallowedResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.DisallowedResources) {
		return nil, false
	}
	return o.DisallowedResources, true
}

// HasDisallowedResources returns a boolean if a field has been set.
func (o *Job) HasDisallowedResources() bool {
	if o != nil && !IsNil(o.DisallowedResources) {
		return true
	}

	return false
}

// SetDisallowedResources gets a reference to the given []string and assigns it to the DisallowedResources field.
func (o *Job) SetDisallowedResources(v []string) {
	o.DisallowedResources = v
}

// GetComplexity returns the Complexity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetComplexity() int32 {
	if o == nil || IsNil(o.Complexity.Get()) {
		var ret int32
		return ret
	}
	return *o.Complexity.Get()
}

// GetComplexityOk returns a tuple with the Complexity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetComplexityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Complexity.Get(), o.Complexity.IsSet()
}

// HasComplexity returns a boolean if a field has been set.
func (o *Job) HasComplexity() bool {
	if o != nil && o.Complexity.IsSet() {
		return true
	}

	return false
}

// SetComplexity gets a reference to the given NullableInt32 and assigns it to the Complexity field.
func (o *Job) SetComplexity(v int32) {
	o.Complexity.Set(&v)
}
// SetComplexityNil sets the value for Complexity to be an explicit nil
func (o *Job) SetComplexityNil() {
	o.Complexity.Set(nil)
}

// UnsetComplexity ensures that no value is present for Complexity, not even an explicit nil
func (o *Job) UnsetComplexity() {
	o.Complexity.Unset()
}

// GetResumable returns the Resumable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetResumable() bool {
	if o == nil || IsNil(o.Resumable.Get()) {
		var ret bool
		return ret
	}
	return *o.Resumable.Get()
}

// GetResumableOk returns a tuple with the Resumable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetResumableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resumable.Get(), o.Resumable.IsSet()
}

// HasResumable returns a boolean if a field has been set.
func (o *Job) HasResumable() bool {
	if o != nil && o.Resumable.IsSet() {
		return true
	}

	return false
}

// SetResumable gets a reference to the given NullableBool and assigns it to the Resumable field.
func (o *Job) SetResumable(v bool) {
	o.Resumable.Set(&v)
}
// SetResumableNil sets the value for Resumable to be an explicit nil
func (o *Job) SetResumableNil() {
	o.Resumable.Set(nil)
}

// UnsetResumable ensures that no value is present for Resumable, not even an explicit nil
func (o *Job) UnsetResumable() {
	o.Resumable.Unset()
}

// GetJobTypes returns the JobTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Job) GetJobTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.JobTypes
}

// GetJobTypesOk returns a tuple with the JobTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Job) GetJobTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.JobTypes) {
		return nil, false
	}
	return o.JobTypes, true
}

// HasJobTypes returns a boolean if a field has been set.
func (o *Job) HasJobTypes() bool {
	if o != nil && !IsNil(o.JobTypes) {
		return true
	}

	return false
}

// SetJobTypes gets a reference to the given []string and assigns it to the JobTypes field.
func (o *Job) SetJobTypes(v []string) {
	o.JobTypes = v
}

func (o Job) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Job) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if o.Urgency.IsSet() {
		toSerialize["urgency"] = o.Urgency.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Rankings != nil {
		toSerialize["rankings"] = o.Rankings
	}
	if o.Windows != nil {
		toSerialize["windows"] = o.Windows
	}
	if o.DurationSquash.IsSet() {
		toSerialize["durationSquash"] = o.DurationSquash.Get()
	}
	if o.PlannedDate.IsSet() {
		toSerialize["plannedDate"] = o.PlannedDate.Get()
	}
	if o.PlannedResource.IsSet() {
		toSerialize["plannedResource"] = o.PlannedResource.Get()
	}
	if o.PlannedArrival.IsSet() {
		toSerialize["plannedArrival"] = o.PlannedArrival.Get()
	}
	if o.Hard.IsSet() {
		toSerialize["hard"] = o.Hard.Get()
	}
	if o.HardWeight.IsSet() {
		toSerialize["hardWeight"] = o.HardWeight.Get()
	}
	if o.Padding.IsSet() {
		toSerialize["padding"] = o.Padding.Get()
	}
	if o.Load != nil {
		toSerialize["load"] = o.Load
	}
	if o.AllowedResources != nil {
		toSerialize["allowedResources"] = o.AllowedResources
	}
	if o.InitialResource.IsSet() {
		toSerialize["initialResource"] = o.InitialResource.Get()
	}
	if o.InitialArrival.IsSet() {
		toSerialize["initialArrival"] = o.InitialArrival.Get()
	}
	if o.DisallowedResources != nil {
		toSerialize["disallowedResources"] = o.DisallowedResources
	}
	if o.Complexity.IsSet() {
		toSerialize["complexity"] = o.Complexity.Get()
	}
	if o.Resumable.IsSet() {
		toSerialize["resumable"] = o.Resumable.Get()
	}
	if o.JobTypes != nil {
		toSerialize["jobTypes"] = o.JobTypes
	}
	return toSerialize, nil
}

func (o *Job) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJob := _Job{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJob)

	if err != nil {
		return err
	}

	*o = Job(varJob)

	return err
}

type NullableJob struct {
	value *Job
	isSet bool
}

func (v NullableJob) Get() *Job {
	return v.value
}

func (v *NullableJob) Set(val *Job) {
	v.value = val
	v.isSet = true
}

func (v NullableJob) IsSet() bool {
	return v.isSet
}

func (v *NullableJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJob(val *Job) *NullableJob {
	return &NullableJob{value: val, isSet: true}
}

func (v NullableJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


