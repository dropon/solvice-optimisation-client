/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Weights type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Weights{}

// Weights OnRoute Weights
type Weights struct {
	// Weight modifier for job priority constraints. Higher values make the solver more likely to include high-priority jobs in the solution when not all jobs can be assigned. This affects job selection probability but not scheduling order. The weight is multiplied by the job's priority value and duration.
	PriorityWeight NullableInt32 `json:"priorityWeight,omitempty"`
	// Weight modifier for workload balancing across resources and time periods. Higher values make the solver more aggressive about equalizing service time distribution. Works with fairWorkloadPerTrip and fairWorkloadPerResource options, and is sensitive to the workloadSensitivity parameter.
	WorkloadSpreadWeight NullableInt32 `json:"workloadSpreadWeight,omitempty"`
	// Weight modifier for total travel time optimization. This is the baseline weight (typically 1) against which all other weights are compared. Higher values make the solver more aggressive about minimizing travel time, potentially at the expense of other objectives.
	TravelTimeWeight NullableInt32 `json:"travelTimeWeight,omitempty"`
	// Weight modifier for deviations from planned arrivals and resource assignments. Higher values make the solver more reluctant to deviate from plannedArrival times and plannedResource assignments. This is crucial for maintaining customer appointments and commitments.
	PlannedWeight NullableInt32 `json:"plannedWeight,omitempty"`
	// Weight modifier for scheduling jobs as early as possible within their time windows and resource availability. Higher values push jobs toward the beginning of shifts and planning periods, useful for front-loading work or maximizing completion rates.
	AsapWeight NullableInt32 `json:"asapWeight,omitempty"`
	// Weight modifier for minimizing the number of active resources per day/trip. The weight is measured in the same units as travel time - a weight of 3600 means using an additional resource is equivalent to 1 hour of travel time. Higher values encourage consolidation of jobs onto fewer resources.
	MinimizeResourcesWeight NullableInt32 `json:"minimizeResourcesWeight,omitempty"`
	// Weight modifier for soft violations of resource assignment constraints. When jobs have allowedResources restrictions and they cannot be satisfied as hard constraints, this weight determines the penalty for assigning jobs to non-allowed resources.
	AllowedResourcesWeight NullableInt32 `json:"allowedResourcesWeight,omitempty"`
	// Weight modifier for total waiting time across all resources. Waiting time occurs when resources arrive at jobs before their time windows open or when they have idle time between jobs. Higher values make the solver more aggressive about minimizing idle time.
	WaitTimeWeight NullableInt32 `json:"waitTimeWeight,omitempty"`
	// Weight modifier for job urgency constraints. Higher values make the solver more aggressive about scheduling urgent jobs earlier in the day and planning period. This affects the sequence and timing of job execution based on their urgency values.
	UrgencyWeight NullableInt32 `json:"urgencyWeight,omitempty"`
	// Weight modifier for total driving time across all resources. Similar to travelTimeWeight but focuses specifically on driving time violations or constraints. Higher values make the solver more concerned with minimizing driving time, useful for fuel efficiency or driver fatigue management.
	DriveTimeWeight NullableInt32 `json:"driveTimeWeight,omitempty"`
	// Weight modifier for resource ranking preferences defined in job rankings. Higher values make the solver more aggressive about assigning jobs to their preferred (lower-ranked) resources, even if it increases travel time or other costs. This helps maintain service quality by using optimal resource assignments.
	RankingWeight NullableInt32 `json:"rankingWeight,omitempty"`
}

// NewWeights instantiates a new Weights object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeights() *Weights {
	this := Weights{}
	return &this
}

// NewWeightsWithDefaults instantiates a new Weights object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeightsWithDefaults() *Weights {
	this := Weights{}
	return &this
}

// GetPriorityWeight returns the PriorityWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetPriorityWeight() int32 {
	if o == nil || IsNil(o.PriorityWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.PriorityWeight.Get()
}

// GetPriorityWeightOk returns a tuple with the PriorityWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetPriorityWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriorityWeight.Get(), o.PriorityWeight.IsSet()
}

// HasPriorityWeight returns a boolean if a field has been set.
func (o *Weights) HasPriorityWeight() bool {
	if o != nil && o.PriorityWeight.IsSet() {
		return true
	}

	return false
}

// SetPriorityWeight gets a reference to the given NullableInt32 and assigns it to the PriorityWeight field.
func (o *Weights) SetPriorityWeight(v int32) {
	o.PriorityWeight.Set(&v)
}
// SetPriorityWeightNil sets the value for PriorityWeight to be an explicit nil
func (o *Weights) SetPriorityWeightNil() {
	o.PriorityWeight.Set(nil)
}

// UnsetPriorityWeight ensures that no value is present for PriorityWeight, not even an explicit nil
func (o *Weights) UnsetPriorityWeight() {
	o.PriorityWeight.Unset()
}

// GetWorkloadSpreadWeight returns the WorkloadSpreadWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetWorkloadSpreadWeight() int32 {
	if o == nil || IsNil(o.WorkloadSpreadWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.WorkloadSpreadWeight.Get()
}

// GetWorkloadSpreadWeightOk returns a tuple with the WorkloadSpreadWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetWorkloadSpreadWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadSpreadWeight.Get(), o.WorkloadSpreadWeight.IsSet()
}

// HasWorkloadSpreadWeight returns a boolean if a field has been set.
func (o *Weights) HasWorkloadSpreadWeight() bool {
	if o != nil && o.WorkloadSpreadWeight.IsSet() {
		return true
	}

	return false
}

// SetWorkloadSpreadWeight gets a reference to the given NullableInt32 and assigns it to the WorkloadSpreadWeight field.
func (o *Weights) SetWorkloadSpreadWeight(v int32) {
	o.WorkloadSpreadWeight.Set(&v)
}
// SetWorkloadSpreadWeightNil sets the value for WorkloadSpreadWeight to be an explicit nil
func (o *Weights) SetWorkloadSpreadWeightNil() {
	o.WorkloadSpreadWeight.Set(nil)
}

// UnsetWorkloadSpreadWeight ensures that no value is present for WorkloadSpreadWeight, not even an explicit nil
func (o *Weights) UnsetWorkloadSpreadWeight() {
	o.WorkloadSpreadWeight.Unset()
}

// GetTravelTimeWeight returns the TravelTimeWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetTravelTimeWeight() int32 {
	if o == nil || IsNil(o.TravelTimeWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.TravelTimeWeight.Get()
}

// GetTravelTimeWeightOk returns a tuple with the TravelTimeWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetTravelTimeWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TravelTimeWeight.Get(), o.TravelTimeWeight.IsSet()
}

// HasTravelTimeWeight returns a boolean if a field has been set.
func (o *Weights) HasTravelTimeWeight() bool {
	if o != nil && o.TravelTimeWeight.IsSet() {
		return true
	}

	return false
}

// SetTravelTimeWeight gets a reference to the given NullableInt32 and assigns it to the TravelTimeWeight field.
func (o *Weights) SetTravelTimeWeight(v int32) {
	o.TravelTimeWeight.Set(&v)
}
// SetTravelTimeWeightNil sets the value for TravelTimeWeight to be an explicit nil
func (o *Weights) SetTravelTimeWeightNil() {
	o.TravelTimeWeight.Set(nil)
}

// UnsetTravelTimeWeight ensures that no value is present for TravelTimeWeight, not even an explicit nil
func (o *Weights) UnsetTravelTimeWeight() {
	o.TravelTimeWeight.Unset()
}

// GetPlannedWeight returns the PlannedWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetPlannedWeight() int32 {
	if o == nil || IsNil(o.PlannedWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.PlannedWeight.Get()
}

// GetPlannedWeightOk returns a tuple with the PlannedWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetPlannedWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedWeight.Get(), o.PlannedWeight.IsSet()
}

// HasPlannedWeight returns a boolean if a field has been set.
func (o *Weights) HasPlannedWeight() bool {
	if o != nil && o.PlannedWeight.IsSet() {
		return true
	}

	return false
}

// SetPlannedWeight gets a reference to the given NullableInt32 and assigns it to the PlannedWeight field.
func (o *Weights) SetPlannedWeight(v int32) {
	o.PlannedWeight.Set(&v)
}
// SetPlannedWeightNil sets the value for PlannedWeight to be an explicit nil
func (o *Weights) SetPlannedWeightNil() {
	o.PlannedWeight.Set(nil)
}

// UnsetPlannedWeight ensures that no value is present for PlannedWeight, not even an explicit nil
func (o *Weights) UnsetPlannedWeight() {
	o.PlannedWeight.Unset()
}

// GetAsapWeight returns the AsapWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetAsapWeight() int32 {
	if o == nil || IsNil(o.AsapWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.AsapWeight.Get()
}

// GetAsapWeightOk returns a tuple with the AsapWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetAsapWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AsapWeight.Get(), o.AsapWeight.IsSet()
}

// HasAsapWeight returns a boolean if a field has been set.
func (o *Weights) HasAsapWeight() bool {
	if o != nil && o.AsapWeight.IsSet() {
		return true
	}

	return false
}

// SetAsapWeight gets a reference to the given NullableInt32 and assigns it to the AsapWeight field.
func (o *Weights) SetAsapWeight(v int32) {
	o.AsapWeight.Set(&v)
}
// SetAsapWeightNil sets the value for AsapWeight to be an explicit nil
func (o *Weights) SetAsapWeightNil() {
	o.AsapWeight.Set(nil)
}

// UnsetAsapWeight ensures that no value is present for AsapWeight, not even an explicit nil
func (o *Weights) UnsetAsapWeight() {
	o.AsapWeight.Unset()
}

// GetMinimizeResourcesWeight returns the MinimizeResourcesWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetMinimizeResourcesWeight() int32 {
	if o == nil || IsNil(o.MinimizeResourcesWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.MinimizeResourcesWeight.Get()
}

// GetMinimizeResourcesWeightOk returns a tuple with the MinimizeResourcesWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetMinimizeResourcesWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimizeResourcesWeight.Get(), o.MinimizeResourcesWeight.IsSet()
}

// HasMinimizeResourcesWeight returns a boolean if a field has been set.
func (o *Weights) HasMinimizeResourcesWeight() bool {
	if o != nil && o.MinimizeResourcesWeight.IsSet() {
		return true
	}

	return false
}

// SetMinimizeResourcesWeight gets a reference to the given NullableInt32 and assigns it to the MinimizeResourcesWeight field.
func (o *Weights) SetMinimizeResourcesWeight(v int32) {
	o.MinimizeResourcesWeight.Set(&v)
}
// SetMinimizeResourcesWeightNil sets the value for MinimizeResourcesWeight to be an explicit nil
func (o *Weights) SetMinimizeResourcesWeightNil() {
	o.MinimizeResourcesWeight.Set(nil)
}

// UnsetMinimizeResourcesWeight ensures that no value is present for MinimizeResourcesWeight, not even an explicit nil
func (o *Weights) UnsetMinimizeResourcesWeight() {
	o.MinimizeResourcesWeight.Unset()
}

// GetAllowedResourcesWeight returns the AllowedResourcesWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetAllowedResourcesWeight() int32 {
	if o == nil || IsNil(o.AllowedResourcesWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.AllowedResourcesWeight.Get()
}

// GetAllowedResourcesWeightOk returns a tuple with the AllowedResourcesWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetAllowedResourcesWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowedResourcesWeight.Get(), o.AllowedResourcesWeight.IsSet()
}

// HasAllowedResourcesWeight returns a boolean if a field has been set.
func (o *Weights) HasAllowedResourcesWeight() bool {
	if o != nil && o.AllowedResourcesWeight.IsSet() {
		return true
	}

	return false
}

// SetAllowedResourcesWeight gets a reference to the given NullableInt32 and assigns it to the AllowedResourcesWeight field.
func (o *Weights) SetAllowedResourcesWeight(v int32) {
	o.AllowedResourcesWeight.Set(&v)
}
// SetAllowedResourcesWeightNil sets the value for AllowedResourcesWeight to be an explicit nil
func (o *Weights) SetAllowedResourcesWeightNil() {
	o.AllowedResourcesWeight.Set(nil)
}

// UnsetAllowedResourcesWeight ensures that no value is present for AllowedResourcesWeight, not even an explicit nil
func (o *Weights) UnsetAllowedResourcesWeight() {
	o.AllowedResourcesWeight.Unset()
}

// GetWaitTimeWeight returns the WaitTimeWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetWaitTimeWeight() int32 {
	if o == nil || IsNil(o.WaitTimeWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.WaitTimeWeight.Get()
}

// GetWaitTimeWeightOk returns a tuple with the WaitTimeWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetWaitTimeWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.WaitTimeWeight.Get(), o.WaitTimeWeight.IsSet()
}

// HasWaitTimeWeight returns a boolean if a field has been set.
func (o *Weights) HasWaitTimeWeight() bool {
	if o != nil && o.WaitTimeWeight.IsSet() {
		return true
	}

	return false
}

// SetWaitTimeWeight gets a reference to the given NullableInt32 and assigns it to the WaitTimeWeight field.
func (o *Weights) SetWaitTimeWeight(v int32) {
	o.WaitTimeWeight.Set(&v)
}
// SetWaitTimeWeightNil sets the value for WaitTimeWeight to be an explicit nil
func (o *Weights) SetWaitTimeWeightNil() {
	o.WaitTimeWeight.Set(nil)
}

// UnsetWaitTimeWeight ensures that no value is present for WaitTimeWeight, not even an explicit nil
func (o *Weights) UnsetWaitTimeWeight() {
	o.WaitTimeWeight.Unset()
}

// GetUrgencyWeight returns the UrgencyWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetUrgencyWeight() int32 {
	if o == nil || IsNil(o.UrgencyWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.UrgencyWeight.Get()
}

// GetUrgencyWeightOk returns a tuple with the UrgencyWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetUrgencyWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UrgencyWeight.Get(), o.UrgencyWeight.IsSet()
}

// HasUrgencyWeight returns a boolean if a field has been set.
func (o *Weights) HasUrgencyWeight() bool {
	if o != nil && o.UrgencyWeight.IsSet() {
		return true
	}

	return false
}

// SetUrgencyWeight gets a reference to the given NullableInt32 and assigns it to the UrgencyWeight field.
func (o *Weights) SetUrgencyWeight(v int32) {
	o.UrgencyWeight.Set(&v)
}
// SetUrgencyWeightNil sets the value for UrgencyWeight to be an explicit nil
func (o *Weights) SetUrgencyWeightNil() {
	o.UrgencyWeight.Set(nil)
}

// UnsetUrgencyWeight ensures that no value is present for UrgencyWeight, not even an explicit nil
func (o *Weights) UnsetUrgencyWeight() {
	o.UrgencyWeight.Unset()
}

// GetDriveTimeWeight returns the DriveTimeWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetDriveTimeWeight() int32 {
	if o == nil || IsNil(o.DriveTimeWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.DriveTimeWeight.Get()
}

// GetDriveTimeWeightOk returns a tuple with the DriveTimeWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetDriveTimeWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DriveTimeWeight.Get(), o.DriveTimeWeight.IsSet()
}

// HasDriveTimeWeight returns a boolean if a field has been set.
func (o *Weights) HasDriveTimeWeight() bool {
	if o != nil && o.DriveTimeWeight.IsSet() {
		return true
	}

	return false
}

// SetDriveTimeWeight gets a reference to the given NullableInt32 and assigns it to the DriveTimeWeight field.
func (o *Weights) SetDriveTimeWeight(v int32) {
	o.DriveTimeWeight.Set(&v)
}
// SetDriveTimeWeightNil sets the value for DriveTimeWeight to be an explicit nil
func (o *Weights) SetDriveTimeWeightNil() {
	o.DriveTimeWeight.Set(nil)
}

// UnsetDriveTimeWeight ensures that no value is present for DriveTimeWeight, not even an explicit nil
func (o *Weights) UnsetDriveTimeWeight() {
	o.DriveTimeWeight.Unset()
}

// GetRankingWeight returns the RankingWeight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Weights) GetRankingWeight() int32 {
	if o == nil || IsNil(o.RankingWeight.Get()) {
		var ret int32
		return ret
	}
	return *o.RankingWeight.Get()
}

// GetRankingWeightOk returns a tuple with the RankingWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Weights) GetRankingWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RankingWeight.Get(), o.RankingWeight.IsSet()
}

// HasRankingWeight returns a boolean if a field has been set.
func (o *Weights) HasRankingWeight() bool {
	if o != nil && o.RankingWeight.IsSet() {
		return true
	}

	return false
}

// SetRankingWeight gets a reference to the given NullableInt32 and assigns it to the RankingWeight field.
func (o *Weights) SetRankingWeight(v int32) {
	o.RankingWeight.Set(&v)
}
// SetRankingWeightNil sets the value for RankingWeight to be an explicit nil
func (o *Weights) SetRankingWeightNil() {
	o.RankingWeight.Set(nil)
}

// UnsetRankingWeight ensures that no value is present for RankingWeight, not even an explicit nil
func (o *Weights) UnsetRankingWeight() {
	o.RankingWeight.Unset()
}

func (o Weights) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Weights) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PriorityWeight.IsSet() {
		toSerialize["priorityWeight"] = o.PriorityWeight.Get()
	}
	if o.WorkloadSpreadWeight.IsSet() {
		toSerialize["workloadSpreadWeight"] = o.WorkloadSpreadWeight.Get()
	}
	if o.TravelTimeWeight.IsSet() {
		toSerialize["travelTimeWeight"] = o.TravelTimeWeight.Get()
	}
	if o.PlannedWeight.IsSet() {
		toSerialize["plannedWeight"] = o.PlannedWeight.Get()
	}
	if o.AsapWeight.IsSet() {
		toSerialize["asapWeight"] = o.AsapWeight.Get()
	}
	if o.MinimizeResourcesWeight.IsSet() {
		toSerialize["minimizeResourcesWeight"] = o.MinimizeResourcesWeight.Get()
	}
	if o.AllowedResourcesWeight.IsSet() {
		toSerialize["allowedResourcesWeight"] = o.AllowedResourcesWeight.Get()
	}
	if o.WaitTimeWeight.IsSet() {
		toSerialize["waitTimeWeight"] = o.WaitTimeWeight.Get()
	}
	if o.UrgencyWeight.IsSet() {
		toSerialize["urgencyWeight"] = o.UrgencyWeight.Get()
	}
	if o.DriveTimeWeight.IsSet() {
		toSerialize["driveTimeWeight"] = o.DriveTimeWeight.Get()
	}
	if o.RankingWeight.IsSet() {
		toSerialize["rankingWeight"] = o.RankingWeight.Get()
	}
	return toSerialize, nil
}

type NullableWeights struct {
	value *Weights
	isSet bool
}

func (v NullableWeights) Get() *Weights {
	return v.value
}

func (v *NullableWeights) Set(val *Weights) {
	v.value = val
	v.isSet = true
}

func (v NullableWeights) IsSet() bool {
	return v.isSet
}

func (v *NullableWeights) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeights(val *Weights) *NullableWeights {
	return &NullableWeights{value: val, isSet: true}
}

func (v NullableWeights) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeights) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


