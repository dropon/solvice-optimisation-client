/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Ranking type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ranking{}

// Ranking A ranking is a measure of the affinity of a `Resource` towards a `Job`.
type Ranking struct {
	// Name of the resource being ranked for this job. Must exactly match a resource name defined in the request's resources list. This creates a preference relationship between the job and the specified resource.
	Name string `json:"name"`
	// Preference ranking score for this resource (1-100). Lower values indicate stronger preference - rank 1 is most preferred, rank 100 is least preferred. The solver will try to assign jobs to higher-ranked (lower-numbered) resources when possible, with the preference strength controlled by the rankingWeight in the weights configuration.
	Ranking NullableInt32 `json:"ranking,omitempty"`
}

type _Ranking Ranking

// NewRanking instantiates a new Ranking object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRanking(name string) *Ranking {
	this := Ranking{}
	this.Name = name
	return &this
}

// NewRankingWithDefaults instantiates a new Ranking object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRankingWithDefaults() *Ranking {
	this := Ranking{}
	return &this
}

// GetName returns the Name field value
func (o *Ranking) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Ranking) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Ranking) SetName(v string) {
	o.Name = v
}

// GetRanking returns the Ranking field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ranking) GetRanking() int32 {
	if o == nil || IsNil(o.Ranking.Get()) {
		var ret int32
		return ret
	}
	return *o.Ranking.Get()
}

// GetRankingOk returns a tuple with the Ranking field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ranking) GetRankingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ranking.Get(), o.Ranking.IsSet()
}

// HasRanking returns a boolean if a field has been set.
func (o *Ranking) HasRanking() bool {
	if o != nil && o.Ranking.IsSet() {
		return true
	}

	return false
}

// SetRanking gets a reference to the given NullableInt32 and assigns it to the Ranking field.
func (o *Ranking) SetRanking(v int32) {
	o.Ranking.Set(&v)
}
// SetRankingNil sets the value for Ranking to be an explicit nil
func (o *Ranking) SetRankingNil() {
	o.Ranking.Set(nil)
}

// UnsetRanking ensures that no value is present for Ranking, not even an explicit nil
func (o *Ranking) UnsetRanking() {
	o.Ranking.Unset()
}

func (o Ranking) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ranking) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Ranking.IsSet() {
		toSerialize["ranking"] = o.Ranking.Get()
	}
	return toSerialize, nil
}

func (o *Ranking) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRanking := _Ranking{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRanking)

	if err != nil {
		return err
	}

	*o = Ranking(varRanking)

	return err
}

type NullableRanking struct {
	value *Ranking
	isSet bool
}

func (v NullableRanking) Get() *Ranking {
	return v.value
}

func (v *NullableRanking) Set(val *Ranking) {
	v.value = val
	v.isSet = true
}

func (v NullableRanking) IsSet() bool {
	return v.isSet
}

func (v *NullableRanking) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRanking(val *Ranking) *NullableRanking {
	return &NullableRanking{value: val, isSet: true}
}

func (v NullableRanking) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRanking) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


