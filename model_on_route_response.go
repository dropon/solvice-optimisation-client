/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"encoding/json"
)

// checks if the OnRouteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnRouteResponse{}

// OnRouteResponse OnRoute response from solve
type OnRouteResponse struct {
	// Id of the solve job
	Id NullableString `json:"id,omitempty"`
	// Status of the Response
	Status NullableSolviceStatus        `json:"status,omitempty"`
	Score  NullableOnRouteResponseScore `json:"score,omitempty"`
	// Constraints that are violated
	Unresolved interface{} `json:"unresolved,omitempty"`
	// Actual solution: trips per shift/day and per resource
	Trips []Trip `json:"trips"`
	// Wait time for all resources
	TotalWaitTimeInSeconds NullableInt64 `json:"totalWaitTimeInSeconds,omitempty"`
	// How full this schedule is in terms of work time (incl travel) over capacity. Eg 80%
	Occupancy NullableFloat64 `json:"occupancy,omitempty"`
	// Travel distance for all resources in meters
	TotalTravelDistanceInMeters NullableInt64 `json:"totalTravelDistanceInMeters,omitempty"`
	// Travel time for all resources
	TotalTravelTimeInSeconds NullableInt64 `json:"totalTravelTimeInSeconds,omitempty"`
	// Service time for all resources
	TotalServiceTimeInSeconds NullableInt64 `json:"totalServiceTimeInSeconds,omitempty"`
	// Unserved jobs
	Unserved []string `json:"unserved,omitempty"`
	// Reasons why jobs could not be served, mapped by job name
	UnservedReasons map[string]map[string]interface{} `json:"unservedReasons,omitempty"`
	// List of suggested assignments returned by suggest api call
	Suggestions []SuggestionDto `json:"suggestions,omitempty"`
	// Events and warnings generated during the solver execution
	Messages         []string             `json:"messages,omitempty"`
	Violations       []ViolatedConstraint `json:"violations,omitempty"`
	WorkloadFairness NullableFloat64      `json:"workloadFairness,omitempty"`
}

type _OnRouteResponse OnRouteResponse

// NewOnRouteResponse instantiates a new OnRouteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnRouteResponse(trips []Trip) *OnRouteResponse {
	this := OnRouteResponse{}
	this.Trips = trips
	return &this
}

// NewOnRouteResponseWithDefaults instantiates a new OnRouteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnRouteResponseWithDefaults() *OnRouteResponse {
	this := OnRouteResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OnRouteResponse) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *OnRouteResponse) SetId(v string) {
	o.Id.Set(&v)
}

// SetIdNil sets the value for Id to be an explicit nil
func (o *OnRouteResponse) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OnRouteResponse) UnsetId() {
	o.Id.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetStatus() SolviceStatus {
	if o == nil || IsNil(o.Status.Get()) {
		var ret SolviceStatus
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetStatusOk() (*SolviceStatus, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *OnRouteResponse) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableSolviceStatus and assigns it to the Status field.
func (o *OnRouteResponse) SetStatus(v SolviceStatus) {
	o.Status.Set(&v)
}

// SetStatusNil sets the value for Status to be an explicit nil
func (o *OnRouteResponse) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *OnRouteResponse) UnsetStatus() {
	o.Status.Unset()
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetScore() OnRouteResponseScore {
	if o == nil || IsNil(o.Score.Get()) {
		var ret OnRouteResponseScore
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetScoreOk() (*OnRouteResponseScore, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *OnRouteResponse) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableOnRouteResponseScore and assigns it to the Score field.
func (o *OnRouteResponse) SetScore(v OnRouteResponseScore) {
	o.Score.Set(&v)
}

// SetScoreNil sets the value for Score to be an explicit nil
func (o *OnRouteResponse) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *OnRouteResponse) UnsetScore() {
	o.Score.Unset()
}

// GetUnresolved returns the Unresolved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetUnresolved() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Unresolved
}

// GetUnresolvedOk returns a tuple with the Unresolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetUnresolvedOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Unresolved) {
		return nil, false
	}
	return &o.Unresolved, true
}

// HasUnresolved returns a boolean if a field has been set.
func (o *OnRouteResponse) HasUnresolved() bool {
	if o != nil && !IsNil(o.Unresolved) {
		return true
	}

	return false
}

// SetUnresolved gets a reference to the given interface{} and assigns it to the Unresolved field.
func (o *OnRouteResponse) SetUnresolved(v interface{}) {
	o.Unresolved = v
}

// GetTrips returns the Trips field value
func (o *OnRouteResponse) GetTrips() []Trip {
	if o == nil {
		var ret []Trip
		return ret
	}

	return o.Trips
}

// GetTripsOk returns a tuple with the Trips field value
// and a boolean to check if the value has been set.
func (o *OnRouteResponse) GetTripsOk() ([]Trip, bool) {
	if o == nil {
		return nil, false
	}
	return o.Trips, true
}

// SetTrips sets field value
func (o *OnRouteResponse) SetTrips(v []Trip) {
	o.Trips = v
}

// GetTotalWaitTimeInSeconds returns the TotalWaitTimeInSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetTotalWaitTimeInSeconds() int64 {
	if o == nil || IsNil(o.TotalWaitTimeInSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalWaitTimeInSeconds.Get()
}

// GetTotalWaitTimeInSecondsOk returns a tuple with the TotalWaitTimeInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetTotalWaitTimeInSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalWaitTimeInSeconds.Get(), o.TotalWaitTimeInSeconds.IsSet()
}

// HasTotalWaitTimeInSeconds returns a boolean if a field has been set.
func (o *OnRouteResponse) HasTotalWaitTimeInSeconds() bool {
	if o != nil && o.TotalWaitTimeInSeconds.IsSet() {
		return true
	}

	return false
}

// SetTotalWaitTimeInSeconds gets a reference to the given NullableInt64 and assigns it to the TotalWaitTimeInSeconds field.
func (o *OnRouteResponse) SetTotalWaitTimeInSeconds(v int64) {
	o.TotalWaitTimeInSeconds.Set(&v)
}

// SetTotalWaitTimeInSecondsNil sets the value for TotalWaitTimeInSeconds to be an explicit nil
func (o *OnRouteResponse) SetTotalWaitTimeInSecondsNil() {
	o.TotalWaitTimeInSeconds.Set(nil)
}

// UnsetTotalWaitTimeInSeconds ensures that no value is present for TotalWaitTimeInSeconds, not even an explicit nil
func (o *OnRouteResponse) UnsetTotalWaitTimeInSeconds() {
	o.TotalWaitTimeInSeconds.Unset()
}

// GetOccupancy returns the Occupancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetOccupancy() float64 {
	if o == nil || IsNil(o.Occupancy.Get()) {
		var ret float64
		return ret
	}
	return *o.Occupancy.Get()
}

// GetOccupancyOk returns a tuple with the Occupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetOccupancyOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Occupancy.Get(), o.Occupancy.IsSet()
}

// HasOccupancy returns a boolean if a field has been set.
func (o *OnRouteResponse) HasOccupancy() bool {
	if o != nil && o.Occupancy.IsSet() {
		return true
	}

	return false
}

// SetOccupancy gets a reference to the given NullableFloat64 and assigns it to the Occupancy field.
func (o *OnRouteResponse) SetOccupancy(v float64) {
	o.Occupancy.Set(&v)
}

// SetOccupancyNil sets the value for Occupancy to be an explicit nil
func (o *OnRouteResponse) SetOccupancyNil() {
	o.Occupancy.Set(nil)
}

// UnsetOccupancy ensures that no value is present for Occupancy, not even an explicit nil
func (o *OnRouteResponse) UnsetOccupancy() {
	o.Occupancy.Unset()
}

// GetTotalTravelDistanceInMeters returns the TotalTravelDistanceInMeters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetTotalTravelDistanceInMeters() int64 {
	if o == nil || IsNil(o.TotalTravelDistanceInMeters.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalTravelDistanceInMeters.Get()
}

// GetTotalTravelDistanceInMetersOk returns a tuple with the TotalTravelDistanceInMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetTotalTravelDistanceInMetersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalTravelDistanceInMeters.Get(), o.TotalTravelDistanceInMeters.IsSet()
}

// HasTotalTravelDistanceInMeters returns a boolean if a field has been set.
func (o *OnRouteResponse) HasTotalTravelDistanceInMeters() bool {
	if o != nil && o.TotalTravelDistanceInMeters.IsSet() {
		return true
	}

	return false
}

// SetTotalTravelDistanceInMeters gets a reference to the given NullableInt64 and assigns it to the TotalTravelDistanceInMeters field.
func (o *OnRouteResponse) SetTotalTravelDistanceInMeters(v int64) {
	o.TotalTravelDistanceInMeters.Set(&v)
}

// SetTotalTravelDistanceInMetersNil sets the value for TotalTravelDistanceInMeters to be an explicit nil
func (o *OnRouteResponse) SetTotalTravelDistanceInMetersNil() {
	o.TotalTravelDistanceInMeters.Set(nil)
}

// UnsetTotalTravelDistanceInMeters ensures that no value is present for TotalTravelDistanceInMeters, not even an explicit nil
func (o *OnRouteResponse) UnsetTotalTravelDistanceInMeters() {
	o.TotalTravelDistanceInMeters.Unset()
}

// GetTotalTravelTimeInSeconds returns the TotalTravelTimeInSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetTotalTravelTimeInSeconds() int64 {
	if o == nil || IsNil(o.TotalTravelTimeInSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalTravelTimeInSeconds.Get()
}

// GetTotalTravelTimeInSecondsOk returns a tuple with the TotalTravelTimeInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetTotalTravelTimeInSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalTravelTimeInSeconds.Get(), o.TotalTravelTimeInSeconds.IsSet()
}

// HasTotalTravelTimeInSeconds returns a boolean if a field has been set.
func (o *OnRouteResponse) HasTotalTravelTimeInSeconds() bool {
	if o != nil && o.TotalTravelTimeInSeconds.IsSet() {
		return true
	}

	return false
}

// SetTotalTravelTimeInSeconds gets a reference to the given NullableInt64 and assigns it to the TotalTravelTimeInSeconds field.
func (o *OnRouteResponse) SetTotalTravelTimeInSeconds(v int64) {
	o.TotalTravelTimeInSeconds.Set(&v)
}

// SetTotalTravelTimeInSecondsNil sets the value for TotalTravelTimeInSeconds to be an explicit nil
func (o *OnRouteResponse) SetTotalTravelTimeInSecondsNil() {
	o.TotalTravelTimeInSeconds.Set(nil)
}

// UnsetTotalTravelTimeInSeconds ensures that no value is present for TotalTravelTimeInSeconds, not even an explicit nil
func (o *OnRouteResponse) UnsetTotalTravelTimeInSeconds() {
	o.TotalTravelTimeInSeconds.Unset()
}

// GetTotalServiceTimeInSeconds returns the TotalServiceTimeInSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetTotalServiceTimeInSeconds() int64 {
	if o == nil || IsNil(o.TotalServiceTimeInSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalServiceTimeInSeconds.Get()
}

// GetTotalServiceTimeInSecondsOk returns a tuple with the TotalServiceTimeInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetTotalServiceTimeInSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalServiceTimeInSeconds.Get(), o.TotalServiceTimeInSeconds.IsSet()
}

// HasTotalServiceTimeInSeconds returns a boolean if a field has been set.
func (o *OnRouteResponse) HasTotalServiceTimeInSeconds() bool {
	if o != nil && o.TotalServiceTimeInSeconds.IsSet() {
		return true
	}

	return false
}

// SetTotalServiceTimeInSeconds gets a reference to the given NullableInt64 and assigns it to the TotalServiceTimeInSeconds field.
func (o *OnRouteResponse) SetTotalServiceTimeInSeconds(v int64) {
	o.TotalServiceTimeInSeconds.Set(&v)
}

// SetTotalServiceTimeInSecondsNil sets the value for TotalServiceTimeInSeconds to be an explicit nil
func (o *OnRouteResponse) SetTotalServiceTimeInSecondsNil() {
	o.TotalServiceTimeInSeconds.Set(nil)
}

// UnsetTotalServiceTimeInSeconds ensures that no value is present for TotalServiceTimeInSeconds, not even an explicit nil
func (o *OnRouteResponse) UnsetTotalServiceTimeInSeconds() {
	o.TotalServiceTimeInSeconds.Unset()
}

// GetUnserved returns the Unserved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetUnserved() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Unserved
}

// GetUnservedOk returns a tuple with the Unserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetUnservedOk() ([]string, bool) {
	if o == nil || IsNil(o.Unserved) {
		return nil, false
	}
	return o.Unserved, true
}

// HasUnserved returns a boolean if a field has been set.
func (o *OnRouteResponse) HasUnserved() bool {
	if o != nil && !IsNil(o.Unserved) {
		return true
	}

	return false
}

// SetUnserved gets a reference to the given []string and assigns it to the Unserved field.
func (o *OnRouteResponse) SetUnserved(v []string) {
	o.Unserved = v
}

// GetUnservedReasons returns the UnservedReasons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetUnservedReasons() map[string]map[string]interface{} {
	if o == nil {
		var ret map[string]map[string]interface{}
		return ret
	}
	return o.UnservedReasons
}

// GetUnservedReasonsOk returns a tuple with the UnservedReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetUnservedReasonsOk() (map[string]map[string]interface{}, bool) {
	if o == nil || IsNil(o.UnservedReasons) {
		return map[string]map[string]interface{}{}, false
	}
	return o.UnservedReasons, true
}

// HasUnservedReasons returns a boolean if a field has been set.
func (o *OnRouteResponse) HasUnservedReasons() bool {
	if o != nil && !IsNil(o.UnservedReasons) {
		return true
	}

	return false
}

// SetUnservedReasons gets a reference to the given map[string]map[string]interface{} and assigns it to the UnservedReasons field.
func (o *OnRouteResponse) SetUnservedReasons(v map[string]map[string]interface{}) {
	o.UnservedReasons = v
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetSuggestions() []SuggestionDto {
	if o == nil {
		var ret []SuggestionDto
		return ret
	}
	return o.Suggestions
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetSuggestionsOk() ([]SuggestionDto, bool) {
	if o == nil || IsNil(o.Suggestions) {
		return nil, false
	}
	return o.Suggestions, true
}

// HasSuggestions returns a boolean if a field has been set.
func (o *OnRouteResponse) HasSuggestions() bool {
	if o != nil && !IsNil(o.Suggestions) {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given []SuggestionDto and assigns it to the Suggestions field.
func (o *OnRouteResponse) SetSuggestions(v []SuggestionDto) {
	o.Suggestions = v
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *OnRouteResponse) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *OnRouteResponse) SetMessages(v []string) {
	o.Messages = v
}

// GetViolations returns the Violations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetViolations() []ViolatedConstraint {
	if o == nil {
		var ret []ViolatedConstraint
		return ret
	}
	return o.Violations
}

// GetViolationsOk returns a tuple with the Violations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetViolationsOk() ([]ViolatedConstraint, bool) {
	if o == nil || IsNil(o.Violations) {
		return nil, false
	}
	return o.Violations, true
}

// HasViolations returns a boolean if a field has been set.
func (o *OnRouteResponse) HasViolations() bool {
	if o != nil && !IsNil(o.Violations) {
		return true
	}

	return false
}

// SetViolations gets a reference to the given []ViolatedConstraint and assigns it to the Violations field.
func (o *OnRouteResponse) SetViolations(v []ViolatedConstraint) {
	o.Violations = v
}

// GetWorkloadFairness returns the WorkloadFairness field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteResponse) GetWorkloadFairness() float64 {
	if o == nil || IsNil(o.WorkloadFairness.Get()) {
		var ret float64
		return ret
	}
	return *o.WorkloadFairness.Get()
}

// GetWorkloadFairnessOk returns a tuple with the WorkloadFairness field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteResponse) GetWorkloadFairnessOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadFairness.Get(), o.WorkloadFairness.IsSet()
}

// HasWorkloadFairness returns a boolean if a field has been set.
func (o *OnRouteResponse) HasWorkloadFairness() bool {
	if o != nil && o.WorkloadFairness.IsSet() {
		return true
	}

	return false
}

// SetWorkloadFairness gets a reference to the given NullableFloat64 and assigns it to the WorkloadFairness field.
func (o *OnRouteResponse) SetWorkloadFairness(v float64) {
	o.WorkloadFairness.Set(&v)
}

// SetWorkloadFairnessNil sets the value for WorkloadFairness to be an explicit nil
func (o *OnRouteResponse) SetWorkloadFairnessNil() {
	o.WorkloadFairness.Set(nil)
}

// UnsetWorkloadFairness ensures that no value is present for WorkloadFairness, not even an explicit nil
func (o *OnRouteResponse) UnsetWorkloadFairness() {
	o.WorkloadFairness.Unset()
}

func (o OnRouteResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnRouteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if o.Unresolved != nil {
		toSerialize["unresolved"] = o.Unresolved
	}
	toSerialize["trips"] = o.Trips
	if o.TotalWaitTimeInSeconds.IsSet() {
		toSerialize["totalWaitTimeInSeconds"] = o.TotalWaitTimeInSeconds.Get()
	}
	if o.Occupancy.IsSet() {
		toSerialize["occupancy"] = o.Occupancy.Get()
	}
	if o.TotalTravelDistanceInMeters.IsSet() {
		toSerialize["totalTravelDistanceInMeters"] = o.TotalTravelDistanceInMeters.Get()
	}
	if o.TotalTravelTimeInSeconds.IsSet() {
		toSerialize["totalTravelTimeInSeconds"] = o.TotalTravelTimeInSeconds.Get()
	}
	if o.TotalServiceTimeInSeconds.IsSet() {
		toSerialize["totalServiceTimeInSeconds"] = o.TotalServiceTimeInSeconds.Get()
	}
	if o.Unserved != nil {
		toSerialize["unserved"] = o.Unserved
	}
	if o.UnservedReasons != nil {
		toSerialize["unservedReasons"] = o.UnservedReasons
	}
	if o.Suggestions != nil {
		toSerialize["suggestions"] = o.Suggestions
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.Violations != nil {
		toSerialize["violations"] = o.Violations
	}
	if o.WorkloadFairness.IsSet() {
		toSerialize["workloadFairness"] = o.WorkloadFairness.Get()
	}
	return toSerialize, nil
}

func (o *OnRouteResponse) UnmarshalJSON(data []byte) (err error) {
	varOnRouteResponse := _OnRouteResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnRouteResponse)
	if err != nil {
		return err
	}

	*o = OnRouteResponse(varOnRouteResponse)

	return err
}

type NullableOnRouteResponse struct {
	value *OnRouteResponse
	isSet bool
}

func (v NullableOnRouteResponse) Get() *OnRouteResponse {
	return v.value
}

func (v *NullableOnRouteResponse) Set(val *OnRouteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOnRouteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOnRouteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnRouteResponse(val *OnRouteResponse) *NullableOnRouteResponse {
	return &NullableOnRouteResponse{value: val, isSet: true}
}

func (v NullableOnRouteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnRouteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
