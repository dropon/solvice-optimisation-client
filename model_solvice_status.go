/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// SolviceStatus Status of the solve job.
type SolviceStatus string

// List of SolviceStatus
const (
	ERROR SolviceStatus = "ERROR"
	QUEUED SolviceStatus = "QUEUED"
	SOLVING SolviceStatus = "SOLVING"
	SOLVED SolviceStatus = "SOLVED"
)

// All allowed values of SolviceStatus enum
var AllowedSolviceStatusEnumValues = []SolviceStatus{
	"ERROR",
	"QUEUED",
	"SOLVING",
	"SOLVED",
}

func (v *SolviceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SolviceStatus(value)
	for _, existing := range AllowedSolviceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SolviceStatus", value)
}

// NewSolviceStatusFromValue returns a pointer to a valid SolviceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSolviceStatusFromValue(v string) (*SolviceStatus, error) {
	ev := SolviceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SolviceStatus: valid values are %v", v, AllowedSolviceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SolviceStatus) IsValid() bool {
	for _, existing := range AllowedSolviceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SolviceStatus value
func (v SolviceStatus) Ptr() *SolviceStatus {
	return &v
}

type NullableSolviceStatus struct {
	value *SolviceStatus
	isSet bool
}

func (v NullableSolviceStatus) Get() *SolviceStatus {
	return v.value
}

func (v *NullableSolviceStatus) Set(val *SolviceStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSolviceStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSolviceStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolviceStatus(val *SolviceStatus) *NullableSolviceStatus {
	return &NullableSolviceStatus{value: val, isSet: true}
}

func (v NullableSolviceStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolviceStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

