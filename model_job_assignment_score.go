/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the JobAssignmentScore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobAssignmentScore{}

// JobAssignmentScore Score of the assignment
type JobAssignmentScore struct {
	// The score of the constraints that are hard. This should be 0 in order to be feasible.
	HardScore NullableInt64 `json:"hardScore,omitempty"`
	// The score of the constraints that are medium.
	MediumScore NullableInt64 `json:"mediumScore,omitempty"`
	// The score of the constraints that are soft.
	SoftScore NullableInt64 `json:"softScore,omitempty"`
	Feasible NullableBool `json:"feasible,omitempty"`
}

// NewJobAssignmentScore instantiates a new JobAssignmentScore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobAssignmentScore() *JobAssignmentScore {
	this := JobAssignmentScore{}
	return &this
}

// NewJobAssignmentScoreWithDefaults instantiates a new JobAssignmentScore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobAssignmentScoreWithDefaults() *JobAssignmentScore {
	this := JobAssignmentScore{}
	return &this
}

// GetHardScore returns the HardScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignmentScore) GetHardScore() int64 {
	if o == nil || IsNil(o.HardScore.Get()) {
		var ret int64
		return ret
	}
	return *o.HardScore.Get()
}

// GetHardScoreOk returns a tuple with the HardScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignmentScore) GetHardScoreOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HardScore.Get(), o.HardScore.IsSet()
}

// HasHardScore returns a boolean if a field has been set.
func (o *JobAssignmentScore) HasHardScore() bool {
	if o != nil && o.HardScore.IsSet() {
		return true
	}

	return false
}

// SetHardScore gets a reference to the given NullableInt64 and assigns it to the HardScore field.
func (o *JobAssignmentScore) SetHardScore(v int64) {
	o.HardScore.Set(&v)
}
// SetHardScoreNil sets the value for HardScore to be an explicit nil
func (o *JobAssignmentScore) SetHardScoreNil() {
	o.HardScore.Set(nil)
}

// UnsetHardScore ensures that no value is present for HardScore, not even an explicit nil
func (o *JobAssignmentScore) UnsetHardScore() {
	o.HardScore.Unset()
}

// GetMediumScore returns the MediumScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignmentScore) GetMediumScore() int64 {
	if o == nil || IsNil(o.MediumScore.Get()) {
		var ret int64
		return ret
	}
	return *o.MediumScore.Get()
}

// GetMediumScoreOk returns a tuple with the MediumScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignmentScore) GetMediumScoreOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MediumScore.Get(), o.MediumScore.IsSet()
}

// HasMediumScore returns a boolean if a field has been set.
func (o *JobAssignmentScore) HasMediumScore() bool {
	if o != nil && o.MediumScore.IsSet() {
		return true
	}

	return false
}

// SetMediumScore gets a reference to the given NullableInt64 and assigns it to the MediumScore field.
func (o *JobAssignmentScore) SetMediumScore(v int64) {
	o.MediumScore.Set(&v)
}
// SetMediumScoreNil sets the value for MediumScore to be an explicit nil
func (o *JobAssignmentScore) SetMediumScoreNil() {
	o.MediumScore.Set(nil)
}

// UnsetMediumScore ensures that no value is present for MediumScore, not even an explicit nil
func (o *JobAssignmentScore) UnsetMediumScore() {
	o.MediumScore.Unset()
}

// GetSoftScore returns the SoftScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignmentScore) GetSoftScore() int64 {
	if o == nil || IsNil(o.SoftScore.Get()) {
		var ret int64
		return ret
	}
	return *o.SoftScore.Get()
}

// GetSoftScoreOk returns a tuple with the SoftScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignmentScore) GetSoftScoreOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoftScore.Get(), o.SoftScore.IsSet()
}

// HasSoftScore returns a boolean if a field has been set.
func (o *JobAssignmentScore) HasSoftScore() bool {
	if o != nil && o.SoftScore.IsSet() {
		return true
	}

	return false
}

// SetSoftScore gets a reference to the given NullableInt64 and assigns it to the SoftScore field.
func (o *JobAssignmentScore) SetSoftScore(v int64) {
	o.SoftScore.Set(&v)
}
// SetSoftScoreNil sets the value for SoftScore to be an explicit nil
func (o *JobAssignmentScore) SetSoftScoreNil() {
	o.SoftScore.Set(nil)
}

// UnsetSoftScore ensures that no value is present for SoftScore, not even an explicit nil
func (o *JobAssignmentScore) UnsetSoftScore() {
	o.SoftScore.Unset()
}

// GetFeasible returns the Feasible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignmentScore) GetFeasible() bool {
	if o == nil || IsNil(o.Feasible.Get()) {
		var ret bool
		return ret
	}
	return *o.Feasible.Get()
}

// GetFeasibleOk returns a tuple with the Feasible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignmentScore) GetFeasibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Feasible.Get(), o.Feasible.IsSet()
}

// HasFeasible returns a boolean if a field has been set.
func (o *JobAssignmentScore) HasFeasible() bool {
	if o != nil && o.Feasible.IsSet() {
		return true
	}

	return false
}

// SetFeasible gets a reference to the given NullableBool and assigns it to the Feasible field.
func (o *JobAssignmentScore) SetFeasible(v bool) {
	o.Feasible.Set(&v)
}
// SetFeasibleNil sets the value for Feasible to be an explicit nil
func (o *JobAssignmentScore) SetFeasibleNil() {
	o.Feasible.Set(nil)
}

// UnsetFeasible ensures that no value is present for Feasible, not even an explicit nil
func (o *JobAssignmentScore) UnsetFeasible() {
	o.Feasible.Unset()
}

func (o JobAssignmentScore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobAssignmentScore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HardScore.IsSet() {
		toSerialize["hardScore"] = o.HardScore.Get()
	}
	if o.MediumScore.IsSet() {
		toSerialize["mediumScore"] = o.MediumScore.Get()
	}
	if o.SoftScore.IsSet() {
		toSerialize["softScore"] = o.SoftScore.Get()
	}
	if o.Feasible.IsSet() {
		toSerialize["feasible"] = o.Feasible.Get()
	}
	return toSerialize, nil
}

type NullableJobAssignmentScore struct {
	value *JobAssignmentScore
	isSet bool
}

func (v NullableJobAssignmentScore) Get() *JobAssignmentScore {
	return v.value
}

func (v *NullableJobAssignmentScore) Set(val *JobAssignmentScore) {
	v.value = val
	v.isSet = true
}

func (v NullableJobAssignmentScore) IsSet() bool {
	return v.isSet
}

func (v *NullableJobAssignmentScore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobAssignmentScore(val *JobAssignmentScore) *NullableJobAssignmentScore {
	return &NullableJobAssignmentScore{value: val, isSet: true}
}

func (v NullableJobAssignmentScore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobAssignmentScore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


