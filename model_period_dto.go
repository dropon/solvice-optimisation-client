/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PeriodDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeriodDto{}

// PeriodDto Subset of the planning period
type PeriodDto struct {
	// Start date-time 
	From time.Time `json:"from"`
	// End date-time 
	End interface{} `json:"end"`
	To time.Time `json:"to"`
}

type _PeriodDto PeriodDto

// NewPeriodDto instantiates a new PeriodDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeriodDto(from time.Time, end interface{}, to time.Time) *PeriodDto {
	this := PeriodDto{}
	this.From = from
	this.End = end
	this.To = to
	return &this
}

// NewPeriodDtoWithDefaults instantiates a new PeriodDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeriodDtoWithDefaults() *PeriodDto {
	this := PeriodDto{}
	return &this
}

// GetFrom returns the From field value
func (o *PeriodDto) GetFrom() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *PeriodDto) GetFromOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *PeriodDto) SetFrom(v time.Time) {
	o.From = v
}

// GetEnd returns the End field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *PeriodDto) GetEnd() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PeriodDto) GetEndOk() (*interface{}, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *PeriodDto) SetEnd(v interface{}) {
	o.End = v
}

// GetTo returns the To field value
func (o *PeriodDto) GetTo() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *PeriodDto) GetToOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *PeriodDto) SetTo(v time.Time) {
	o.To = v
}

func (o PeriodDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeriodDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	if o.End != nil {
		toSerialize["end"] = o.End
	}
	toSerialize["to"] = o.To
	return toSerialize, nil
}

func (o *PeriodDto) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"end",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPeriodDto := _PeriodDto{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPeriodDto)

	if err != nil {
		return err
	}

	*o = PeriodDto(varPeriodDto)

	return err
}

type NullablePeriodDto struct {
	value *PeriodDto
	isSet bool
}

func (v NullablePeriodDto) Get() *PeriodDto {
	return v.value
}

func (v *NullablePeriodDto) Set(val *PeriodDto) {
	v.value = val
	v.isSet = true
}

func (v NullablePeriodDto) IsSet() bool {
	return v.isSet
}

func (v *NullablePeriodDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeriodDto(val *PeriodDto) *NullablePeriodDto {
	return &NullablePeriodDto{value: val, isSet: true}
}

func (v NullablePeriodDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeriodDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


