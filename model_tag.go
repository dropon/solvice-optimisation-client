/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Tag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Tag{}

// Tag A tag is a match between a `Job` and a `Resource`.
type Tag struct {
	// Tag name that defines a skill, capability, or requirement. This creates a matching constraint between jobs and resources - only resources with this tag can be assigned to jobs that require it. Common examples include 'plumbing', 'electrical', 'certified-technician', or 'heavy-lifting'.
	Name string `json:"name"`
	// Constraint type for this tag requirement. When true (default), creates a hard constraint - jobs can only be assigned to resources with matching tags. When false, creates a soft constraint - jobs prefer resources with matching tags but can be assigned to others if needed, with a score penalty.
	Hard NullableBool `json:"hard,omitempty"`
	// Penalty weight applied when this tag constraint is violated (soft constraints only). The weight is measured in the same units as travel time - a weight of 3600 means violating this tag constraint is equivalent to 1 hour of additional travel time. Higher weights make the constraint more important.
	Weight NullableInt32 `json:"weight,omitempty"`
}

type _Tag Tag

// NewTag instantiates a new Tag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTag(name string) *Tag {
	this := Tag{}
	this.Name = name
	var hard bool = true
	this.Hard = *NewNullableBool(&hard)
	return &this
}

// NewTagWithDefaults instantiates a new Tag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagWithDefaults() *Tag {
	this := Tag{}
	var hard bool = true
	this.Hard = *NewNullableBool(&hard)
	return &this
}

// GetName returns the Name field value
func (o *Tag) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Tag) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Tag) SetName(v string) {
	o.Name = v
}

// GetHard returns the Hard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tag) GetHard() bool {
	if o == nil || IsNil(o.Hard.Get()) {
		var ret bool
		return ret
	}
	return *o.Hard.Get()
}

// GetHardOk returns a tuple with the Hard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tag) GetHardOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hard.Get(), o.Hard.IsSet()
}

// HasHard returns a boolean if a field has been set.
func (o *Tag) HasHard() bool {
	if o != nil && o.Hard.IsSet() {
		return true
	}

	return false
}

// SetHard gets a reference to the given NullableBool and assigns it to the Hard field.
func (o *Tag) SetHard(v bool) {
	o.Hard.Set(&v)
}
// SetHardNil sets the value for Hard to be an explicit nil
func (o *Tag) SetHardNil() {
	o.Hard.Set(nil)
}

// UnsetHard ensures that no value is present for Hard, not even an explicit nil
func (o *Tag) UnsetHard() {
	o.Hard.Unset()
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Tag) GetWeight() int32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret int32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Tag) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *Tag) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableInt32 and assigns it to the Weight field.
func (o *Tag) SetWeight(v int32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *Tag) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *Tag) UnsetWeight() {
	o.Weight.Unset()
}

func (o Tag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Tag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Hard.IsSet() {
		toSerialize["hard"] = o.Hard.Get()
	}
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	return toSerialize, nil
}

func (o *Tag) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTag := _Tag{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTag)

	if err != nil {
		return err
	}

	*o = Tag(varTag)

	return err
}

type NullableTag struct {
	value *Tag
	isSet bool
}

func (v NullableTag) Get() *Tag {
	return v.value
}

func (v *NullableTag) Set(val *Tag) {
	v.value = val
	v.isSet = true
}

func (v NullableTag) IsSet() bool {
	return v.isSet
}

func (v *NullableTag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTag(val *Tag) *NullableTag {
	return &NullableTag{value: val, isSet: true}
}

func (v NullableTag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


