/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resource{}

// Resource Resource (vehicle, employee)
type Resource struct {
	// Unique identifier for this resource. Used to reference the resource in job assignments, relations, and results. Must be unique within the request.
	Name string `json:"name"`
	// List of work shifts defining when this resource is available for job assignments. Each shift specifies working hours, start/end locations, breaks, and other constraints. Multiple shifts allow for multi-day planning or split-shift schedules. At least one shift is required.
	Shifts []Shift `json:"shifts"`
	// Default start location for all shifts of this resource. This field is deprecated in favor of specifying start locations individually for each shift in the shifts array, which provides more flexibility for multi-day planning.
	// Deprecated
	Start NullableLocation `json:"start,omitempty"`
	// Default end location for all shifts of this resource. This field is deprecated in favor of specifying end locations individually for each shift in the shifts array, which provides more flexibility for multi-day planning.
	// Deprecated
	End NullableLocation `json:"end,omitempty"`
	// Maximum total driving time allowed for this resource per shift or planning period. This constraint prevents excessive driving and ensures compliance with regulations or operational policies. Measured in seconds and includes all travel between jobs but excludes service time.
	MaxDriveTimeInSeconds interface{} `json:"maxDriveTimeInSeconds,omitempty"`
	// Preferred geographic region for this resource's job assignments. The solver will try to assign jobs that are geographically closer to this location, minimizing travel distance and time. This creates a soft constraint that influences job assignment without being mandatory.
	Region NullableLocation `json:"region,omitempty"`
	// List of capability tags that define what types of jobs this resource can perform. Tags create matching constraints between jobs and resources - only resources with matching tags can be assigned to jobs that require those capabilities. For example, 'plumbing' or 'electrical' tags.
	Tags []string `json:"tags,omitempty"`
	// Transportation mode used by this resource, affecting routing calculations and capabilities. CAR provides standard vehicle routing, BIKE uses bicycle-friendly routes and speeds, TRUCK uses heavy vehicle routing with appropriate restrictions. This is a beta feature.
	Category NullableCategory `json:"category,omitempty"`
	// List of periodic constraints that apply to this resource over specified time periods. Rules can enforce minimum/maximum work time, service time, drive time, or job complexity limits. These constraints ensure compliance with labor regulations, operational policies, or capacity limitations.
	Rules []Rule `json:"rules,omitempty"`
	// Multi-dimensional capacity limits for this resource, such as weight, volume, or item count. Each dimension corresponds to job load requirements. For example, [500, 200] might represent 500 kg weight capacity and 200 cubic meters volume capacity. Maximum 5 dimensions supported.
	Capacity []int32 `json:"capacity,omitempty"`
	// Hourly cost rate for this resource in your currency units. Used to calculate total labor costs for solutions. Only counts active time (driving, servicing, or waiting), not idle time. This enables cost-based optimization and financial analysis of routing solutions.
	HourlyCost NullableInt32 `json:"hourlyCost,omitempty"`
	// List of resource names that this resource is compatible to work with on linked jobs requiring cooperation
	CompatibleResources []string `json:"compatibleResources,omitempty"`
	MaxDriveTime NullableInt32 `json:"maxDriveTime,omitempty"`
	MaxDriveTimeJob NullableInt32 `json:"maxDriveTimeJob,omitempty"`
}

type _Resource Resource

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource(name string, shifts []Shift) *Resource {
	this := Resource{}
	this.Name = name
	this.Shifts = shifts
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	return &this
}

// GetName returns the Name field value
func (o *Resource) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Resource) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Resource) SetName(v string) {
	o.Name = v
}

// GetShifts returns the Shifts field value
// If the value is explicit nil, the zero value for []Shift will be returned
func (o *Resource) GetShifts() []Shift {
	if o == nil {
		var ret []Shift
		return ret
	}

	return o.Shifts
}

// GetShiftsOk returns a tuple with the Shifts field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetShiftsOk() ([]Shift, bool) {
	if o == nil || IsNil(o.Shifts) {
		return nil, false
	}
	return o.Shifts, true
}

// SetShifts sets field value
func (o *Resource) SetShifts(v []Shift) {
	o.Shifts = v
}

// GetStart returns the Start field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Resource) GetStart() Location {
	if o == nil || IsNil(o.Start.Get()) {
		var ret Location
		return ret
	}
	return *o.Start.Get()
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Resource) GetStartOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Start.Get(), o.Start.IsSet()
}

// HasStart returns a boolean if a field has been set.
func (o *Resource) HasStart() bool {
	if o != nil && o.Start.IsSet() {
		return true
	}

	return false
}

// SetStart gets a reference to the given NullableLocation and assigns it to the Start field.
// Deprecated
func (o *Resource) SetStart(v Location) {
	o.Start.Set(&v)
}
// SetStartNil sets the value for Start to be an explicit nil
func (o *Resource) SetStartNil() {
	o.Start.Set(nil)
}

// UnsetStart ensures that no value is present for Start, not even an explicit nil
func (o *Resource) UnsetStart() {
	o.Start.Unset()
}

// GetEnd returns the End field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Resource) GetEnd() Location {
	if o == nil || IsNil(o.End.Get()) {
		var ret Location
		return ret
	}
	return *o.End.Get()
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Resource) GetEndOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.End.Get(), o.End.IsSet()
}

// HasEnd returns a boolean if a field has been set.
func (o *Resource) HasEnd() bool {
	if o != nil && o.End.IsSet() {
		return true
	}

	return false
}

// SetEnd gets a reference to the given NullableLocation and assigns it to the End field.
// Deprecated
func (o *Resource) SetEnd(v Location) {
	o.End.Set(&v)
}
// SetEndNil sets the value for End to be an explicit nil
func (o *Resource) SetEndNil() {
	o.End.Set(nil)
}

// UnsetEnd ensures that no value is present for End, not even an explicit nil
func (o *Resource) UnsetEnd() {
	o.End.Unset()
}

// GetMaxDriveTimeInSeconds returns the MaxDriveTimeInSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetMaxDriveTimeInSeconds() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.MaxDriveTimeInSeconds
}

// GetMaxDriveTimeInSecondsOk returns a tuple with the MaxDriveTimeInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetMaxDriveTimeInSecondsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.MaxDriveTimeInSeconds) {
		return nil, false
	}
	return &o.MaxDriveTimeInSeconds, true
}

// HasMaxDriveTimeInSeconds returns a boolean if a field has been set.
func (o *Resource) HasMaxDriveTimeInSeconds() bool {
	if o != nil && !IsNil(o.MaxDriveTimeInSeconds) {
		return true
	}

	return false
}

// SetMaxDriveTimeInSeconds gets a reference to the given interface{} and assigns it to the MaxDriveTimeInSeconds field.
func (o *Resource) SetMaxDriveTimeInSeconds(v interface{}) {
	o.MaxDriveTimeInSeconds = v
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetRegion() Location {
	if o == nil || IsNil(o.Region.Get()) {
		var ret Location
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetRegionOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *Resource) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableLocation and assigns it to the Region field.
func (o *Resource) SetRegion(v Location) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *Resource) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *Resource) UnsetRegion() {
	o.Region.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Resource) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Resource) SetTags(v []string) {
	o.Tags = v
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetCategory() Category {
	if o == nil || IsNil(o.Category.Get()) {
		var ret Category
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetCategoryOk() (*Category, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *Resource) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableCategory and assigns it to the Category field.
func (o *Resource) SetCategory(v Category) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *Resource) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *Resource) UnsetCategory() {
	o.Category.Unset()
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetRules() []Rule {
	if o == nil {
		var ret []Rule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetRulesOk() ([]Rule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *Resource) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []Rule and assigns it to the Rules field.
func (o *Resource) SetRules(v []Rule) {
	o.Rules = v
}

// GetCapacity returns the Capacity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetCapacity() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetCapacityOk() ([]int32, bool) {
	if o == nil || IsNil(o.Capacity) {
		return nil, false
	}
	return o.Capacity, true
}

// HasCapacity returns a boolean if a field has been set.
func (o *Resource) HasCapacity() bool {
	if o != nil && !IsNil(o.Capacity) {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given []int32 and assigns it to the Capacity field.
func (o *Resource) SetCapacity(v []int32) {
	o.Capacity = v
}

// GetHourlyCost returns the HourlyCost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetHourlyCost() int32 {
	if o == nil || IsNil(o.HourlyCost.Get()) {
		var ret int32
		return ret
	}
	return *o.HourlyCost.Get()
}

// GetHourlyCostOk returns a tuple with the HourlyCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetHourlyCostOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HourlyCost.Get(), o.HourlyCost.IsSet()
}

// HasHourlyCost returns a boolean if a field has been set.
func (o *Resource) HasHourlyCost() bool {
	if o != nil && o.HourlyCost.IsSet() {
		return true
	}

	return false
}

// SetHourlyCost gets a reference to the given NullableInt32 and assigns it to the HourlyCost field.
func (o *Resource) SetHourlyCost(v int32) {
	o.HourlyCost.Set(&v)
}
// SetHourlyCostNil sets the value for HourlyCost to be an explicit nil
func (o *Resource) SetHourlyCostNil() {
	o.HourlyCost.Set(nil)
}

// UnsetHourlyCost ensures that no value is present for HourlyCost, not even an explicit nil
func (o *Resource) UnsetHourlyCost() {
	o.HourlyCost.Unset()
}

// GetCompatibleResources returns the CompatibleResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetCompatibleResources() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.CompatibleResources
}

// GetCompatibleResourcesOk returns a tuple with the CompatibleResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetCompatibleResourcesOk() ([]string, bool) {
	if o == nil || IsNil(o.CompatibleResources) {
		return nil, false
	}
	return o.CompatibleResources, true
}

// HasCompatibleResources returns a boolean if a field has been set.
func (o *Resource) HasCompatibleResources() bool {
	if o != nil && !IsNil(o.CompatibleResources) {
		return true
	}

	return false
}

// SetCompatibleResources gets a reference to the given []string and assigns it to the CompatibleResources field.
func (o *Resource) SetCompatibleResources(v []string) {
	o.CompatibleResources = v
}

// GetMaxDriveTime returns the MaxDriveTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetMaxDriveTime() int32 {
	if o == nil || IsNil(o.MaxDriveTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxDriveTime.Get()
}

// GetMaxDriveTimeOk returns a tuple with the MaxDriveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetMaxDriveTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDriveTime.Get(), o.MaxDriveTime.IsSet()
}

// HasMaxDriveTime returns a boolean if a field has been set.
func (o *Resource) HasMaxDriveTime() bool {
	if o != nil && o.MaxDriveTime.IsSet() {
		return true
	}

	return false
}

// SetMaxDriveTime gets a reference to the given NullableInt32 and assigns it to the MaxDriveTime field.
func (o *Resource) SetMaxDriveTime(v int32) {
	o.MaxDriveTime.Set(&v)
}
// SetMaxDriveTimeNil sets the value for MaxDriveTime to be an explicit nil
func (o *Resource) SetMaxDriveTimeNil() {
	o.MaxDriveTime.Set(nil)
}

// UnsetMaxDriveTime ensures that no value is present for MaxDriveTime, not even an explicit nil
func (o *Resource) UnsetMaxDriveTime() {
	o.MaxDriveTime.Unset()
}

// GetMaxDriveTimeJob returns the MaxDriveTimeJob field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Resource) GetMaxDriveTimeJob() int32 {
	if o == nil || IsNil(o.MaxDriveTimeJob.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxDriveTimeJob.Get()
}

// GetMaxDriveTimeJobOk returns a tuple with the MaxDriveTimeJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Resource) GetMaxDriveTimeJobOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDriveTimeJob.Get(), o.MaxDriveTimeJob.IsSet()
}

// HasMaxDriveTimeJob returns a boolean if a field has been set.
func (o *Resource) HasMaxDriveTimeJob() bool {
	if o != nil && o.MaxDriveTimeJob.IsSet() {
		return true
	}

	return false
}

// SetMaxDriveTimeJob gets a reference to the given NullableInt32 and assigns it to the MaxDriveTimeJob field.
func (o *Resource) SetMaxDriveTimeJob(v int32) {
	o.MaxDriveTimeJob.Set(&v)
}
// SetMaxDriveTimeJobNil sets the value for MaxDriveTimeJob to be an explicit nil
func (o *Resource) SetMaxDriveTimeJobNil() {
	o.MaxDriveTimeJob.Set(nil)
}

// UnsetMaxDriveTimeJob ensures that no value is present for MaxDriveTimeJob, not even an explicit nil
func (o *Resource) UnsetMaxDriveTimeJob() {
	o.MaxDriveTimeJob.Unset()
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Shifts != nil {
		toSerialize["shifts"] = o.Shifts
	}
	if o.Start.IsSet() {
		toSerialize["start"] = o.Start.Get()
	}
	if o.End.IsSet() {
		toSerialize["end"] = o.End.Get()
	}
	if o.MaxDriveTimeInSeconds != nil {
		toSerialize["maxDriveTimeInSeconds"] = o.MaxDriveTimeInSeconds
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.Capacity != nil {
		toSerialize["capacity"] = o.Capacity
	}
	if o.HourlyCost.IsSet() {
		toSerialize["hourlyCost"] = o.HourlyCost.Get()
	}
	if o.CompatibleResources != nil {
		toSerialize["compatibleResources"] = o.CompatibleResources
	}
	if o.MaxDriveTime.IsSet() {
		toSerialize["maxDriveTime"] = o.MaxDriveTime.Get()
	}
	if o.MaxDriveTimeJob.IsSet() {
		toSerialize["maxDriveTimeJob"] = o.MaxDriveTimeJob.Get()
	}
	return toSerialize, nil
}

func (o *Resource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"shifts",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResource := _Resource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResource)

	if err != nil {
		return err
	}

	*o = Resource(varResource)

	return err
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


