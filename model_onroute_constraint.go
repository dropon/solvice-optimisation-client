/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OnrouteConstraint Types of constraints that can be violated in a routing solution
type OnrouteConstraint string

// List of OnrouteConstraint
const (
	TRIP_CAPACITY OnrouteConstraint = "TRIP_CAPACITY"
	RESOURCE_CAPACITY OnrouteConstraint = "RESOURCE_CAPACITY"
	RESOURCE_CAPACITY2 OnrouteConstraint = "RESOURCE_CAPACITY2"
	TRAVEL_TIME OnrouteConstraint = "TRAVEL_TIME"
	TYPE_REQUIREMENT OnrouteConstraint = "TYPE_REQUIREMENT"
	TAG_SOFT OnrouteConstraint = "TAG_SOFT"
	TAG_HARD OnrouteConstraint = "TAG_HARD"
	TYPE_REQUIREMENT_SOFT OnrouteConstraint = "TYPE_REQUIREMENT_SOFT"
	END_LOCATION_TRAVEL_TIME OnrouteConstraint = "END_LOCATION_TRAVEL_TIME"
	TIME_WINDOW_CONFLICT OnrouteConstraint = "TIME_WINDOW_CONFLICT"
	SHIFT_END_CONFLICT OnrouteConstraint = "SHIFT_END_CONFLICT"
	OVERTIME_END_CONFLICT OnrouteConstraint = "OVERTIME_END_CONFLICT"
	RESOURCE_USAGE OnrouteConstraint = "RESOURCE_USAGE"
	URGENCY OnrouteConstraint = "URGENCY"
	PREFERRED_RESOURCE_CONFLICT OnrouteConstraint = "PREFERRED_RESOURCE_CONFLICT"
	ALLOWED_RESOURCES OnrouteConstraint = "ALLOWED_RESOURCES"
	DISALLOWED_RESOURCES OnrouteConstraint = "DISALLOWED_RESOURCES"
	REGION_TIME OnrouteConstraint = "REGION_TIME"
	FAIR_WORK OnrouteConstraint = "FAIR_WORK"
	UNSERVED_JOBS OnrouteConstraint = "UNSERVED_JOBS"
	RESOURCE_ACTIVATION OnrouteConstraint = "RESOURCE_ACTIVATION"
	OPEN_DAYS OnrouteConstraint = "OPEN_DAYS"
	JOB_PRECEDENCE OnrouteConstraint = "JOB_PRECEDENCE"
	JOB_DAY_INDEX OnrouteConstraint = "JOB_DAY_INDEX"
	DATE_TIME_WINDOW_CONFLICT OnrouteConstraint = "DATE_TIME_WINDOW_CONFLICT"
	DATE_TIME_WINDOW_CONFLICT_SOFT OnrouteConstraint = "DATE_TIME_WINDOW_CONFLICT_SOFT"
	LINKED_JOB_CONFLICT OnrouteConstraint = "LINKED_JOB_CONFLICT"
	PLANNED_RESOURCE OnrouteConstraint = "PLANNED_RESOURCE"
	PLANNED_ARRIVAL OnrouteConstraint = "PLANNED_ARRIVAL"
	PLANNED_DATE OnrouteConstraint = "PLANNED_DATE"
	WORKING_TIME OnrouteConstraint = "WORKING_TIME"
	HARD_JOBS OnrouteConstraint = "HARD_JOBS"
	MAX_DRIVE_TIME OnrouteConstraint = "MAX_DRIVE_TIME"
	MAX_DRIVE_TIME_JOB OnrouteConstraint = "MAX_DRIVE_TIME_JOB"
	FAIR_TOTAL_WORK OnrouteConstraint = "FAIR_TOTAL_WORK"
	RESOURCE_PERIOD_MAX_SERVICE_TIME OnrouteConstraint = "RESOURCE_PERIOD_MAX_SERVICE_TIME"
	RESOURCE_PERIOD_MAX_DRIVE_TIME OnrouteConstraint = "RESOURCE_PERIOD_MAX_DRIVE_TIME"
	RESOURCE_PERIOD_MAX_WORK_TIME OnrouteConstraint = "RESOURCE_PERIOD_MAX_WORK_TIME"
	RESOURCE_PERIOD_MIN_SERVICE_TIME OnrouteConstraint = "RESOURCE_PERIOD_MIN_SERVICE_TIME"
	RESOURCE_PERIOD_MIN_DRIVE_TIME OnrouteConstraint = "RESOURCE_PERIOD_MIN_DRIVE_TIME"
	RESOURCE_PERIOD_MIN_WORK_TIME OnrouteConstraint = "RESOURCE_PERIOD_MIN_WORK_TIME"
	MINIMISE_TRIP_USAGE OnrouteConstraint = "MINIMISE_TRIP_USAGE"
	DELIVERY_NOT_ON_SAME_VEHICLE OnrouteConstraint = "DELIVERY_NOT_ON_SAME_VEHICLE"
	DELIVERY_BEFORE_PICKUP OnrouteConstraint = "DELIVERY_BEFORE_PICKUP"
	SAME_TRIP OnrouteConstraint = "SAME_TRIP"
	SEQUENCE OnrouteConstraint = "SEQUENCE"
	SAME_TIME OnrouteConstraint = "SAME_TIME"
	NEIGHBOR OnrouteConstraint = "NEIGHBOR"
	DIRECT_SEQUENCE OnrouteConstraint = "DIRECT_SEQUENCE"
	SAME_RESOURCE OnrouteConstraint = "SAME_RESOURCE"
	WAIT_TIME OnrouteConstraint = "WAIT_TIME"
	DRIVE_TIME OnrouteConstraint = "DRIVE_TIME"
	HOURLY_COST OnrouteConstraint = "HOURLY_COST"
	RANKING_SOFT OnrouteConstraint = "RANKING_SOFT"
	FAIR_COMPLEXITY_PER_TRIP OnrouteConstraint = "FAIR_COMPLEXITY_PER_TRIP"
	FAIR_COMPLEXITY_PER_RESOURCE OnrouteConstraint = "FAIR_COMPLEXITY_PER_RESOURCE"
	RESOURCE_PERIOD_MIN_COMPLEXITY OnrouteConstraint = "RESOURCE_PERIOD_MIN_COMPLEXITY"
	RESOURCE_PERIOD_MAX_COMPLEXITY OnrouteConstraint = "RESOURCE_PERIOD_MAX_COMPLEXITY"
	RESOURCE_COMPATIBILITY OnrouteConstraint = "RESOURCE_COMPATIBILITY"
	JOBTYPE_VIOLATION OnrouteConstraint = "JOBTYPE_VIOLATION"
)

// All allowed values of OnrouteConstraint enum
var AllowedOnrouteConstraintEnumValues = []OnrouteConstraint{
	"TRIP_CAPACITY",
	"RESOURCE_CAPACITY",
	"RESOURCE_CAPACITY2",
	"TRAVEL_TIME",
	"TYPE_REQUIREMENT",
	"TAG_SOFT",
	"TAG_HARD",
	"TYPE_REQUIREMENT_SOFT",
	"END_LOCATION_TRAVEL_TIME",
	"TIME_WINDOW_CONFLICT",
	"SHIFT_END_CONFLICT",
	"OVERTIME_END_CONFLICT",
	"RESOURCE_USAGE",
	"URGENCY",
	"PREFERRED_RESOURCE_CONFLICT",
	"ALLOWED_RESOURCES",
	"DISALLOWED_RESOURCES",
	"REGION_TIME",
	"FAIR_WORK",
	"UNSERVED_JOBS",
	"RESOURCE_ACTIVATION",
	"OPEN_DAYS",
	"JOB_PRECEDENCE",
	"JOB_DAY_INDEX",
	"DATE_TIME_WINDOW_CONFLICT",
	"DATE_TIME_WINDOW_CONFLICT_SOFT",
	"LINKED_JOB_CONFLICT",
	"PLANNED_RESOURCE",
	"PLANNED_ARRIVAL",
	"PLANNED_DATE",
	"WORKING_TIME",
	"HARD_JOBS",
	"MAX_DRIVE_TIME",
	"MAX_DRIVE_TIME_JOB",
	"FAIR_TOTAL_WORK",
	"RESOURCE_PERIOD_MAX_SERVICE_TIME",
	"RESOURCE_PERIOD_MAX_DRIVE_TIME",
	"RESOURCE_PERIOD_MAX_WORK_TIME",
	"RESOURCE_PERIOD_MIN_SERVICE_TIME",
	"RESOURCE_PERIOD_MIN_DRIVE_TIME",
	"RESOURCE_PERIOD_MIN_WORK_TIME",
	"MINIMISE_TRIP_USAGE",
	"DELIVERY_NOT_ON_SAME_VEHICLE",
	"DELIVERY_BEFORE_PICKUP",
	"SAME_TRIP",
	"SEQUENCE",
	"SAME_TIME",
	"NEIGHBOR",
	"DIRECT_SEQUENCE",
	"SAME_RESOURCE",
	"WAIT_TIME",
	"DRIVE_TIME",
	"HOURLY_COST",
	"RANKING_SOFT",
	"FAIR_COMPLEXITY_PER_TRIP",
	"FAIR_COMPLEXITY_PER_RESOURCE",
	"RESOURCE_PERIOD_MIN_COMPLEXITY",
	"RESOURCE_PERIOD_MAX_COMPLEXITY",
	"RESOURCE_COMPATIBILITY",
	"JOBTYPE_VIOLATION",
}

func (v *OnrouteConstraint) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OnrouteConstraint(value)
	for _, existing := range AllowedOnrouteConstraintEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OnrouteConstraint", value)
}

// NewOnrouteConstraintFromValue returns a pointer to a valid OnrouteConstraint
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOnrouteConstraintFromValue(v string) (*OnrouteConstraint, error) {
	ev := OnrouteConstraint(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OnrouteConstraint: valid values are %v", v, AllowedOnrouteConstraintEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OnrouteConstraint) IsValid() bool {
	for _, existing := range AllowedOnrouteConstraintEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OnrouteConstraint value
func (v OnrouteConstraint) Ptr() *OnrouteConstraint {
	return &v
}

type NullableOnrouteConstraint struct {
	value *OnrouteConstraint
	isSet bool
}

func (v NullableOnrouteConstraint) Get() *OnrouteConstraint {
	return v.value
}

func (v *NullableOnrouteConstraint) Set(val *OnrouteConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableOnrouteConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableOnrouteConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnrouteConstraint(val *OnrouteConstraint) *NullableOnrouteConstraint {
	return &NullableOnrouteConstraint{value: val, isSet: true}
}

func (v NullableOnrouteConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnrouteConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

