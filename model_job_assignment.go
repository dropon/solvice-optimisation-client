/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the JobAssignment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JobAssignment{}

// JobAssignment Assignment for a job to a resource. Holds information of the actual arrival time, the job, the resource and the suggested arrival time.
type JobAssignment struct {
	// Job
	Job string `json:"job"`
	// Resource
	Resource string `json:"resource"`
	// Suggested arrival date-time
	SuggestedArrival NullableString `json:"suggestedArrival,omitempty"`
	// Latest arrival date-time
	LatestArrival NullableString `json:"latestArrival,omitempty"`
	// Executed after date-time
	ExecutedAfter string `json:"executedAfter"`
	Score NullableJobAssignmentScore `json:"score,omitempty"`
	ScoreExplanation NullableJobAssignmentScoreExplanation `json:"scoreExplanation,omitempty"`
	SuggestedInitialArrival NullableTime `json:"suggestedInitialArrival,omitempty"`
	Violations []Unresolved `json:"violations,omitempty"`
}

type _JobAssignment JobAssignment

// NewJobAssignment instantiates a new JobAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobAssignment(job string, resource string, executedAfter string) *JobAssignment {
	this := JobAssignment{}
	this.Job = job
	this.Resource = resource
	this.ExecutedAfter = executedAfter
	return &this
}

// NewJobAssignmentWithDefaults instantiates a new JobAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobAssignmentWithDefaults() *JobAssignment {
	this := JobAssignment{}
	return &this
}

// GetJob returns the Job field value
func (o *JobAssignment) GetJob() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Job
}

// GetJobOk returns a tuple with the Job field value
// and a boolean to check if the value has been set.
func (o *JobAssignment) GetJobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Job, true
}

// SetJob sets field value
func (o *JobAssignment) SetJob(v string) {
	o.Job = v
}

// GetResource returns the Resource field value
func (o *JobAssignment) GetResource() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *JobAssignment) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Resource, true
}

// SetResource sets field value
func (o *JobAssignment) SetResource(v string) {
	o.Resource = v
}

// GetSuggestedArrival returns the SuggestedArrival field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignment) GetSuggestedArrival() string {
	if o == nil || IsNil(o.SuggestedArrival.Get()) {
		var ret string
		return ret
	}
	return *o.SuggestedArrival.Get()
}

// GetSuggestedArrivalOk returns a tuple with the SuggestedArrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignment) GetSuggestedArrivalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuggestedArrival.Get(), o.SuggestedArrival.IsSet()
}

// HasSuggestedArrival returns a boolean if a field has been set.
func (o *JobAssignment) HasSuggestedArrival() bool {
	if o != nil && o.SuggestedArrival.IsSet() {
		return true
	}

	return false
}

// SetSuggestedArrival gets a reference to the given NullableString and assigns it to the SuggestedArrival field.
func (o *JobAssignment) SetSuggestedArrival(v string) {
	o.SuggestedArrival.Set(&v)
}
// SetSuggestedArrivalNil sets the value for SuggestedArrival to be an explicit nil
func (o *JobAssignment) SetSuggestedArrivalNil() {
	o.SuggestedArrival.Set(nil)
}

// UnsetSuggestedArrival ensures that no value is present for SuggestedArrival, not even an explicit nil
func (o *JobAssignment) UnsetSuggestedArrival() {
	o.SuggestedArrival.Unset()
}

// GetLatestArrival returns the LatestArrival field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignment) GetLatestArrival() string {
	if o == nil || IsNil(o.LatestArrival.Get()) {
		var ret string
		return ret
	}
	return *o.LatestArrival.Get()
}

// GetLatestArrivalOk returns a tuple with the LatestArrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignment) GetLatestArrivalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestArrival.Get(), o.LatestArrival.IsSet()
}

// HasLatestArrival returns a boolean if a field has been set.
func (o *JobAssignment) HasLatestArrival() bool {
	if o != nil && o.LatestArrival.IsSet() {
		return true
	}

	return false
}

// SetLatestArrival gets a reference to the given NullableString and assigns it to the LatestArrival field.
func (o *JobAssignment) SetLatestArrival(v string) {
	o.LatestArrival.Set(&v)
}
// SetLatestArrivalNil sets the value for LatestArrival to be an explicit nil
func (o *JobAssignment) SetLatestArrivalNil() {
	o.LatestArrival.Set(nil)
}

// UnsetLatestArrival ensures that no value is present for LatestArrival, not even an explicit nil
func (o *JobAssignment) UnsetLatestArrival() {
	o.LatestArrival.Unset()
}

// GetExecutedAfter returns the ExecutedAfter field value
func (o *JobAssignment) GetExecutedAfter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExecutedAfter
}

// GetExecutedAfterOk returns a tuple with the ExecutedAfter field value
// and a boolean to check if the value has been set.
func (o *JobAssignment) GetExecutedAfterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExecutedAfter, true
}

// SetExecutedAfter sets field value
func (o *JobAssignment) SetExecutedAfter(v string) {
	o.ExecutedAfter = v
}

// GetScore returns the Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignment) GetScore() JobAssignmentScore {
	if o == nil || IsNil(o.Score.Get()) {
		var ret JobAssignmentScore
		return ret
	}
	return *o.Score.Get()
}

// GetScoreOk returns a tuple with the Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignment) GetScoreOk() (*JobAssignmentScore, bool) {
	if o == nil {
		return nil, false
	}
	return o.Score.Get(), o.Score.IsSet()
}

// HasScore returns a boolean if a field has been set.
func (o *JobAssignment) HasScore() bool {
	if o != nil && o.Score.IsSet() {
		return true
	}

	return false
}

// SetScore gets a reference to the given NullableJobAssignmentScore and assigns it to the Score field.
func (o *JobAssignment) SetScore(v JobAssignmentScore) {
	o.Score.Set(&v)
}
// SetScoreNil sets the value for Score to be an explicit nil
func (o *JobAssignment) SetScoreNil() {
	o.Score.Set(nil)
}

// UnsetScore ensures that no value is present for Score, not even an explicit nil
func (o *JobAssignment) UnsetScore() {
	o.Score.Unset()
}

// GetScoreExplanation returns the ScoreExplanation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignment) GetScoreExplanation() JobAssignmentScoreExplanation {
	if o == nil || IsNil(o.ScoreExplanation.Get()) {
		var ret JobAssignmentScoreExplanation
		return ret
	}
	return *o.ScoreExplanation.Get()
}

// GetScoreExplanationOk returns a tuple with the ScoreExplanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignment) GetScoreExplanationOk() (*JobAssignmentScoreExplanation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScoreExplanation.Get(), o.ScoreExplanation.IsSet()
}

// HasScoreExplanation returns a boolean if a field has been set.
func (o *JobAssignment) HasScoreExplanation() bool {
	if o != nil && o.ScoreExplanation.IsSet() {
		return true
	}

	return false
}

// SetScoreExplanation gets a reference to the given NullableJobAssignmentScoreExplanation and assigns it to the ScoreExplanation field.
func (o *JobAssignment) SetScoreExplanation(v JobAssignmentScoreExplanation) {
	o.ScoreExplanation.Set(&v)
}
// SetScoreExplanationNil sets the value for ScoreExplanation to be an explicit nil
func (o *JobAssignment) SetScoreExplanationNil() {
	o.ScoreExplanation.Set(nil)
}

// UnsetScoreExplanation ensures that no value is present for ScoreExplanation, not even an explicit nil
func (o *JobAssignment) UnsetScoreExplanation() {
	o.ScoreExplanation.Unset()
}

// GetSuggestedInitialArrival returns the SuggestedInitialArrival field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignment) GetSuggestedInitialArrival() time.Time {
	if o == nil || IsNil(o.SuggestedInitialArrival.Get()) {
		var ret time.Time
		return ret
	}
	return *o.SuggestedInitialArrival.Get()
}

// GetSuggestedInitialArrivalOk returns a tuple with the SuggestedInitialArrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignment) GetSuggestedInitialArrivalOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuggestedInitialArrival.Get(), o.SuggestedInitialArrival.IsSet()
}

// HasSuggestedInitialArrival returns a boolean if a field has been set.
func (o *JobAssignment) HasSuggestedInitialArrival() bool {
	if o != nil && o.SuggestedInitialArrival.IsSet() {
		return true
	}

	return false
}

// SetSuggestedInitialArrival gets a reference to the given NullableTime and assigns it to the SuggestedInitialArrival field.
func (o *JobAssignment) SetSuggestedInitialArrival(v time.Time) {
	o.SuggestedInitialArrival.Set(&v)
}
// SetSuggestedInitialArrivalNil sets the value for SuggestedInitialArrival to be an explicit nil
func (o *JobAssignment) SetSuggestedInitialArrivalNil() {
	o.SuggestedInitialArrival.Set(nil)
}

// UnsetSuggestedInitialArrival ensures that no value is present for SuggestedInitialArrival, not even an explicit nil
func (o *JobAssignment) UnsetSuggestedInitialArrival() {
	o.SuggestedInitialArrival.Unset()
}

// GetViolations returns the Violations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobAssignment) GetViolations() []Unresolved {
	if o == nil {
		var ret []Unresolved
		return ret
	}
	return o.Violations
}

// GetViolationsOk returns a tuple with the Violations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobAssignment) GetViolationsOk() ([]Unresolved, bool) {
	if o == nil || IsNil(o.Violations) {
		return nil, false
	}
	return o.Violations, true
}

// HasViolations returns a boolean if a field has been set.
func (o *JobAssignment) HasViolations() bool {
	if o != nil && !IsNil(o.Violations) {
		return true
	}

	return false
}

// SetViolations gets a reference to the given []Unresolved and assigns it to the Violations field.
func (o *JobAssignment) SetViolations(v []Unresolved) {
	o.Violations = v
}

func (o JobAssignment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JobAssignment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["job"] = o.Job
	toSerialize["resource"] = o.Resource
	if o.SuggestedArrival.IsSet() {
		toSerialize["suggestedArrival"] = o.SuggestedArrival.Get()
	}
	if o.LatestArrival.IsSet() {
		toSerialize["latestArrival"] = o.LatestArrival.Get()
	}
	toSerialize["executedAfter"] = o.ExecutedAfter
	if o.Score.IsSet() {
		toSerialize["score"] = o.Score.Get()
	}
	if o.ScoreExplanation.IsSet() {
		toSerialize["scoreExplanation"] = o.ScoreExplanation.Get()
	}
	if o.SuggestedInitialArrival.IsSet() {
		toSerialize["suggestedInitialArrival"] = o.SuggestedInitialArrival.Get()
	}
	if o.Violations != nil {
		toSerialize["violations"] = o.Violations
	}
	return toSerialize, nil
}

func (o *JobAssignment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"job",
		"resource",
		"executedAfter",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJobAssignment := _JobAssignment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJobAssignment)

	if err != nil {
		return err
	}

	*o = JobAssignment(varJobAssignment)

	return err
}

type NullableJobAssignment struct {
	value *JobAssignment
	isSet bool
}

func (v NullableJobAssignment) Get() *JobAssignment {
	return v.value
}

func (v *NullableJobAssignment) Set(val *JobAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableJobAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableJobAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobAssignment(val *JobAssignment) *NullableJobAssignment {
	return &NullableJobAssignment{value: val, isSet: true}
}

func (v NullableJobAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


