/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Options type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Options{}

// Options Options to tweak the routing engine
type Options struct {
	// Use euclidean distance calculations for travel time and distance instead of real road networks. When true, straight-line distances are used which is faster but less accurate. When false (default), routing engines like OSM, TomTom, or Google provide real road distances and travel times.
	Euclidian NullableBool `json:"euclidian,omitempty"`
	// The routing engine used for calculating real-world distances and travel times. OSM (OpenStreetMaps) is free but basic, TomTom and Google provide more accurate traffic data and routing but require API keys. Only effective when euclidean is false.
	RoutingEngine NullableRoutingEngine `json:"routingEngine,omitempty"`
	// Allow the solver to create solutions where not all jobs are assigned to resources. When true (default), the solver will assign as many jobs as possible while respecting constraints. When false, the solver will only accept solutions where all jobs are assigned, which may result in infeasible solutions.
	PartialPlanning NullableBool `json:"partialPlanning,omitempty"`
	// Primary optimization objective. When true, the solver prioritizes using fewer resources (vehicles/drivers) even if it increases total travel time. When false, the solver prioritizes minimizing total travel time even if it requires more resources. This fundamentally changes the optimization strategy.
	MinimizeResources NullableBool `json:"minimizeResources,omitempty"`
	// Global traffic multiplier applied to all travel times. A value of 1.1 increases travel times by 10% to account for traffic congestion. For real-time traffic data, use TomTom or Google routing engines. This is a simple approximation for scenarios where precise traffic data is unavailable.
	Traffic NullableFloat64 `json:"traffic,omitempty"`
	// Generate detailed route polylines (encoded route geometries) for each trip segment. When true, the response includes polyline data that can be used to draw routes on maps. This increases processing time and response size but provides visual route information for mapping applications.
	Polylines NullableBool `json:"polylines,omitempty"`
	// Enable workload balancing across all resources and all days/trips. When true, the solver attempts to distribute service time evenly across all resources and time periods, preventing overloading of specific resources or days. The effectiveness is controlled by `Weights.workloadSpreadWeight` and `options.workloadSensitivity`.
	FairWorkloadPerTrip NullableBool `json:"fairWorkloadPerTrip,omitempty"`
	// Enable workload balancing across different days for each individual resource. When true, the solver ensures that each resource's workload is distributed evenly across their available days, preventing some days from being overloaded while others are underutilized. Works in conjunction with `Weights.workloadSpreadWeight` and `options.workloadSensitivity`.
	FairWorkloadPerResource NullableBool `json:"fairWorkloadPerResource,omitempty"`
	// Time granularity in seconds for arrival time snapping. All calculated arrival times are rounded up to the nearest multiple of this value. For example, with snapUnit=300 (5 minutes), an arrival time of 08:32 becomes 08:35. This helps create more practical schedules by avoiding precise timings that are difficult to follow in real operations. The snapping affects score calculation during optimization.
	SnapUnit NullableInt32 `json:"snapUnit,omitempty"`
	// Maximum number of alternative assignment suggestions to return when using the suggestion endpoint. The solver generates multiple assignment options for unassigned jobs, ranked by quality. A value of 0 (default) returns all possible suggestions, while values 1-5 limit the results to the best alternatives. Higher values increase response time but provide more options.
	MaxSuggestions NullableInt32 `json:"maxSuggestions,omitempty"`
	// Filter suggestions based on feasibility. When true (default), only suggestions that don't violate hard constraints are returned if the initial plan is feasible. If the initial plan is infeasible, only suggestions that don't worsen the infeasibility are returned. When false, all suggestions are returned regardless of feasibility, which may include constraint violations.
	OnlyFeasibleSuggestions NullableBool `json:"onlyFeasibleSuggestions,omitempty"`
	WorkloadSensitivity NullableFloat64 `json:"workloadSensitivity,omitempty"`
	Explanation NullableExplanationOptions `json:"explanation,omitempty"`
	FairComplexityPerTrip NullableBool `json:"fairComplexityPerTrip,omitempty"`
	FairComplexityPerResource NullableBool `json:"fairComplexityPerResource,omitempty"`
}

// NewOptions instantiates a new Options object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptions() *Options {
	this := Options{}
	return &this
}

// NewOptionsWithDefaults instantiates a new Options object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsWithDefaults() *Options {
	this := Options{}
	return &this
}

// GetEuclidian returns the Euclidian field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetEuclidian() bool {
	if o == nil || IsNil(o.Euclidian.Get()) {
		var ret bool
		return ret
	}
	return *o.Euclidian.Get()
}

// GetEuclidianOk returns a tuple with the Euclidian field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetEuclidianOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Euclidian.Get(), o.Euclidian.IsSet()
}

// HasEuclidian returns a boolean if a field has been set.
func (o *Options) HasEuclidian() bool {
	if o != nil && o.Euclidian.IsSet() {
		return true
	}

	return false
}

// SetEuclidian gets a reference to the given NullableBool and assigns it to the Euclidian field.
func (o *Options) SetEuclidian(v bool) {
	o.Euclidian.Set(&v)
}
// SetEuclidianNil sets the value for Euclidian to be an explicit nil
func (o *Options) SetEuclidianNil() {
	o.Euclidian.Set(nil)
}

// UnsetEuclidian ensures that no value is present for Euclidian, not even an explicit nil
func (o *Options) UnsetEuclidian() {
	o.Euclidian.Unset()
}

// GetRoutingEngine returns the RoutingEngine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetRoutingEngine() RoutingEngine {
	if o == nil || IsNil(o.RoutingEngine.Get()) {
		var ret RoutingEngine
		return ret
	}
	return *o.RoutingEngine.Get()
}

// GetRoutingEngineOk returns a tuple with the RoutingEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetRoutingEngineOk() (*RoutingEngine, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoutingEngine.Get(), o.RoutingEngine.IsSet()
}

// HasRoutingEngine returns a boolean if a field has been set.
func (o *Options) HasRoutingEngine() bool {
	if o != nil && o.RoutingEngine.IsSet() {
		return true
	}

	return false
}

// SetRoutingEngine gets a reference to the given NullableRoutingEngine and assigns it to the RoutingEngine field.
func (o *Options) SetRoutingEngine(v RoutingEngine) {
	o.RoutingEngine.Set(&v)
}
// SetRoutingEngineNil sets the value for RoutingEngine to be an explicit nil
func (o *Options) SetRoutingEngineNil() {
	o.RoutingEngine.Set(nil)
}

// UnsetRoutingEngine ensures that no value is present for RoutingEngine, not even an explicit nil
func (o *Options) UnsetRoutingEngine() {
	o.RoutingEngine.Unset()
}

// GetPartialPlanning returns the PartialPlanning field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetPartialPlanning() bool {
	if o == nil || IsNil(o.PartialPlanning.Get()) {
		var ret bool
		return ret
	}
	return *o.PartialPlanning.Get()
}

// GetPartialPlanningOk returns a tuple with the PartialPlanning field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetPartialPlanningOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartialPlanning.Get(), o.PartialPlanning.IsSet()
}

// HasPartialPlanning returns a boolean if a field has been set.
func (o *Options) HasPartialPlanning() bool {
	if o != nil && o.PartialPlanning.IsSet() {
		return true
	}

	return false
}

// SetPartialPlanning gets a reference to the given NullableBool and assigns it to the PartialPlanning field.
func (o *Options) SetPartialPlanning(v bool) {
	o.PartialPlanning.Set(&v)
}
// SetPartialPlanningNil sets the value for PartialPlanning to be an explicit nil
func (o *Options) SetPartialPlanningNil() {
	o.PartialPlanning.Set(nil)
}

// UnsetPartialPlanning ensures that no value is present for PartialPlanning, not even an explicit nil
func (o *Options) UnsetPartialPlanning() {
	o.PartialPlanning.Unset()
}

// GetMinimizeResources returns the MinimizeResources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetMinimizeResources() bool {
	if o == nil || IsNil(o.MinimizeResources.Get()) {
		var ret bool
		return ret
	}
	return *o.MinimizeResources.Get()
}

// GetMinimizeResourcesOk returns a tuple with the MinimizeResources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetMinimizeResourcesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimizeResources.Get(), o.MinimizeResources.IsSet()
}

// HasMinimizeResources returns a boolean if a field has been set.
func (o *Options) HasMinimizeResources() bool {
	if o != nil && o.MinimizeResources.IsSet() {
		return true
	}

	return false
}

// SetMinimizeResources gets a reference to the given NullableBool and assigns it to the MinimizeResources field.
func (o *Options) SetMinimizeResources(v bool) {
	o.MinimizeResources.Set(&v)
}
// SetMinimizeResourcesNil sets the value for MinimizeResources to be an explicit nil
func (o *Options) SetMinimizeResourcesNil() {
	o.MinimizeResources.Set(nil)
}

// UnsetMinimizeResources ensures that no value is present for MinimizeResources, not even an explicit nil
func (o *Options) UnsetMinimizeResources() {
	o.MinimizeResources.Unset()
}

// GetTraffic returns the Traffic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetTraffic() float64 {
	if o == nil || IsNil(o.Traffic.Get()) {
		var ret float64
		return ret
	}
	return *o.Traffic.Get()
}

// GetTrafficOk returns a tuple with the Traffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetTrafficOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Traffic.Get(), o.Traffic.IsSet()
}

// HasTraffic returns a boolean if a field has been set.
func (o *Options) HasTraffic() bool {
	if o != nil && o.Traffic.IsSet() {
		return true
	}

	return false
}

// SetTraffic gets a reference to the given NullableFloat64 and assigns it to the Traffic field.
func (o *Options) SetTraffic(v float64) {
	o.Traffic.Set(&v)
}
// SetTrafficNil sets the value for Traffic to be an explicit nil
func (o *Options) SetTrafficNil() {
	o.Traffic.Set(nil)
}

// UnsetTraffic ensures that no value is present for Traffic, not even an explicit nil
func (o *Options) UnsetTraffic() {
	o.Traffic.Unset()
}

// GetPolylines returns the Polylines field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetPolylines() bool {
	if o == nil || IsNil(o.Polylines.Get()) {
		var ret bool
		return ret
	}
	return *o.Polylines.Get()
}

// GetPolylinesOk returns a tuple with the Polylines field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetPolylinesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Polylines.Get(), o.Polylines.IsSet()
}

// HasPolylines returns a boolean if a field has been set.
func (o *Options) HasPolylines() bool {
	if o != nil && o.Polylines.IsSet() {
		return true
	}

	return false
}

// SetPolylines gets a reference to the given NullableBool and assigns it to the Polylines field.
func (o *Options) SetPolylines(v bool) {
	o.Polylines.Set(&v)
}
// SetPolylinesNil sets the value for Polylines to be an explicit nil
func (o *Options) SetPolylinesNil() {
	o.Polylines.Set(nil)
}

// UnsetPolylines ensures that no value is present for Polylines, not even an explicit nil
func (o *Options) UnsetPolylines() {
	o.Polylines.Unset()
}

// GetFairWorkloadPerTrip returns the FairWorkloadPerTrip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetFairWorkloadPerTrip() bool {
	if o == nil || IsNil(o.FairWorkloadPerTrip.Get()) {
		var ret bool
		return ret
	}
	return *o.FairWorkloadPerTrip.Get()
}

// GetFairWorkloadPerTripOk returns a tuple with the FairWorkloadPerTrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetFairWorkloadPerTripOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FairWorkloadPerTrip.Get(), o.FairWorkloadPerTrip.IsSet()
}

// HasFairWorkloadPerTrip returns a boolean if a field has been set.
func (o *Options) HasFairWorkloadPerTrip() bool {
	if o != nil && o.FairWorkloadPerTrip.IsSet() {
		return true
	}

	return false
}

// SetFairWorkloadPerTrip gets a reference to the given NullableBool and assigns it to the FairWorkloadPerTrip field.
func (o *Options) SetFairWorkloadPerTrip(v bool) {
	o.FairWorkloadPerTrip.Set(&v)
}
// SetFairWorkloadPerTripNil sets the value for FairWorkloadPerTrip to be an explicit nil
func (o *Options) SetFairWorkloadPerTripNil() {
	o.FairWorkloadPerTrip.Set(nil)
}

// UnsetFairWorkloadPerTrip ensures that no value is present for FairWorkloadPerTrip, not even an explicit nil
func (o *Options) UnsetFairWorkloadPerTrip() {
	o.FairWorkloadPerTrip.Unset()
}

// GetFairWorkloadPerResource returns the FairWorkloadPerResource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetFairWorkloadPerResource() bool {
	if o == nil || IsNil(o.FairWorkloadPerResource.Get()) {
		var ret bool
		return ret
	}
	return *o.FairWorkloadPerResource.Get()
}

// GetFairWorkloadPerResourceOk returns a tuple with the FairWorkloadPerResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetFairWorkloadPerResourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FairWorkloadPerResource.Get(), o.FairWorkloadPerResource.IsSet()
}

// HasFairWorkloadPerResource returns a boolean if a field has been set.
func (o *Options) HasFairWorkloadPerResource() bool {
	if o != nil && o.FairWorkloadPerResource.IsSet() {
		return true
	}

	return false
}

// SetFairWorkloadPerResource gets a reference to the given NullableBool and assigns it to the FairWorkloadPerResource field.
func (o *Options) SetFairWorkloadPerResource(v bool) {
	o.FairWorkloadPerResource.Set(&v)
}
// SetFairWorkloadPerResourceNil sets the value for FairWorkloadPerResource to be an explicit nil
func (o *Options) SetFairWorkloadPerResourceNil() {
	o.FairWorkloadPerResource.Set(nil)
}

// UnsetFairWorkloadPerResource ensures that no value is present for FairWorkloadPerResource, not even an explicit nil
func (o *Options) UnsetFairWorkloadPerResource() {
	o.FairWorkloadPerResource.Unset()
}

// GetSnapUnit returns the SnapUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetSnapUnit() int32 {
	if o == nil || IsNil(o.SnapUnit.Get()) {
		var ret int32
		return ret
	}
	return *o.SnapUnit.Get()
}

// GetSnapUnitOk returns a tuple with the SnapUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetSnapUnitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapUnit.Get(), o.SnapUnit.IsSet()
}

// HasSnapUnit returns a boolean if a field has been set.
func (o *Options) HasSnapUnit() bool {
	if o != nil && o.SnapUnit.IsSet() {
		return true
	}

	return false
}

// SetSnapUnit gets a reference to the given NullableInt32 and assigns it to the SnapUnit field.
func (o *Options) SetSnapUnit(v int32) {
	o.SnapUnit.Set(&v)
}
// SetSnapUnitNil sets the value for SnapUnit to be an explicit nil
func (o *Options) SetSnapUnitNil() {
	o.SnapUnit.Set(nil)
}

// UnsetSnapUnit ensures that no value is present for SnapUnit, not even an explicit nil
func (o *Options) UnsetSnapUnit() {
	o.SnapUnit.Unset()
}

// GetMaxSuggestions returns the MaxSuggestions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetMaxSuggestions() int32 {
	if o == nil || IsNil(o.MaxSuggestions.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxSuggestions.Get()
}

// GetMaxSuggestionsOk returns a tuple with the MaxSuggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetMaxSuggestionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSuggestions.Get(), o.MaxSuggestions.IsSet()
}

// HasMaxSuggestions returns a boolean if a field has been set.
func (o *Options) HasMaxSuggestions() bool {
	if o != nil && o.MaxSuggestions.IsSet() {
		return true
	}

	return false
}

// SetMaxSuggestions gets a reference to the given NullableInt32 and assigns it to the MaxSuggestions field.
func (o *Options) SetMaxSuggestions(v int32) {
	o.MaxSuggestions.Set(&v)
}
// SetMaxSuggestionsNil sets the value for MaxSuggestions to be an explicit nil
func (o *Options) SetMaxSuggestionsNil() {
	o.MaxSuggestions.Set(nil)
}

// UnsetMaxSuggestions ensures that no value is present for MaxSuggestions, not even an explicit nil
func (o *Options) UnsetMaxSuggestions() {
	o.MaxSuggestions.Unset()
}

// GetOnlyFeasibleSuggestions returns the OnlyFeasibleSuggestions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetOnlyFeasibleSuggestions() bool {
	if o == nil || IsNil(o.OnlyFeasibleSuggestions.Get()) {
		var ret bool
		return ret
	}
	return *o.OnlyFeasibleSuggestions.Get()
}

// GetOnlyFeasibleSuggestionsOk returns a tuple with the OnlyFeasibleSuggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetOnlyFeasibleSuggestionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnlyFeasibleSuggestions.Get(), o.OnlyFeasibleSuggestions.IsSet()
}

// HasOnlyFeasibleSuggestions returns a boolean if a field has been set.
func (o *Options) HasOnlyFeasibleSuggestions() bool {
	if o != nil && o.OnlyFeasibleSuggestions.IsSet() {
		return true
	}

	return false
}

// SetOnlyFeasibleSuggestions gets a reference to the given NullableBool and assigns it to the OnlyFeasibleSuggestions field.
func (o *Options) SetOnlyFeasibleSuggestions(v bool) {
	o.OnlyFeasibleSuggestions.Set(&v)
}
// SetOnlyFeasibleSuggestionsNil sets the value for OnlyFeasibleSuggestions to be an explicit nil
func (o *Options) SetOnlyFeasibleSuggestionsNil() {
	o.OnlyFeasibleSuggestions.Set(nil)
}

// UnsetOnlyFeasibleSuggestions ensures that no value is present for OnlyFeasibleSuggestions, not even an explicit nil
func (o *Options) UnsetOnlyFeasibleSuggestions() {
	o.OnlyFeasibleSuggestions.Unset()
}

// GetWorkloadSensitivity returns the WorkloadSensitivity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetWorkloadSensitivity() float64 {
	if o == nil || IsNil(o.WorkloadSensitivity.Get()) {
		var ret float64
		return ret
	}
	return *o.WorkloadSensitivity.Get()
}

// GetWorkloadSensitivityOk returns a tuple with the WorkloadSensitivity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetWorkloadSensitivityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkloadSensitivity.Get(), o.WorkloadSensitivity.IsSet()
}

// HasWorkloadSensitivity returns a boolean if a field has been set.
func (o *Options) HasWorkloadSensitivity() bool {
	if o != nil && o.WorkloadSensitivity.IsSet() {
		return true
	}

	return false
}

// SetWorkloadSensitivity gets a reference to the given NullableFloat64 and assigns it to the WorkloadSensitivity field.
func (o *Options) SetWorkloadSensitivity(v float64) {
	o.WorkloadSensitivity.Set(&v)
}
// SetWorkloadSensitivityNil sets the value for WorkloadSensitivity to be an explicit nil
func (o *Options) SetWorkloadSensitivityNil() {
	o.WorkloadSensitivity.Set(nil)
}

// UnsetWorkloadSensitivity ensures that no value is present for WorkloadSensitivity, not even an explicit nil
func (o *Options) UnsetWorkloadSensitivity() {
	o.WorkloadSensitivity.Unset()
}

// GetExplanation returns the Explanation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetExplanation() ExplanationOptions {
	if o == nil || IsNil(o.Explanation.Get()) {
		var ret ExplanationOptions
		return ret
	}
	return *o.Explanation.Get()
}

// GetExplanationOk returns a tuple with the Explanation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetExplanationOk() (*ExplanationOptions, bool) {
	if o == nil {
		return nil, false
	}
	return o.Explanation.Get(), o.Explanation.IsSet()
}

// HasExplanation returns a boolean if a field has been set.
func (o *Options) HasExplanation() bool {
	if o != nil && o.Explanation.IsSet() {
		return true
	}

	return false
}

// SetExplanation gets a reference to the given NullableExplanationOptions and assigns it to the Explanation field.
func (o *Options) SetExplanation(v ExplanationOptions) {
	o.Explanation.Set(&v)
}
// SetExplanationNil sets the value for Explanation to be an explicit nil
func (o *Options) SetExplanationNil() {
	o.Explanation.Set(nil)
}

// UnsetExplanation ensures that no value is present for Explanation, not even an explicit nil
func (o *Options) UnsetExplanation() {
	o.Explanation.Unset()
}

// GetFairComplexityPerTrip returns the FairComplexityPerTrip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetFairComplexityPerTrip() bool {
	if o == nil || IsNil(o.FairComplexityPerTrip.Get()) {
		var ret bool
		return ret
	}
	return *o.FairComplexityPerTrip.Get()
}

// GetFairComplexityPerTripOk returns a tuple with the FairComplexityPerTrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetFairComplexityPerTripOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FairComplexityPerTrip.Get(), o.FairComplexityPerTrip.IsSet()
}

// HasFairComplexityPerTrip returns a boolean if a field has been set.
func (o *Options) HasFairComplexityPerTrip() bool {
	if o != nil && o.FairComplexityPerTrip.IsSet() {
		return true
	}

	return false
}

// SetFairComplexityPerTrip gets a reference to the given NullableBool and assigns it to the FairComplexityPerTrip field.
func (o *Options) SetFairComplexityPerTrip(v bool) {
	o.FairComplexityPerTrip.Set(&v)
}
// SetFairComplexityPerTripNil sets the value for FairComplexityPerTrip to be an explicit nil
func (o *Options) SetFairComplexityPerTripNil() {
	o.FairComplexityPerTrip.Set(nil)
}

// UnsetFairComplexityPerTrip ensures that no value is present for FairComplexityPerTrip, not even an explicit nil
func (o *Options) UnsetFairComplexityPerTrip() {
	o.FairComplexityPerTrip.Unset()
}

// GetFairComplexityPerResource returns the FairComplexityPerResource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Options) GetFairComplexityPerResource() bool {
	if o == nil || IsNil(o.FairComplexityPerResource.Get()) {
		var ret bool
		return ret
	}
	return *o.FairComplexityPerResource.Get()
}

// GetFairComplexityPerResourceOk returns a tuple with the FairComplexityPerResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Options) GetFairComplexityPerResourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FairComplexityPerResource.Get(), o.FairComplexityPerResource.IsSet()
}

// HasFairComplexityPerResource returns a boolean if a field has been set.
func (o *Options) HasFairComplexityPerResource() bool {
	if o != nil && o.FairComplexityPerResource.IsSet() {
		return true
	}

	return false
}

// SetFairComplexityPerResource gets a reference to the given NullableBool and assigns it to the FairComplexityPerResource field.
func (o *Options) SetFairComplexityPerResource(v bool) {
	o.FairComplexityPerResource.Set(&v)
}
// SetFairComplexityPerResourceNil sets the value for FairComplexityPerResource to be an explicit nil
func (o *Options) SetFairComplexityPerResourceNil() {
	o.FairComplexityPerResource.Set(nil)
}

// UnsetFairComplexityPerResource ensures that no value is present for FairComplexityPerResource, not even an explicit nil
func (o *Options) UnsetFairComplexityPerResource() {
	o.FairComplexityPerResource.Unset()
}

func (o Options) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Options) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Euclidian.IsSet() {
		toSerialize["euclidian"] = o.Euclidian.Get()
	}
	if o.RoutingEngine.IsSet() {
		toSerialize["routingEngine"] = o.RoutingEngine.Get()
	}
	if o.PartialPlanning.IsSet() {
		toSerialize["partialPlanning"] = o.PartialPlanning.Get()
	}
	if o.MinimizeResources.IsSet() {
		toSerialize["minimizeResources"] = o.MinimizeResources.Get()
	}
	if o.Traffic.IsSet() {
		toSerialize["traffic"] = o.Traffic.Get()
	}
	if o.Polylines.IsSet() {
		toSerialize["polylines"] = o.Polylines.Get()
	}
	if o.FairWorkloadPerTrip.IsSet() {
		toSerialize["fairWorkloadPerTrip"] = o.FairWorkloadPerTrip.Get()
	}
	if o.FairWorkloadPerResource.IsSet() {
		toSerialize["fairWorkloadPerResource"] = o.FairWorkloadPerResource.Get()
	}
	if o.SnapUnit.IsSet() {
		toSerialize["snapUnit"] = o.SnapUnit.Get()
	}
	if o.MaxSuggestions.IsSet() {
		toSerialize["maxSuggestions"] = o.MaxSuggestions.Get()
	}
	if o.OnlyFeasibleSuggestions.IsSet() {
		toSerialize["onlyFeasibleSuggestions"] = o.OnlyFeasibleSuggestions.Get()
	}
	if o.WorkloadSensitivity.IsSet() {
		toSerialize["workloadSensitivity"] = o.WorkloadSensitivity.Get()
	}
	if o.Explanation.IsSet() {
		toSerialize["explanation"] = o.Explanation.Get()
	}
	if o.FairComplexityPerTrip.IsSet() {
		toSerialize["fairComplexityPerTrip"] = o.FairComplexityPerTrip.Get()
	}
	if o.FairComplexityPerResource.IsSet() {
		toSerialize["fairComplexityPerResource"] = o.FairComplexityPerResource.Get()
	}
	return toSerialize, nil
}

type NullableOptions struct {
	value *Options
	isSet bool
}

func (v NullableOptions) Get() *Options {
	return v.value
}

func (v *NullableOptions) Set(val *Options) {
	v.value = val
	v.isSet = true
}

func (v NullableOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptions(val *Options) *NullableOptions {
	return &NullableOptions{value: val, isSet: true}
}

func (v NullableOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


