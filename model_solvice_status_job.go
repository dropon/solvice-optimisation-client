/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SolviceStatusJob type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SolviceStatusJob{}

// SolviceStatusJob Status of a solve job
type SolviceStatusJob struct {
	// Job ID
	Id string `json:"id"`
	// Status of the solve.
	Status NullableString `json:"status,omitempty"`
	// Duration of the solve in seconds
	SolveDuration NullableInt32 `json:"solveDuration,omitempty"`
	// List of errors
	Errors []Message `json:"errors,omitempty"`
	// List of warnings
	Warnings []Message `json:"warnings,omitempty"`
}

type _SolviceStatusJob SolviceStatusJob

// NewSolviceStatusJob instantiates a new SolviceStatusJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSolviceStatusJob(id string) *SolviceStatusJob {
	this := SolviceStatusJob{}
	this.Id = id
	return &this
}

// NewSolviceStatusJobWithDefaults instantiates a new SolviceStatusJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSolviceStatusJobWithDefaults() *SolviceStatusJob {
	this := SolviceStatusJob{}
	return &this
}

// GetId returns the Id field value
func (o *SolviceStatusJob) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SolviceStatusJob) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SolviceStatusJob) SetId(v string) {
	o.Id = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SolviceStatusJob) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SolviceStatusJob) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *SolviceStatusJob) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *SolviceStatusJob) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *SolviceStatusJob) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *SolviceStatusJob) UnsetStatus() {
	o.Status.Unset()
}

// GetSolveDuration returns the SolveDuration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SolviceStatusJob) GetSolveDuration() int32 {
	if o == nil || IsNil(o.SolveDuration.Get()) {
		var ret int32
		return ret
	}
	return *o.SolveDuration.Get()
}

// GetSolveDurationOk returns a tuple with the SolveDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SolviceStatusJob) GetSolveDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SolveDuration.Get(), o.SolveDuration.IsSet()
}

// HasSolveDuration returns a boolean if a field has been set.
func (o *SolviceStatusJob) HasSolveDuration() bool {
	if o != nil && o.SolveDuration.IsSet() {
		return true
	}

	return false
}

// SetSolveDuration gets a reference to the given NullableInt32 and assigns it to the SolveDuration field.
func (o *SolviceStatusJob) SetSolveDuration(v int32) {
	o.SolveDuration.Set(&v)
}
// SetSolveDurationNil sets the value for SolveDuration to be an explicit nil
func (o *SolviceStatusJob) SetSolveDurationNil() {
	o.SolveDuration.Set(nil)
}

// UnsetSolveDuration ensures that no value is present for SolveDuration, not even an explicit nil
func (o *SolviceStatusJob) UnsetSolveDuration() {
	o.SolveDuration.Unset()
}

// GetErrors returns the Errors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SolviceStatusJob) GetErrors() []Message {
	if o == nil {
		var ret []Message
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SolviceStatusJob) GetErrorsOk() ([]Message, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *SolviceStatusJob) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []Message and assigns it to the Errors field.
func (o *SolviceStatusJob) SetErrors(v []Message) {
	o.Errors = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SolviceStatusJob) GetWarnings() []Message {
	if o == nil {
		var ret []Message
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SolviceStatusJob) GetWarningsOk() ([]Message, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SolviceStatusJob) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Message and assigns it to the Warnings field.
func (o *SolviceStatusJob) SetWarnings(v []Message) {
	o.Warnings = v
}

func (o SolviceStatusJob) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SolviceStatusJob) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.SolveDuration.IsSet() {
		toSerialize["solveDuration"] = o.SolveDuration.Get()
	}
	if o.Errors != nil {
		toSerialize["errors"] = o.Errors
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *SolviceStatusJob) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSolviceStatusJob := _SolviceStatusJob{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSolviceStatusJob)

	if err != nil {
		return err
	}

	*o = SolviceStatusJob(varSolviceStatusJob)

	return err
}

type NullableSolviceStatusJob struct {
	value *SolviceStatusJob
	isSet bool
}

func (v NullableSolviceStatusJob) Get() *SolviceStatusJob {
	return v.value
}

func (v *NullableSolviceStatusJob) Set(val *SolviceStatusJob) {
	v.value = val
	v.isSet = true
}

func (v NullableSolviceStatusJob) IsSet() bool {
	return v.isSet
}

func (v *NullableSolviceStatusJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSolviceStatusJob(val *SolviceStatusJob) *NullableSolviceStatusJob {
	return &NullableSolviceStatusJob{value: val, isSet: true}
}

func (v NullableSolviceStatusJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSolviceStatusJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


