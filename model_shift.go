/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Shift type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Shift{}

// Shift Shift definition. Every potential shift of a resource should be defined here. Every shift can be a trip.
type Shift struct {
	// Start of the shift datetime 
	From string `json:"from"`
	// End of the shift datetime
	To string `json:"to"`
	// Start location
	Start NullableLocation `json:"start,omitempty"`
	// End location
	End NullableLocation `json:"end,omitempty"`
	// Ignore the travel time from the start location to the first order
	IgnoreTravelTimeToFirstJob NullableBool `json:"ignoreTravelTimeToFirstJob,omitempty"`
	// Ignore the travel time from the last order to the optional end location
	IgnoreTravelTimeFromLastJob NullableBool `json:"ignoreTravelTimeFromLastJob,omitempty"`
	// Can go into overtime.
	// Deprecated
	Overtime interface{} `json:"overtime,omitempty"`
	// Maximum overtime time.
	OvertimeEnd NullableString `json:"overtimeEnd,omitempty"`
	// Windowed breaks definitions.
	Breaks []BreakDto1 `json:"breaks,omitempty"`
	// Shift tags will ensure that this resource can only do Jobs of this tag during this shift. This allows for tag based availability.
	Tags []string `json:"tags,omitempty"`
	// Map of job type to maximum count allowed per shift. Null means no limitations.
	JobTypeLimitations map[string]int32 `json:"jobTypeLimitations,omitempty"`
}

type _Shift Shift

// NewShift instantiates a new Shift object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShift(from string, to string) *Shift {
	this := Shift{}
	this.From = from
	this.To = to
	return &this
}

// NewShiftWithDefaults instantiates a new Shift object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShiftWithDefaults() *Shift {
	this := Shift{}
	return &this
}

// GetFrom returns the From field value
func (o *Shift) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *Shift) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *Shift) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *Shift) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *Shift) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *Shift) SetTo(v string) {
	o.To = v
}

// GetStart returns the Start field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetStart() Location {
	if o == nil || IsNil(o.Start.Get()) {
		var ret Location
		return ret
	}
	return *o.Start.Get()
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetStartOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Start.Get(), o.Start.IsSet()
}

// HasStart returns a boolean if a field has been set.
func (o *Shift) HasStart() bool {
	if o != nil && o.Start.IsSet() {
		return true
	}

	return false
}

// SetStart gets a reference to the given NullableLocation and assigns it to the Start field.
func (o *Shift) SetStart(v Location) {
	o.Start.Set(&v)
}
// SetStartNil sets the value for Start to be an explicit nil
func (o *Shift) SetStartNil() {
	o.Start.Set(nil)
}

// UnsetStart ensures that no value is present for Start, not even an explicit nil
func (o *Shift) UnsetStart() {
	o.Start.Unset()
}

// GetEnd returns the End field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetEnd() Location {
	if o == nil || IsNil(o.End.Get()) {
		var ret Location
		return ret
	}
	return *o.End.Get()
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetEndOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.End.Get(), o.End.IsSet()
}

// HasEnd returns a boolean if a field has been set.
func (o *Shift) HasEnd() bool {
	if o != nil && o.End.IsSet() {
		return true
	}

	return false
}

// SetEnd gets a reference to the given NullableLocation and assigns it to the End field.
func (o *Shift) SetEnd(v Location) {
	o.End.Set(&v)
}
// SetEndNil sets the value for End to be an explicit nil
func (o *Shift) SetEndNil() {
	o.End.Set(nil)
}

// UnsetEnd ensures that no value is present for End, not even an explicit nil
func (o *Shift) UnsetEnd() {
	o.End.Unset()
}

// GetIgnoreTravelTimeToFirstJob returns the IgnoreTravelTimeToFirstJob field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetIgnoreTravelTimeToFirstJob() bool {
	if o == nil || IsNil(o.IgnoreTravelTimeToFirstJob.Get()) {
		var ret bool
		return ret
	}
	return *o.IgnoreTravelTimeToFirstJob.Get()
}

// GetIgnoreTravelTimeToFirstJobOk returns a tuple with the IgnoreTravelTimeToFirstJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetIgnoreTravelTimeToFirstJobOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreTravelTimeToFirstJob.Get(), o.IgnoreTravelTimeToFirstJob.IsSet()
}

// HasIgnoreTravelTimeToFirstJob returns a boolean if a field has been set.
func (o *Shift) HasIgnoreTravelTimeToFirstJob() bool {
	if o != nil && o.IgnoreTravelTimeToFirstJob.IsSet() {
		return true
	}

	return false
}

// SetIgnoreTravelTimeToFirstJob gets a reference to the given NullableBool and assigns it to the IgnoreTravelTimeToFirstJob field.
func (o *Shift) SetIgnoreTravelTimeToFirstJob(v bool) {
	o.IgnoreTravelTimeToFirstJob.Set(&v)
}
// SetIgnoreTravelTimeToFirstJobNil sets the value for IgnoreTravelTimeToFirstJob to be an explicit nil
func (o *Shift) SetIgnoreTravelTimeToFirstJobNil() {
	o.IgnoreTravelTimeToFirstJob.Set(nil)
}

// UnsetIgnoreTravelTimeToFirstJob ensures that no value is present for IgnoreTravelTimeToFirstJob, not even an explicit nil
func (o *Shift) UnsetIgnoreTravelTimeToFirstJob() {
	o.IgnoreTravelTimeToFirstJob.Unset()
}

// GetIgnoreTravelTimeFromLastJob returns the IgnoreTravelTimeFromLastJob field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetIgnoreTravelTimeFromLastJob() bool {
	if o == nil || IsNil(o.IgnoreTravelTimeFromLastJob.Get()) {
		var ret bool
		return ret
	}
	return *o.IgnoreTravelTimeFromLastJob.Get()
}

// GetIgnoreTravelTimeFromLastJobOk returns a tuple with the IgnoreTravelTimeFromLastJob field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetIgnoreTravelTimeFromLastJobOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IgnoreTravelTimeFromLastJob.Get(), o.IgnoreTravelTimeFromLastJob.IsSet()
}

// HasIgnoreTravelTimeFromLastJob returns a boolean if a field has been set.
func (o *Shift) HasIgnoreTravelTimeFromLastJob() bool {
	if o != nil && o.IgnoreTravelTimeFromLastJob.IsSet() {
		return true
	}

	return false
}

// SetIgnoreTravelTimeFromLastJob gets a reference to the given NullableBool and assigns it to the IgnoreTravelTimeFromLastJob field.
func (o *Shift) SetIgnoreTravelTimeFromLastJob(v bool) {
	o.IgnoreTravelTimeFromLastJob.Set(&v)
}
// SetIgnoreTravelTimeFromLastJobNil sets the value for IgnoreTravelTimeFromLastJob to be an explicit nil
func (o *Shift) SetIgnoreTravelTimeFromLastJobNil() {
	o.IgnoreTravelTimeFromLastJob.Set(nil)
}

// UnsetIgnoreTravelTimeFromLastJob ensures that no value is present for IgnoreTravelTimeFromLastJob, not even an explicit nil
func (o *Shift) UnsetIgnoreTravelTimeFromLastJob() {
	o.IgnoreTravelTimeFromLastJob.Unset()
}

// GetOvertime returns the Overtime field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *Shift) GetOvertime() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Overtime
}

// GetOvertimeOk returns a tuple with the Overtime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *Shift) GetOvertimeOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Overtime) {
		return nil, false
	}
	return &o.Overtime, true
}

// HasOvertime returns a boolean if a field has been set.
func (o *Shift) HasOvertime() bool {
	if o != nil && !IsNil(o.Overtime) {
		return true
	}

	return false
}

// SetOvertime gets a reference to the given interface{} and assigns it to the Overtime field.
// Deprecated
func (o *Shift) SetOvertime(v interface{}) {
	o.Overtime = v
}

// GetOvertimeEnd returns the OvertimeEnd field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetOvertimeEnd() string {
	if o == nil || IsNil(o.OvertimeEnd.Get()) {
		var ret string
		return ret
	}
	return *o.OvertimeEnd.Get()
}

// GetOvertimeEndOk returns a tuple with the OvertimeEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetOvertimeEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OvertimeEnd.Get(), o.OvertimeEnd.IsSet()
}

// HasOvertimeEnd returns a boolean if a field has been set.
func (o *Shift) HasOvertimeEnd() bool {
	if o != nil && o.OvertimeEnd.IsSet() {
		return true
	}

	return false
}

// SetOvertimeEnd gets a reference to the given NullableString and assigns it to the OvertimeEnd field.
func (o *Shift) SetOvertimeEnd(v string) {
	o.OvertimeEnd.Set(&v)
}
// SetOvertimeEndNil sets the value for OvertimeEnd to be an explicit nil
func (o *Shift) SetOvertimeEndNil() {
	o.OvertimeEnd.Set(nil)
}

// UnsetOvertimeEnd ensures that no value is present for OvertimeEnd, not even an explicit nil
func (o *Shift) UnsetOvertimeEnd() {
	o.OvertimeEnd.Unset()
}

// GetBreaks returns the Breaks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetBreaks() []BreakDto1 {
	if o == nil {
		var ret []BreakDto1
		return ret
	}
	return o.Breaks
}

// GetBreaksOk returns a tuple with the Breaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetBreaksOk() ([]BreakDto1, bool) {
	if o == nil || IsNil(o.Breaks) {
		return nil, false
	}
	return o.Breaks, true
}

// HasBreaks returns a boolean if a field has been set.
func (o *Shift) HasBreaks() bool {
	if o != nil && !IsNil(o.Breaks) {
		return true
	}

	return false
}

// SetBreaks gets a reference to the given []BreakDto1 and assigns it to the Breaks field.
func (o *Shift) SetBreaks(v []BreakDto1) {
	o.Breaks = v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Shift) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Shift) SetTags(v []string) {
	o.Tags = v
}

// GetJobTypeLimitations returns the JobTypeLimitations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Shift) GetJobTypeLimitations() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}
	return o.JobTypeLimitations
}

// GetJobTypeLimitationsOk returns a tuple with the JobTypeLimitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Shift) GetJobTypeLimitationsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.JobTypeLimitations) {
		return nil, false
	}
	return &o.JobTypeLimitations, true
}

// HasJobTypeLimitations returns a boolean if a field has been set.
func (o *Shift) HasJobTypeLimitations() bool {
	if o != nil && !IsNil(o.JobTypeLimitations) {
		return true
	}

	return false
}

// SetJobTypeLimitations gets a reference to the given map[string]int32 and assigns it to the JobTypeLimitations field.
func (o *Shift) SetJobTypeLimitations(v map[string]int32) {
	o.JobTypeLimitations = v
}

func (o Shift) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Shift) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if o.Start.IsSet() {
		toSerialize["start"] = o.Start.Get()
	}
	if o.End.IsSet() {
		toSerialize["end"] = o.End.Get()
	}
	if o.IgnoreTravelTimeToFirstJob.IsSet() {
		toSerialize["ignoreTravelTimeToFirstJob"] = o.IgnoreTravelTimeToFirstJob.Get()
	}
	if o.IgnoreTravelTimeFromLastJob.IsSet() {
		toSerialize["ignoreTravelTimeFromLastJob"] = o.IgnoreTravelTimeFromLastJob.Get()
	}
	if o.Overtime != nil {
		toSerialize["overtime"] = o.Overtime
	}
	if o.OvertimeEnd.IsSet() {
		toSerialize["overtimeEnd"] = o.OvertimeEnd.Get()
	}
	if o.Breaks != nil {
		toSerialize["breaks"] = o.Breaks
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.JobTypeLimitations != nil {
		toSerialize["jobTypeLimitations"] = o.JobTypeLimitations
	}
	return toSerialize, nil
}

func (o *Shift) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varShift := _Shift{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varShift)

	if err != nil {
		return err
	}

	*o = Shift(varShift)

	return err
}

type NullableShift struct {
	value *Shift
	isSet bool
}

func (v NullableShift) Get() *Shift {
	return v.value
}

func (v *NullableShift) Set(val *Shift) {
	v.value = val
	v.isSet = true
}

func (v NullableShift) IsSet() bool {
	return v.isSet
}

func (v *NullableShift) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShift(val *Shift) *NullableShift {
	return &NullableShift{value: val, isSet: true}
}

func (v NullableShift) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShift) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


