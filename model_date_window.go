/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DateWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateWindow{}

// DateWindow Window in which the job can be executed
type DateWindow struct {
	// Date time start of window
	From string `json:"from"`
	// Date time end of window
	To string `json:"to"`
	// Weight constraint modifier
	Weight NullableInt32 `json:"weight,omitempty"`
	// Hard constraint violation of DateWindow
	Hard NullableBool `json:"hard,omitempty"`
}

type _DateWindow DateWindow

// NewDateWindow instantiates a new DateWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateWindow(from string, to string) *DateWindow {
	this := DateWindow{}
	this.From = from
	this.To = to
	var weight int32 = 1
	this.Weight = *NewNullableInt32(&weight)
	var hard bool = true
	this.Hard = *NewNullableBool(&hard)
	return &this
}

// NewDateWindowWithDefaults instantiates a new DateWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateWindowWithDefaults() *DateWindow {
	this := DateWindow{}
	var weight int32 = 1
	this.Weight = *NewNullableInt32(&weight)
	var hard bool = true
	this.Hard = *NewNullableBool(&hard)
	return &this
}

// GetFrom returns the From field value
func (o *DateWindow) GetFrom() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *DateWindow) GetFromOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.From, true
}

// SetFrom sets field value
func (o *DateWindow) SetFrom(v string) {
	o.From = v
}

// GetTo returns the To field value
func (o *DateWindow) GetTo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *DateWindow) GetToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.To, true
}

// SetTo sets field value
func (o *DateWindow) SetTo(v string) {
	o.To = v
}

// GetWeight returns the Weight field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DateWindow) GetWeight() int32 {
	if o == nil || IsNil(o.Weight.Get()) {
		var ret int32
		return ret
	}
	return *o.Weight.Get()
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DateWindow) GetWeightOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weight.Get(), o.Weight.IsSet()
}

// HasWeight returns a boolean if a field has been set.
func (o *DateWindow) HasWeight() bool {
	if o != nil && o.Weight.IsSet() {
		return true
	}

	return false
}

// SetWeight gets a reference to the given NullableInt32 and assigns it to the Weight field.
func (o *DateWindow) SetWeight(v int32) {
	o.Weight.Set(&v)
}
// SetWeightNil sets the value for Weight to be an explicit nil
func (o *DateWindow) SetWeightNil() {
	o.Weight.Set(nil)
}

// UnsetWeight ensures that no value is present for Weight, not even an explicit nil
func (o *DateWindow) UnsetWeight() {
	o.Weight.Unset()
}

// GetHard returns the Hard field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DateWindow) GetHard() bool {
	if o == nil || IsNil(o.Hard.Get()) {
		var ret bool
		return ret
	}
	return *o.Hard.Get()
}

// GetHardOk returns a tuple with the Hard field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DateWindow) GetHardOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hard.Get(), o.Hard.IsSet()
}

// HasHard returns a boolean if a field has been set.
func (o *DateWindow) HasHard() bool {
	if o != nil && o.Hard.IsSet() {
		return true
	}

	return false
}

// SetHard gets a reference to the given NullableBool and assigns it to the Hard field.
func (o *DateWindow) SetHard(v bool) {
	o.Hard.Set(&v)
}
// SetHardNil sets the value for Hard to be an explicit nil
func (o *DateWindow) SetHardNil() {
	o.Hard.Set(nil)
}

// UnsetHard ensures that no value is present for Hard, not even an explicit nil
func (o *DateWindow) UnsetHard() {
	o.Hard.Unset()
}

func (o DateWindow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["from"] = o.From
	toSerialize["to"] = o.To
	if o.Weight.IsSet() {
		toSerialize["weight"] = o.Weight.Get()
	}
	if o.Hard.IsSet() {
		toSerialize["hard"] = o.Hard.Get()
	}
	return toSerialize, nil
}

func (o *DateWindow) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"from",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDateWindow := _DateWindow{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDateWindow)

	if err != nil {
		return err
	}

	*o = DateWindow(varDateWindow)

	return err
}

type NullableDateWindow struct {
	value *DateWindow
	isSet bool
}

func (v NullableDateWindow) Get() *DateWindow {
	return v.value
}

func (v *NullableDateWindow) Set(val *DateWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableDateWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableDateWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateWindow(val *DateWindow) *NullableDateWindow {
	return &NullableDateWindow{value: val, isSet: true}
}

func (v NullableDateWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


