openapi: 3.0.3
info:
  description: "\n            Welcome to the Solvice API! You can use our API to access\
    \ Solvice API endpoints,\n            which can get information on your solved\
    \ jobs,\n            their statuses and of course post new solve jobs.\n     \
    \   "
  title: VRP API
  version: "2.0"
servers:
- description: Production API
  url: https://api.solvice.io
security:
- apikey: []
tags:
- description: VRP API
  name: VRP API
paths:
  /v2/vrp/demo:
    get:
      description: Demo of random generated VRP instance
      operationId: getDemoVRP
      parameters:
      - explode: true
        in: query
        name: geolocation
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: true
        in: query
        name: jobs
        required: false
        schema:
          format: int32
          nullable: true
          type: integer
        style: form
      - explode: true
        in: query
        name: radius
        required: false
        schema:
          format: double
          nullable: true
          type: number
        style: form
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnRouteRequest"
          description: Status
      summary: Demo
      tags:
      - Info
  /v2/vrp/evaluate:
    post:
      description: Will trigger the evaluation run asynchronously.
      operationId: evaluateVRP
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnRouteRequest"
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolviceStatusJob"
          description: Status
      summary: Evaluate
      tags:
      - Actions
  /v2/vrp/jobs/{id}:
    get:
      description: Return original request
      operationId: getVRPRequest
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnRouteRequest"
          description: Status
      summary: Request
      tags:
      - Info
  /v2/vrp/jobs/{id}/explanation:
    get:
      description: "Contains the explanation, once solved."
      operationId: getVRPExplanation
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoutingExplanation"
          description: Status
      summary: Explanation
      tags:
      - Info
  /v2/vrp/jobs/{id}/solution:
    get:
      description: "Contains the actual solution, once solved."
      operationId: getVRPSolution
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnRouteResponse"
          description: Status
      summary: Solution
      tags:
      - Info
  /v2/vrp/jobs/{id}/status:
    get:
      description: Check whether the job is solved or not.
      operationId: getStatus
      parameters:
      - explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolviceStatusJob"
          description: Status
      summary: Status
      tags:
      - Info
  /v2/vrp/solve:
    post:
      description: Will trigger the solver run asynchronously.
      operationId: solveVRP
      parameters:
      - explode: true
        in: query
        name: millis
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - explode: false
        in: header
        name: instance
        required: false
        schema:
          nullable: true
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnRouteRequest"
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolviceStatusJob"
          description: Status
      summary: Solve
      tags:
      - Actions
  /v2/vrp/suggest:
    post:
      description: Will return the suggest moves for an unassigned job.
      operationId: suggestVRP
      parameters:
      - explode: true
        in: query
        name: millis
        required: false
        schema:
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnRouteRequest"
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SolviceStatusJob"
          description: Status
      summary: Suggest
      tags:
      - Actions
  /v2/vrp/sync/evaluate:
    post:
      description: Synchronous evaluate operation for low latency results
      operationId: syncEvaluateVRP
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnRouteRequest"
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnRouteResponse"
          description: Evaluation
      summary: Synchronous Evaluate
      tags:
      - Actions
  /v2/vrp/sync/solve:
    post:
      description: Synchronous solve operation for low latency results
      operationId: syncSolveVRP
      parameters:
      - explode: true
        in: query
        name: millis
        required: false
        schema:
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnRouteRequest"
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnRouteResponse"
          description: Solution
      summary: Synchronous Solve
      tags:
      - Actions
  /v2/vrp/sync/suggest:
    post:
      description: Synchronous suggest operation for low latency results
      operationId: syncSuggestVRP
      parameters:
      - explode: true
        in: query
        name: millis
        required: false
        schema:
          nullable: true
          type: string
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnRouteRequest"
      responses:
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Bad request
        "427":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Too many requests.
        "500":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessage"
          description: Internal error
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnRouteResponse"
          description: Suggestions
      summary: Synchronous Suggest
      tags:
      - Actions
components:
  schemas:
    ErrorMessage:
      example:
        message: message
        status: status
      properties:
        message:
          description: Message
          type: string
        status:
          allOf:
          - $ref: "#/components/schemas/Status"
          description: HTTP status
          type: string
      required:
      - message
      - status
      type: object
    OnRouteRequest:
      description: "OnRoute Request for solving, evaluating"
      example:
        jobs:
        - name: "1"
          duration: 3600
        - name: "2"
          duration: 3600
        resources:
        - name: "1"
      properties:
        resources:
          description: "List of available resources (vehicles, drivers, workers) that\
            \ can be assigned to perform jobs. Each resource defines their working\
            \ schedules, location constraints, capacity limits, and capabilities.\
            \ At least one resource is required, with a maximum of 2000 resources\
            \ per request."
          items:
            $ref: "#/components/schemas/Resource"
          maxItems: 2000
          minItems: 1
          type: array
          uniqueItems: true
        jobs:
          description: "List of jobs/tasks to be assigned to resources. Each job specifies\
            \ service requirements, location, time constraints, duration, and resource\
            \ preferences. Jobs represent the work that needs to be scheduled and\
            \ optimized. At least one job is required, with a maximum of 10,000 jobs\
            \ per request."
          items:
            $ref: "#/components/schemas/Job"
          maxItems: 10000
          minItems: 1
          type: array
          uniqueItems: true
        options:
          allOf:
          - $ref: "#/components/schemas/Options"
          description: "Configuration options that control the solver's behavior,\
            \ optimization strategy, and output format. These settings affect how\
            \ the solver approaches the problem, what data is included in responses,\
            \ and performance characteristics."
          nullable: true
          type: object
        weights:
          allOf:
          - $ref: "#/components/schemas/Weights"
          description: "Relative importance weights for different optimization objectives\
            \ and constraint violations. These weights allow you to balance competing\
            \ priorities such as travel time vs. resource utilization, or to emphasize\
            \ certain constraints like customer preferences or service urgency."
          nullable: true
          type: object
        hook:
          description: "Optional webhook URL that will receive a POST request with\
            \ the job ID when the optimization is complete. This enables asynchronous\
            \ processing where you can submit a request and be notified when results\
            \ are ready, rather than waiting for the synchronous response."
          format: uri
          nullable: true
          type: string
        customDistanceMatrices:
          allOf:
          - $ref: "#/components/schemas/CustomDistanceMatrices"
          description: "Optional configuration for custom distance matrices supporting\
            \ multiple vehicle profiles and time slices. When provided, these matrix\
            \ IDs will be used instead of calculating distances through routing engines.\
            \ This is useful for scenarios requiring pre-computed distance matrices\
            \ with specific routing constraints or for improved performance."
          nullable: true
          type: object
        label:
          nullable: true
          type: string
        relations:
          items:
            $ref: "#/components/schemas/Relation"
          nullable: true
          type: array
      required:
      - jobs
      - resources
      type: object
    SolviceStatusJob:
      description: Status of a solve job
      example:
        solveDuration: 0
        warnings:
        - code: 6
          message: message
        - code: 6
          message: message
        id: id
        errors:
        - code: 6
          message: message
        - code: 6
          message: message
        status: SOLVING
      properties:
        id:
          description: Job ID
          nullable: false
          type: string
        status:
          description: Status of the solve.
          enum:
          - QUEUED
          - SOLVING
          - SOLVED
          - ERROR
          example: SOLVING
          nullable: true
          type: string
        solveDuration:
          description: Duration of the solve in seconds
          format: int32
          nullable: true
          type: integer
        errors:
          description: List of errors
          items:
            $ref: "#/components/schemas/Message"
          nullable: true
          type: array
        warnings:
          description: List of warnings
          items:
            $ref: "#/components/schemas/Message"
          nullable: true
          type: array
      required:
      - id
      title: ""
      type: object
    RoutingExplanation:
      description: Explains the conflicts of a certain routing solution and the unresolved
        constraints.
      example:
        score:
          hard: -2000
          soft: -15000
          feasible: false
        conflicts:
        - constraint: TIME_WINDOW_CONFLICT
          score: "-1000"
          job: Job-1
          resource: vehicle-1
        - constraint: TAG_HARD
          score: "-1000"
          job: Job-2
          resource: vehicle-1
          tag: electrical
        unresolved:
        - constraint: TRAVEL_TIME
          score: "-15000"
        alternatives:
          Job-1:
          - job: Job-1
            resource: vehicle-2
            suggestedArrival: 2023-01-13T09:30:00Z
            latestArrival: 2023-01-13T10:00:00Z
            executedAfter: Job-0
            score:
              hard: 0
              soft: -1500
              feasible: true
      properties:
        score:
          $ref: "#/components/schemas/RoutingExplanation_score"
        conflicts:
          description: Conflicts in the solution
          example:
            constraint: TIME_WINDOW_CONFLICT
            score: "-1000"
            job: Job-1
            resource: vehicle-1
          items:
            $ref: "#/components/schemas/RoutingConflict"
          nullable: true
          properties:
            constraint:
              description: Constraint type.
              nullable: false
              type: string
            score:
              description: Score impact of this conflict.
              nullable: false
              type: string
            job:
              description: Job id.
              nullable: true
              type: string
            resource:
              description: Resource id.
              nullable: true
              type: string
            tag:
              description: Tag id.
              nullable: true
              type: string
            relation:
              nullable: true
              type: string
          required:
          - constraint
          - score
          type: array
        unresolved:
          description: Unresolved constraints in the solution
          example:
            constraint: TRAVEL_TIME
            score: "-1500"
          items:
            $ref: "#/components/schemas/Unresolved"
          nullable: true
          properties:
            constraint:
              allOf:
              - $ref: "#/components/schemas/OnrouteConstraint"
              description: Constraint type.
              nullable: false
              type: string
            score:
              description: Score impact of this conflict.
              nullable: false
              type: string
          required:
          - constraint
          - score
          type: array
        alternatives:
          additionalProperties:
            type: object
          description: "When `options.explanation.enabled` is set to `true`, this\
            \ field will contain the alternatives for the solution.The key is the\
            \ job name and the value is the list of assignments. Each assignment contains\
            \ the resource, the date, and the score. In this way, you can check the\
            \ impact of the alternative on the score."
          example:
            Job-1:
            - job: Job-1
              resource: vehicle-2
              suggestedArrival: 2023-01-13T09:30:00Z
              latestArrival: 2023-01-13T10:00:00Z
              executedAfter: Job-0
              score:
                hard: 0
                soft: -1500
                feasible: true
          nullable: true
          type: object
      required:
      - score
      type: object
    OnRouteResponse:
      description: OnRoute response from solve
      example:
        id: 0000-00000-00000-0000
        status: SOLVED
        score:
          hard: 0
          soft: -12345
          feasible: true
        trips:
        - resource: vehicle-1
          date: 2023-01-13T00:00:00Z
          departureTime: 2023-01-13T08:00:00Z
          visits:
          - job: Job-1
            arrival: 2023-01-13T08:30:00Z
            serviceTime: 600
            travelTime: 1800
            distance: 15000
            location:
              latitude: 51.0543
              longitude: 3.7174
            waitTime: 0
          waitTime: 0
          travelTime: 3600
          distance: 30000
          workTime: 4200
          serviceTime: 600
          occupancy: 0.47
        totalWaitTimeInSeconds: 0
        totalTravelTimeInSeconds: 3600
        totalTravelDistanceInMeters: 30000
        totalServiceTimeInSeconds: 600
        occupancy: 0.47
        workloadFairness: 0.95
        unserved: []
        suggestions: []
        messages:
        - Solution found in 2.5 seconds
      properties:
        id:
          description: Id of the solve job
          example: 0000-00000-00000-0000
          nullable: true
          type: string
        status:
          allOf:
          - $ref: "#/components/schemas/SolviceStatus"
          description: Status of the Response
          example: SOLVED
          nullable: true
          type: string
        score:
          $ref: "#/components/schemas/OnRouteResponse_score"
        unresolved:
          description: Constraints that are violated
        trips:
          description: "Actual solution: trips per shift/day and per resource"
          items:
            $ref: "#/components/schemas/Trip"
          type: array
        totalWaitTimeInSeconds:
          description: Wait time for all resources
          example: 123
          format: int64
          nullable: true
          type: integer
        occupancy:
          description: How full this schedule is in terms of work time (incl travel)
            over capacity. Eg 80%
          example: 0.8
          format: double
          nullable: true
          type: number
        totalTravelDistanceInMeters:
          description: Travel distance for all resources in meters
          example: 123
          format: int64
          nullable: true
          type: integer
        totalTravelTimeInSeconds:
          description: Travel time for all resources
          example: 123
          format: int64
          nullable: true
          type: integer
        totalServiceTimeInSeconds:
          description: Service time for all resources
          example: 123
          format: int64
          nullable: true
          type: integer
        unserved:
          description: Unserved jobs
          example: "[job-1]"
          items:
            type: string
          nullable: true
          type: array
        unservedReasons:
          additionalProperties:
            type: object
          description: "Reasons why jobs could not be served, mapped by job name"
          example:
            job-1:
            - DATE_TIME_WINDOW_CONFLICT
            - TRIP_CAPACITY
          nullable: true
          type: object
        suggestions:
          description: List of suggested assignments returned by suggest api call
          items:
            $ref: "#/components/schemas/SuggestionDto"
          nullable: true
          type: array
        messages:
          description: Events and warnings generated during the solver execution
          items:
            type: string
          nullable: true
          type: array
        violations:
          items:
            $ref: "#/components/schemas/ViolatedConstraint"
          nullable: true
          type: array
        workloadFairness:
          format: double
          nullable: true
          type: number
      required:
      - trips
      type: object
    Status:
      enum:
      - OK
      - CREATED
      - ACCEPTED
      - NO_CONTENT
      - RESET_CONTENT
      - PARTIAL_CONTENT
      - MULTIPLE_CHOICES
      - MOVED_PERMANENTLY
      - FOUND
      - SEE_OTHER
      - NOT_MODIFIED
      - USE_PROXY
      - TEMPORARY_REDIRECT
      - PERMANENT_REDIRECT
      - BAD_REQUEST
      - UNAUTHORIZED
      - PAYMENT_REQUIRED
      - FORBIDDEN
      - NOT_FOUND
      - METHOD_NOT_ALLOWED
      - NOT_ACCEPTABLE
      - PROXY_AUTHENTICATION_REQUIRED
      - REQUEST_TIMEOUT
      - CONFLICT
      - GONE
      - LENGTH_REQUIRED
      - PRECONDITION_FAILED
      - REQUEST_ENTITY_TOO_LARGE
      - REQUEST_URI_TOO_LONG
      - UNSUPPORTED_MEDIA_TYPE
      - REQUESTED_RANGE_NOT_SATISFIABLE
      - EXPECTATION_FAILED
      - PRECONDITION_REQUIRED
      - TOO_MANY_REQUESTS
      - REQUEST_HEADER_FIELDS_TOO_LARGE
      - UNAVAILABLE_FOR_LEGAL_REASONS
      - INTERNAL_SERVER_ERROR
      - NOT_IMPLEMENTED
      - BAD_GATEWAY
      - SERVICE_UNAVAILABLE
      - GATEWAY_TIMEOUT
      - HTTP_VERSION_NOT_SUPPORTED
      - NETWORK_AUTHENTICATION_REQUIRED
      type: string
    Resource:
      description: "Resource (vehicle, employee)"
      example:
        name: vehicle-1
        shifts:
        - from: 2023-01-13T08:00:00Z
          to: 2023-01-13T17:00:00Z
          start:
            latitude: 51.0543
            longitude: 3.7174
          end:
            latitude: 51.0543
            longitude: 3.7174
          breaks:
          - type: WINDOWED
            duration: 1800
            from: 2023-01-13T12:00:00Z
            to: 2023-01-13T13:00:00Z
        maxDriveTimeInSeconds: 28800
        maxDriveTimeJob: 7200
        tags:
        - plumbing
        - electrical
        category: CAR
        region:
          latitude: 51.05
          longitude: 3.72
        rules:
        - type: MAX_SERVICE_TIME
          value: 28800
          period: WEEK
        capacity:
        - 500
        - 200
        hourlyCost: 25
      properties:
        name:
          description: "Unique identifier for this resource. Used to reference the\
            \ resource in job assignments, relations, and results. Must be unique\
            \ within the request."
          example: vehicle_1
          type: string
        shifts:
          description: "List of work shifts defining when this resource is available\
            \ for job assignments. Each shift specifies working hours, start/end locations,\
            \ breaks, and other constraints. Multiple shifts allow for multi-day planning\
            \ or split-shift schedules. At least one shift is required."
          items:
            $ref: "#/components/schemas/Shift"
          nullable: true
          type: array
        start:
          allOf:
          - $ref: "#/components/schemas/Location"
          deprecated: true
          description: "Default start location for all shifts of this resource. This\
            \ field is deprecated in favor of specifying start locations individually\
            \ for each shift in the shifts array, which provides more flexibility\
            \ for multi-day planning."
          nullable: true
          type: object
        end:
          allOf:
          - $ref: "#/components/schemas/Location"
          deprecated: true
          description: "Default end location for all shifts of this resource. This\
            \ field is deprecated in favor of specifying end locations individually\
            \ for each shift in the shifts array, which provides more flexibility\
            \ for multi-day planning."
          nullable: true
          type: object
        maxDriveTimeInSeconds:
          description: Maximum total driving time allowed for this resource per shift
            or planning period. This constraint prevents excessive driving and ensures
            compliance with regulations or operational policies. Measured in seconds
            and includes all travel between jobs but excludes service time.
        region:
          allOf:
          - $ref: "#/components/schemas/Location"
          description: "Preferred geographic region for this resource's job assignments.\
            \ The solver will try to assign jobs that are geographically closer to\
            \ this location, minimizing travel distance and time. This creates a soft\
            \ constraint that influences job assignment without being mandatory."
          nullable: true
          type: object
        tags:
          description: "List of capability tags that define what types of jobs this\
            \ resource can perform. Tags create matching constraints between jobs\
            \ and resources - only resources with matching tags can be assigned to\
            \ jobs that require those capabilities. For example, 'plumbing' or 'electrical'\
            \ tags."
          items:
            type: string
          nullable: true
          type: array
        category:
          allOf:
          - $ref: "#/components/schemas/Category"
          description: "Transportation mode used by this resource, affecting routing\
            \ calculations and capabilities. CAR provides standard vehicle routing,\
            \ BIKE uses bicycle-friendly routes and speeds, TRUCK uses heavy vehicle\
            \ routing with appropriate restrictions. This is a beta feature."
          enum:
          - CAR
          - BIKE
          - TRUCK
          nullable: true
          type: string
        rules:
          description: "List of periodic constraints that apply to this resource over\
            \ specified time periods. Rules can enforce minimum/maximum work time,\
            \ service time, drive time, or job complexity limits. These constraints\
            \ ensure compliance with labor regulations, operational policies, or capacity\
            \ limitations."
          items:
            $ref: "#/components/schemas/Rule"
          nullable: true
          type: array
        capacity:
          description: "Multi-dimensional capacity limits for this resource, such\
            \ as weight, volume, or item count. Each dimension corresponds to job\
            \ load requirements. For example, [500, 200] might represent 500 kg weight\
            \ capacity and 200 cubic meters volume capacity. Maximum 5 dimensions\
            \ supported."
          example:
          - 500
          - 200
          items:
            format: int32
            type: integer
          maxItems: 5
          nullable: true
          type: array
        hourlyCost:
          description: "Hourly cost rate for this resource in your currency units.\
            \ Used to calculate total labor costs for solutions. Only counts active\
            \ time (driving, servicing, or waiting), not idle time. This enables cost-based\
            \ optimization and financial analysis of routing solutions."
          example: 60
          format: int32
          nullable: true
          type: integer
        compatibleResources:
          description: List of resource names that this resource is compatible to
            work with on linked jobs requiring cooperation
          example:
          - driver2
          - driver3
          items:
            type: string
          nullable: true
          type: array
        maxDriveTime:
          format: int32
          nullable: true
          type: integer
        maxDriveTimeJob:
          format: int32
          nullable: true
          type: integer
      required:
      - name
      - shifts
      type: object
    Job:
      description: A job to be performed by a resource.
      example:
        name: Job-1
        duration: 600
        location:
          latitude: 51.0543
          longitude: 3.7174
        priority: 100
        urgency: 80
        tags:
        - name: plumbing
          needed: true
          preferred: false
        windows:
        - from: 2023-01-13T08:00:00Z
          to: 2023-01-13T12:00:00Z
        durationSquash: 30
        plannedDate: 2023-01-13
        plannedResource: vehicle-1
        plannedArrival: 2023-01-13T09:00:00Z
        hard: true
        hardWeight: 1
        padding: 300
        load:
        - 5
        - 10
        initialResource: vehicle-1
        initialArrival: 2023-01-13T09:00:00Z
        disallowedResources:
        - vehicle-3
        - vehicle-4
      properties:
        name:
          description: Unique description
          example: Job-1
          type: string
        duration:
          description: Service duration of the job
          example: 5
          format: int32
          nullable: true
          type: integer
        location:
          allOf:
          - $ref: "#/components/schemas/Location"
          description: Job location
          nullable: true
          type: object
        priority:
          description: Priority level that influences job selection during optimization.
            Higher priority jobs are more likely to be included in the final solution
            when not all jobs can be assigned due to resource or time constraints.
            The priority is multiplied by job duration to calculate the selection
            weight. Particularly important when partialPlanning is enabled. Default
            value is 1.
          example: 100
          format: int32
          nullable: true
          type: integer
        urgency:
          description: "Urgency level that influences the scheduling order of jobs.\
            \ Higher urgency jobs are preferentially scheduled earlier in the day\
            \ and earlier in the planning period, helping ensure time-critical tasks\
            \ are completed first. This affects the sequence of job execution rather\
            \ than job selection."
          example: 100
          format: int32
          nullable: true
          type: integer
        tags:
          description: "List of skill or capability tags that define resource requirements\
            \ for this job. Tags create hard or soft constraints linking jobs to resources\
            \ with matching capabilities. For example, a 'plumbing' tag ensures only\
            \ resources with plumbing skills can be assigned to plumbing jobs."
          items:
            $ref: "#/components/schemas/Tag"
          nullable: true
          type: array
        rankings:
          description: "List of resource preference rankings for this job. Each ranking\
            \ specifies a resource name and a preference score (1-100), where lower\
            \ values indicate stronger preference. This allows jobs to have preferred\
            \ resources while still allowing assignment to other resources if needed,\
            \ with the preference reflected in the optimization score."
          items:
            $ref: "#/components/schemas/Ranking"
          nullable: true
          type: array
        windows:
          description: "List of time windows during which this job can be started\
            \ or executed. Each window defines a start and end time, creating temporal\
            \ constraints for job scheduling. Multiple windows allow for flexible\
            \ scheduling across different time periods. Jobs can only be assigned\
            \ within these time boundaries."
          items:
            $ref: "#/components/schemas/DateWindow"
          nullable: true
          type: array
        durationSquash:
          description: "Reduced service duration when this job is performed at the\
            \ same location immediately after another job. This optimization recognizes\
            \ that setup time, travel within a building, or equipment preparation\
            \ may be shared between consecutive jobs at the same location. For example,\
            \ if duration=600 and durationSquash=30, the second job at the same location\
            \ takes only 30 seconds instead of 600."
          example: 30
          format: int32
          nullable: true
          type: integer
        plannedDate:
          description: "Fixed date assignment for this job that must be respected\
            \ during optimization. When specified, the job can only be scheduled on\
            \ this specific date, creating a hard constraint that the solver must\
            \ honor. Useful for jobs that are already committed to customers or have\
            \ date-specific requirements."
          example: 2022-03-10
          format: Date string
          nullable: true
          type: string
        plannedResource:
          description: "Fixed resource assignment for this job that must be respected\
            \ during optimization. When specified, only the named resource can be\
            \ assigned to this job, creating a hard constraint. Combined with plannedArrival,\
            \ this allows for pre-committed assignments that the solver must work\
            \ around when optimizing other jobs."
          nullable: true
          type: string
        plannedArrival:
          description: "Fixed arrival time for this job that creates a soft constraint\
            \ during optimization. The solver will try to schedule the job as close\
            \ as possible to this time, with deviations penalized in the score according\
            \ to the plannedWeight. This allows for customer appointment times or\
            \ preferred scheduling while maintaining optimization flexibility."
          example: 2023-01-13T09:00:00Z
          format: ISO8601 datetime string
          nullable: true
          type: string
        hard:
          description: "In the case of partialPlanning planning, this indicates whether\
            \ this order should be integrated into the planning or not."
          example: true
          nullable: true
          type: boolean
        hardWeight:
          description: "In the case of partialPlanning planning, this indicates the\
            \ weight of this order."
          example: 1
          format: int32
          nullable: true
          type: integer
        padding:
          description: Padding time before and after the job. In seconds
          example: 300
          format: int32
          nullable: true
          type: integer
        load:
          description: Load
          example:
          - 5
          - 10
          items:
            format: int32
            type: integer
          nullable: true
          type: array
        allowedResources:
          deprecated: true
          description: List of vehicle names that are allowed to be assigned to this
            order.
          items:
            type: string
          nullable: true
          type: array
        initialResource:
          description: "Warm start for the assigned resource: name of the vehicle\
            \ to which this job is planned. Use this to speed up the solver and to\
            \ start from an initial solution."
          nullable: true
          type: string
        initialArrival:
          description: Warm start for the arrival time. Use this to speed up the solver
            and to start from an initial solution.
          example: 2023-01-13T09:00
          format: ISO8601 datetime string
          nullable: true
          type: string
        disallowedResources:
          description: List of vehicle names that are allowed to be assigned to this
            order.
          items:
            type: string
          nullable: true
          type: array
        complexity:
          description: Complexity of the job
          example: 1
          format: int32
          nullable: true
          type: integer
        resumable:
          description: "Enables job interruption by resource unavailability breaks.\
            \ When true, the job can start before a break, pause during the break,\
            \ and resume afterward. Default: false."
          nullable: true
          type: boolean
        jobTypes:
          description: List of job types that this job represents. Used to enforce
            job type limitations per resource per timeframe.
          example:
          - Initial Appointment
          - Wound Care
          items:
            type: string
          nullable: true
          type: array
      required:
      - name
      type: object
    Options:
      description: Options to tweak the routing engine
      example:
        euclidian: false
        routingEngine: OSM
        partialPlanning: true
        minimizeResources: true
        traffic: 1.1
        polylines: true
        fairWorkloadPerTrip: false
        fairWorkloadPerResource: false
        workloadSensitivity: 0.1
        snapUnit: 300
        maxSuggestions: 3
        onlyFeasibleSuggestions: true
        explanation:
          enabled: true
          filterHardConstraints: true
      properties:
        euclidian:
          description: "Use euclidean distance calculations for travel time and distance\
            \ instead of real road networks. When true, straight-line distances are\
            \ used which is faster but less accurate. When false (default), routing\
            \ engines like OSM, TomTom, or Google provide real road distances and\
            \ travel times."
          example: false
          nullable: true
          type: boolean
        routingEngine:
          allOf:
          - $ref: "#/components/schemas/RoutingEngine"
          description: "The routing engine used for calculating real-world distances\
            \ and travel times. OSM (OpenStreetMaps) is free but basic, TomTom and\
            \ Google provide more accurate traffic data and routing but require API\
            \ keys. Only effective when euclidean is false."
          nullable: true
          type: string
        partialPlanning:
          description: "Allow the solver to create solutions where not all jobs are\
            \ assigned to resources. When true (default), the solver will assign as\
            \ many jobs as possible while respecting constraints. When false, the\
            \ solver will only accept solutions where all jobs are assigned, which\
            \ may result in infeasible solutions."
          example: true
          nullable: true
          type: boolean
        minimizeResources:
          description: "Primary optimization objective. When true, the solver prioritizes\
            \ using fewer resources (vehicles/drivers) even if it increases total\
            \ travel time. When false, the solver prioritizes minimizing total travel\
            \ time even if it requires more resources. This fundamentally changes\
            \ the optimization strategy."
          example: true
          nullable: true
          type: boolean
        traffic:
          description: "Global traffic multiplier applied to all travel times. A value\
            \ of 1.1 increases travel times by 10% to account for traffic congestion.\
            \ For real-time traffic data, use TomTom or Google routing engines. This\
            \ is a simple approximation for scenarios where precise traffic data is\
            \ unavailable."
          example: 1.1
          format: double
          nullable: true
          type: number
        polylines:
          description: "Generate detailed route polylines (encoded route geometries)\
            \ for each trip segment. When true, the response includes polyline data\
            \ that can be used to draw routes on maps. This increases processing time\
            \ and response size but provides visual route information for mapping\
            \ applications."
          example: true
          nullable: true
          type: boolean
        fairWorkloadPerTrip:
          description: "Enable workload balancing across all resources and all days/trips.\
            \ When true, the solver attempts to distribute service time evenly across\
            \ all resources and time periods, preventing overloading of specific resources\
            \ or days. The effectiveness is controlled by `Weights.workloadSpreadWeight`\
            \ and `options.workloadSensitivity`."
          example: false
          nullable: true
          type: boolean
        fairWorkloadPerResource:
          description: "Enable workload balancing across different days for each individual\
            \ resource. When true, the solver ensures that each resource's workload\
            \ is distributed evenly across their available days, preventing some days\
            \ from being overloaded while others are underutilized. Works in conjunction\
            \ with `Weights.workloadSpreadWeight` and `options.workloadSensitivity`."
          example: false
          nullable: true
          type: boolean
        snapUnit:
          description: "Time granularity in seconds for arrival time snapping. All\
            \ calculated arrival times are rounded up to the nearest multiple of this\
            \ value. For example, with snapUnit=300 (5 minutes), an arrival time of\
            \ 08:32 becomes 08:35. This helps create more practical schedules by avoiding\
            \ precise timings that are difficult to follow in real operations. The\
            \ snapping affects score calculation during optimization."
          example: 300
          format: int32
          nullable: true
          type: integer
        maxSuggestions:
          description: "Maximum number of alternative assignment suggestions to return\
            \ when using the suggestion endpoint. The solver generates multiple assignment\
            \ options for unassigned jobs, ranked by quality. A value of 0 (default)\
            \ returns all possible suggestions, while values 1-5 limit the results\
            \ to the best alternatives. Higher values increase response time but provide\
            \ more options."
          format: int32
          maximum: 5
          minimum: 0
          nullable: true
          type: integer
        onlyFeasibleSuggestions:
          description: "Filter suggestions based on feasibility. When true (default),\
            \ only suggestions that don't violate hard constraints are returned if\
            \ the initial plan is feasible. If the initial plan is infeasible, only\
            \ suggestions that don't worsen the infeasibility are returned. When false,\
            \ all suggestions are returned regardless of feasibility, which may include\
            \ constraint violations."
          example: true
          nullable: true
          type: boolean
        workloadSensitivity:
          format: double
          nullable: true
          type: number
        explanation:
          allOf:
          - $ref: "#/components/schemas/ExplanationOptions"
          nullable: true
          type: object
        fairComplexityPerTrip:
          nullable: true
          type: boolean
        fairComplexityPerResource:
          nullable: true
          type: boolean
      type: object
    Weights:
      description: OnRoute Weights
      example:
        priorityWeight: 100
        workloadSpreadWeight: 10
        travelTimeWeight: 1
        plannedWeight: 1000
        asapWeight: 5
        minimizeResourcesWeight: 3600
        allowedResourcesWeight: 500
        waitTimeWeight: 1
        urgencyWeight: 50
        driveTimeWeight: 1
      properties:
        priorityWeight:
          description: Weight modifier for job priority constraints. Higher values
            make the solver more likely to include high-priority jobs in the solution
            when not all jobs can be assigned. This affects job selection probability
            but not scheduling order. The weight is multiplied by the job's priority
            value and duration.
          example: 100
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        workloadSpreadWeight:
          description: "Weight modifier for workload balancing across resources and\
            \ time periods. Higher values make the solver more aggressive about equalizing\
            \ service time distribution. Works with fairWorkloadPerTrip and fairWorkloadPerResource\
            \ options, and is sensitive to the workloadSensitivity parameter."
          example: 10
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        travelTimeWeight:
          description: "Weight modifier for total travel time optimization. This is\
            \ the baseline weight (typically 1) against which all other weights are\
            \ compared. Higher values make the solver more aggressive about minimizing\
            \ travel time, potentially at the expense of other objectives."
          example: 1
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        plannedWeight:
          description: Weight modifier for deviations from planned arrivals and resource
            assignments. Higher values make the solver more reluctant to deviate from
            plannedArrival times and plannedResource assignments. This is crucial
            for maintaining customer appointments and commitments.
          example: 1000
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        asapWeight:
          description: "Weight modifier for scheduling jobs as early as possible within\
            \ their time windows and resource availability. Higher values push jobs\
            \ toward the beginning of shifts and planning periods, useful for front-loading\
            \ work or maximizing completion rates."
          example: 5
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        minimizeResourcesWeight:
          description: Weight modifier for minimizing the number of active resources
            per day/trip. The weight is measured in the same units as travel time
            - a weight of 3600 means using an additional resource is equivalent to
            1 hour of travel time. Higher values encourage consolidation of jobs onto
            fewer resources.
          example: 3600
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        allowedResourcesWeight:
          description: "Weight modifier for soft violations of resource assignment\
            \ constraints. When jobs have allowedResources restrictions and they cannot\
            \ be satisfied as hard constraints, this weight determines the penalty\
            \ for assigning jobs to non-allowed resources."
          example: 500
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        waitTimeWeight:
          description: Weight modifier for total waiting time across all resources.
            Waiting time occurs when resources arrive at jobs before their time windows
            open or when they have idle time between jobs. Higher values make the
            solver more aggressive about minimizing idle time.
          example: 1
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        urgencyWeight:
          description: Weight modifier for job urgency constraints. Higher values
            make the solver more aggressive about scheduling urgent jobs earlier in
            the day and planning period. This affects the sequence and timing of job
            execution based on their urgency values.
          example: 50
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        driveTimeWeight:
          description: "Weight modifier for total driving time across all resources.\
            \ Similar to travelTimeWeight but focuses specifically on driving time\
            \ violations or constraints. Higher values make the solver more concerned\
            \ with minimizing driving time, useful for fuel efficiency or driver fatigue\
            \ management."
          example: 1
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
        rankingWeight:
          description: "Weight modifier for resource ranking preferences defined in\
            \ job rankings. Higher values make the solver more aggressive about assigning\
            \ jobs to their preferred (lower-ranked) resources, even if it increases\
            \ travel time or other costs. This helps maintain service quality by using\
            \ optimal resource assignments."
          example: 10
          format: int32
          maximum: 1000
          minimum: 0
          nullable: true
          type: integer
      type: object
    CustomDistanceMatrices:
      description: Custom distance matrix configuration for multi-profile and multi-slice
        scenarios
      example:
        profileMatrices:
          CAR:
            "6": matrix-car-morning-123
            "9": matrix-car-midday-456
            "16": matrix-car-evening-789
          TRUCK:
            "6": matrix-truck-morning-abc
            "9": matrix-truck-midday-def
        matrixServiceUrl: https://custom-matrix-service.com/api
      properties:
        profileMatrices:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          description: "Map of vehicle profile names (CAR, BIKE, TRUCK) to time slice\
            \ hour mappings. Each time slice hour maps to a matrix ID that should\
            \ be fetched from the distance matrix service. Time slice hours correspond\
            \ to: 6=MORNING_RUSH, 9=MORNING, 12=MIDDAY, 14=AFTERNOON, 16=EVENING_RUSH,\
            \ 20=NIGHT."
          nullable: true
          type: object
        matrixServiceUrl:
          description: "Optional URL for external distance matrix service endpoint.\
            \ If not provided, uses the default system service."
          nullable: true
          type: string
      type: object
    Relation:
      description: Relation between two jobs.
      example:
        type: SEQUENCE
        jobs:
        - Job-1
        - Job-2
        resource: vehicle-1
        minTimeInterval: 0
        maxTimeInterval: 3600
        partialPlanning: false
        maxWaitingTime: 1200
        timeInterval: FROM_ARRIVAL
        tags:
        - urgent
      properties:
        type:
          allOf:
          - $ref: "#/components/schemas/RelationType"
          description: "Type of relationship constraint between jobs. SAME_TRIP: jobs\
            \ must be on the same vehicle/day. SEQUENCE: jobs must be done in order\
            \ with optional time intervals. DIRECT_SEQUENCE: jobs must be consecutive\
            \ with no other jobs between them. NEIGHBOR: jobs must be geographically\
            \ close. SAME_TIME: jobs must be done simultaneously. PICKUP_AND_DELIVERY:\
            \ first job is pickup, second is delivery. SAME_RESOURCE: jobs must use\
            \ the same resource. SAME_DAY: jobs must be on the same day. GROUP_SEQUENCE:\
            \ jobs with matching tags must be in sequence."
          pattern: \S
          type: string
        jobs:
          description: "List of job names involved in this relation. For sequence-based\
            \ relations, the order matters - jobs will be executed in the order specified.\
            \ For other relations, order may be irrelevant. All job names must exist\
            \ in the request's jobs list."
          example:
          - JOB-1
          - JOB-2
          items:
            type: string
          type: array
        resource:
          description: "Optional resource constraint for this relation. When specified,\
            \ all jobs in the relation must be assigned to this specific resource.\
            \ This creates a hard constraint that can help enforce resource-specific\
            \ workflows or capabilities."
          example: vehicle-1
          nullable: true
          type: string
        minTimeInterval:
          description: "Minimum time interval in seconds that must pass between consecutive\
            \ jobs in sequence relations. This ensures adequate time for travel, setup,\
            \ or processing between related jobs. Only applies to SEQUENCE, DIRECT_SEQUENCE,\
            \ and SAME_TIME relations."
          example: 0
          format: int32
          nullable: true
          type: integer
        maxTimeInterval:
          description: "Maximum time interval in seconds allowed between consecutive\
            \ jobs in sequence relations. This prevents excessive delays between related\
            \ jobs and ensures timely completion of job sequences. Only applies to\
            \ SEQUENCE, DIRECT_SEQUENCE, and SAME_TIME relations."
          example: 3600
          format: int32
          nullable: true
          type: integer
        partialPlanning:
          description: "Allows the solver to include only some jobs from this relation\
            \ in the final solution when the full relation cannot be satisfied due\
            \ to constraints. When false, either all jobs in the relation are assigned\
            \ or none are, maintaining the relation's integrity."
          example: false
          type: boolean
        maxWaitingTime:
          description: Maximum waiting time in seconds between jobs in a SAME_TIME
            relation. This defines how much time synchronization tolerance is allowed
            - jobs can start within this time window of each other. Defaults to 1200
            seconds (20 minutes) if not specified.
          example: 1200
          format: int32
          nullable: true
          type: integer
        timeInterval:
          allOf:
          - $ref: "#/components/schemas/TimeInterval"
          description: Reference point for measuring time intervals between jobs in
            sequence relations. FROM_ARRIVAL (default) measures from when the first
            job's service begins to when the second job's service begins. FROM_DEPARTURE
            measures from when the first job's service ends to when the second job's
            service begins.
          type: string
        tags:
          description: List of tag names used to define job groups in GROUP_SEQUENCE
            relations. Jobs with matching tags form groups that must be executed in
            sequence. This allows for complex sequencing rules based on job characteristics
            rather than explicit job names.
          example:
          - urgent
          - morning
          items:
            type: string
          nullable: true
          type: array
        enforceCompatibility:
          description: "When true, enforces resource compatibility checking for SAME_TIME\
            \ relations. Only compatible resources can work together on linked jobs."
          type: boolean
        hardMinWait:
          description: "When true (default), the minimum time interval constraint\
            \ is enforced as a hard constraint. When false, it becomes a soft constraint\
            \ that can be violated with penalty. Useful for SEQUENCE and SAME_TIME\
            \ relations where timing flexibility is acceptable."
          example: true
          type: boolean
        weight:
          description: Weight modifier for this relation. This can be used to modify
            the weight of a relation to make it more or less important than other
            relations.
          example: 1
          format: int32
          nullable: true
          type: integer
      required:
      - jobs
      - timeInterval
      - type
      type: object
    Message:
      description: Error or warning message
      example:
        code: 6
        message: message
      properties:
        code:
          description: Error code
          format: int32
          nullable: false
          type: integer
        message:
          description: Error message
          nullable: false
          type: string
      required:
      - message
      type: object
    RoutingConflict:
      description: Conflicts in the solution
      example:
        constraint: TIME_WINDOW_CONFLICT
        score: "-1000"
        job: Job-1
        resource: vehicle-1
      nullable: true
      properties:
        constraint:
          description: Constraint type.
          nullable: false
          type: string
        score:
          description: Score impact of this conflict.
          nullable: false
          type: string
        job:
          description: Job id.
          nullable: true
          type: string
        resource:
          description: Resource id.
          nullable: true
          type: string
        tag:
          description: Tag id.
          nullable: true
          type: string
        relation:
          nullable: true
          type: string
      required:
      - constraint
      - score
      type: object
    Unresolved:
      description: Unresolved constraints in the solution
      example:
        constraint: TRAVEL_TIME
        score: "-1500"
      nullable: true
      properties:
        constraint:
          allOf:
          - $ref: "#/components/schemas/OnrouteConstraint"
          description: Constraint type.
          nullable: false
          type: string
        score:
          description: Score impact of this conflict.
          nullable: false
          type: string
      required:
      - constraint
      - score
      type: object
    OnrouteConstraint:
      description: Types of constraints that can be violated in a routing solution
      enum:
      - TRIP_CAPACITY
      - RESOURCE_CAPACITY
      - RESOURCE_CAPACITY2
      - TRAVEL_TIME
      - TYPE_REQUIREMENT
      - TAG_SOFT
      - TAG_HARD
      - TYPE_REQUIREMENT_SOFT
      - END_LOCATION_TRAVEL_TIME
      - TIME_WINDOW_CONFLICT
      - SHIFT_END_CONFLICT
      - OVERTIME_END_CONFLICT
      - RESOURCE_USAGE
      - URGENCY
      - PREFERRED_RESOURCE_CONFLICT
      - ALLOWED_RESOURCES
      - DISALLOWED_RESOURCES
      - REGION_TIME
      - FAIR_WORK
      - UNSERVED_JOBS
      - RESOURCE_ACTIVATION
      - OPEN_DAYS
      - JOB_PRECEDENCE
      - JOB_DAY_INDEX
      - DATE_TIME_WINDOW_CONFLICT
      - DATE_TIME_WINDOW_CONFLICT_SOFT
      - LINKED_JOB_CONFLICT
      - PLANNED_RESOURCE
      - PLANNED_ARRIVAL
      - PLANNED_DATE
      - WORKING_TIME
      - HARD_JOBS
      - MAX_DRIVE_TIME
      - MAX_DRIVE_TIME_JOB
      - FAIR_TOTAL_WORK
      - RESOURCE_PERIOD_MAX_SERVICE_TIME
      - RESOURCE_PERIOD_MAX_DRIVE_TIME
      - RESOURCE_PERIOD_MAX_WORK_TIME
      - RESOURCE_PERIOD_MIN_SERVICE_TIME
      - RESOURCE_PERIOD_MIN_DRIVE_TIME
      - RESOURCE_PERIOD_MIN_WORK_TIME
      - MINIMISE_TRIP_USAGE
      - DELIVERY_NOT_ON_SAME_VEHICLE
      - DELIVERY_BEFORE_PICKUP
      - SAME_TRIP
      - SEQUENCE
      - SAME_TIME
      - NEIGHBOR
      - DIRECT_SEQUENCE
      - SAME_RESOURCE
      - WAIT_TIME
      - DRIVE_TIME
      - HOURLY_COST
      - RANKING_SOFT
      - FAIR_COMPLEXITY_PER_TRIP
      - FAIR_COMPLEXITY_PER_RESOURCE
      - RESOURCE_PERIOD_MIN_COMPLEXITY
      - RESOURCE_PERIOD_MAX_COMPLEXITY
      - RESOURCE_COMPATIBILITY
      - JOBTYPE_VIOLATION
      example: TRAVEL_TIME
      type: string
    SolviceStatus:
      description: Status of the solve job.
      enum:
      - ERROR
      - QUEUED
      - SOLVING
      - SOLVED
      type: string
    Trip:
      description: Trip for a resource. Holds a list of visits for a resource and
        a date.
      example:
        resource: vehicle-1
        date: 2023-01-13T00:00:00Z
        departureTime: 2023-01-13T08:00:00Z
        visits:
        - job: Job-1
          arrival: 2023-01-13T08:30:00Z
          serviceTime: 600
          travelTime: 1800
          distance: 15000
          location:
            latitude: 51.0543
            longitude: 3.7174
          waitTime: 0
        - job: Job-2
          arrival: 2023-01-13T09:45:00Z
          serviceTime: 900
          travelTime: 900
          distance: 8000
          location:
            latitude: 51.05
            longitude: 3.72
          waitTime: 0
        waitTime: 0
        travelTime: 2700
        distance: 23000
        workTime: 4200
        serviceTime: 1500
        polyline: _p~iF~ps|U_ulLnnqC_mqNvxq`@
        occupancy: 0.47
      properties:
        visits:
          description: List of visits for a resource and a date.
          items:
            $ref: "#/components/schemas/Visit"
          type: array
        resource:
          description: Resource
          example: resource-1
          nullable: true
          type: string
        date:
          description: Date
          example: 2021-01-01
          format: ISO8601 date string
          nullable: true
          type: string
        departureTime:
          description: Departure date-time
          example: 2021-01-01T08:00:00
          format: ISO8601 datetime string
          nullable: true
          type: string
        waitTime:
          description: Wait time in seconds
          example: 0
          format: int64
          nullable: true
          type: integer
        travelTime:
          description: Travel time in seconds
          example: 123
          format: int64
          nullable: true
          type: integer
        workTime:
          description: Work time in seconds
          example: 123
          format: int64
          nullable: true
          type: integer
        serviceTime:
          description: Service time in seconds
          example: 123
          format: int64
          nullable: true
          type: integer
        polyline:
          description: Polyline of the trip
          example: polyline
          nullable: true
          type: string
        occupancy:
          description: How full this trip is in terms of work time over capacity.
            Eg 80%
          example: 0.8
          format: double
          nullable: true
          type: number
        start:
          allOf:
          - $ref: "#/components/schemas/Visit"
          nullable: true
          type: object
        end:
          allOf:
          - $ref: "#/components/schemas/Visit"
          nullable: true
          type: object
        distance:
          format: int64
          nullable: true
          type: integer
      required:
      - visits
      type: object
    SuggestionDto:
      properties:
        score:
          $ref: "#/components/schemas/Score"
        assignments:
          items:
            $ref: "#/components/schemas/JobAssignment"
          type: array
      required:
      - assignments
      - score
      type: object
    ViolatedConstraint:
      description: "A constraint that is broken in the current solution with a certain\
        \ value (penalty) and a certain level (hard, soft, medium)."
      properties:
        name:
          description: Name of the constraint.
          example: maxDistance
          nullable: true
          type: string
        value:
          description: "Value of the unresolved constraint. The higher, the more deviation\
            \ from perfection this constraint has."
          example: 100
          format: int32
          nullable: true
          type: integer
        level:
          allOf:
          - $ref: "#/components/schemas/Level"
          description: Level of unresolved constraint.
          example: "[HARD, MEDIUM, SOFT]"
          nullable: true
          type: string
      required:
      - level
      - name
      - value
      type: object
    Shift:
      description: Shift definition. Every potential shift of a resource should be
        defined here. Every shift can be a trip.
      example:
        from: 2023-01-13T08:00:00Z
        to: 2023-01-13T17:00:00Z
        start:
          latitude: 51.0543
          longitude: 3.7174
        end:
          latitude: 51.05
          longitude: 3.72
        ignoreTravelTimeToFirstJob: false
        ignoreTravelTimeFromLastJob: false
        overtimeEnd: 2023-01-13T19:00:00Z
        breaks:
        - type: WINDOWED
          duration: 1800
          from: 2023-01-13T12:00:00Z
          to: 2023-01-13T13:00:00Z
        tags:
        - delivery
        - installation
      properties:
        from:
          description: 'Start of the shift datetime '
          example: 2023-01-13T08:00:00
          format: ISO8601 datetime string
          type: string
        to:
          description: End of the shift datetime
          example: 2023-01-13T16:00:00
          format: ISO8601 datetime string
          type: string
        start:
          allOf:
          - $ref: "#/components/schemas/Location"
          description: Start location
          nullable: true
          type: object
        end:
          allOf:
          - $ref: "#/components/schemas/Location"
          description: End location
          nullable: true
          type: object
        ignoreTravelTimeToFirstJob:
          description: Ignore the travel time from the start location to the first
            order
          nullable: true
          type: boolean
        ignoreTravelTimeFromLastJob:
          description: Ignore the travel time from the last order to the optional
            end location
          nullable: true
          type: boolean
        overtime:
          deprecated: true
          description: Can go into overtime.
        overtimeEnd:
          description: Maximum overtime time.
          example: 2022-03-10T12:15:50-04:00
          format: ISO8601 datetime string
          nullable: true
          type: string
        breaks:
          description: Windowed breaks definitions.
          items:
            $ref: "#/components/schemas/BreakDto1"
          nullable: true
          type: array
        tags:
          description: Shift tags will ensure that this resource can only do Jobs
            of this tag during this shift. This allows for tag based availability.
          items:
            type: string
          nullable: true
          type: array
        jobTypeLimitations:
          additionalProperties:
            format: int32
            type: integer
          description: Map of job type to maximum count allowed per shift. Null means
            no limitations.
          example:
            Initial Appointment: 2
            Wound Care: 1
          nullable: true
          type: object
      required:
      - from
      - to
      type: object
    Location:
      description: Geographical Location in WGS-84
      properties:
        latitude:
          description: Latitude
          example: 50.0987624
          format: double
          type: number
        longitude:
          description: Longitude
          example: 4.93849204
          format: double
          type: number
      type: object
    Category:
      description: Transportation type for the resource
      enum:
      - CAR
      - BIKE
      - TRUCK
      example: CAR
      type: string
    Rule:
      description: Periodic time rule for a resource
      example:
        period:
          from: 2024-01-01T08:00:00Z
          to: 2024-01-07T17:00:00Z
        minWorkTime: 14400
        maxWorkTime: 28800
        minServiceTime: 7200
        maxServiceTime: 21600
        minDriveTime: 3600
        maxDriveTime: 10800
      properties:
        period:
          allOf:
          - $ref: "#/components/schemas/PeriodDto"
          description: "Period of the rule. If null, then it encompasses the entire\
            \ period."
          nullable: false
          type: object
        minWorkTime:
          description: Minimum work time in seconds. Work time is service time + drive/travel
            time.
          format: int32
          nullable: true
          type: integer
        maxWorkTime:
          description: Maximum work time in seconds. Work time is service time + drive/travel
            time.
          format: int32
          nullable: true
          type: integer
        minServiceTime:
          description: Minimum service time in seconds
          format: int32
          nullable: true
          type: integer
        maxServiceTime:
          description: Maximum service time in seconds
          format: int32
          nullable: true
          type: integer
        minDriveTime:
          description: Minimum drive time in seconds
          format: int32
          nullable: true
          type: integer
        maxDriveTime:
          description: Maximum drive time in seconds
          format: int32
          nullable: true
          type: integer
        minJobComplexity:
          description: Sum of the complexity of the jobs completed by this resource
            should reach this value
          format: int32
          nullable: true
          type: integer
        maxJobComplexity:
          description: Sum of the complexity of the jobs completed by this resource
            should not go over this value
          format: int32
          nullable: true
          type: integer
        jobTypeLimitations:
          additionalProperties:
            format: int32
            type: integer
          description: Map of job type to maximum count allowed per period. Null means
            no limitations.
          example:
            Initial Appointment: 10
            Wound Care: 5
          nullable: true
          type: object
      type: object
    Tag:
      description: A tag is a match between a `Job` and a `Resource`.
      example:
        name: certified-technician
        hard: false
        weight: 300
      properties:
        name:
          description: "Tag name that defines a skill, capability, or requirement.\
            \ This creates a matching constraint between jobs and resources - only\
            \ resources with this tag can be assigned to jobs that require it. Common\
            \ examples include 'plumbing', 'electrical', 'certified-technician', or\
            \ 'heavy-lifting'."
          example: certified-technician
          type: string
        hard:
          default: true
          description: "Constraint type for this tag requirement. When true (default),\
            \ creates a hard constraint - jobs can only be assigned to resources with\
            \ matching tags. When false, creates a soft constraint - jobs prefer resources\
            \ with matching tags but can be assigned to others if needed, with a score\
            \ penalty."
          example: false
          nullable: true
          type: boolean
        weight:
          description: Penalty weight applied when this tag constraint is violated
            (soft constraints only). The weight is measured in the same units as travel
            time - a weight of 3600 means violating this tag constraint is equivalent
            to 1 hour of additional travel time. Higher weights make the constraint
            more important.
          example: 300
          format: int32
          nullable: true
          type: integer
      required:
      - name
      type: object
    Ranking:
      description: A ranking is a measure of the affinity of a `Resource` towards
        a `Job`.
      example:
        name: certified-technician
        ranking: 5
      properties:
        name:
          description: Name of the resource being ranked for this job. Must exactly
            match a resource name defined in the request's resources list. This creates
            a preference relationship between the job and the specified resource.
          example: vehicle-1
          type: string
        ranking:
          description: "Preference ranking score for this resource (1-100). Lower\
            \ values indicate stronger preference - rank 1 is most preferred, rank\
            \ 100 is least preferred. The solver will try to assign jobs to higher-ranked\
            \ (lower-numbered) resources when possible, with the preference strength\
            \ controlled by the rankingWeight in the weights configuration."
          example: 5
          format: int32
          maximum: 100
          minimum: 1
          nullable: true
          type: integer
      required:
      - name
      type: object
    DateWindow:
      description: Window in which the job can be executed
      example:
        from: 2024-01-15T09:00:00Z
        to: 2024-01-15T17:00:00Z
        hard: true
        weight: 1
      properties:
        from:
          description: Date time start of window
          example: 2023-01-13T08:00
          format: ISO8601 datetime string
          type: string
        to:
          description: Date time end of window
          example: 2023-01-18T12:00
          format: ISO8601 datetime string
          type: string
        weight:
          default: 1
          description: Weight constraint modifier
          example: 1
          format: int32
          nullable: true
          type: integer
        hard:
          default: true
          description: Hard constraint violation of DateWindow
          example: true
          nullable: true
          type: boolean
      required:
      - from
      - to
      type: object
    RoutingEngine:
      description: The routing engine to use for distance and travel time calculations
      enum:
      - OSM
      - TOMTOM
      - GOOGLE
      - ANYMAP
      example: OSM
      type: string
    ExplanationOptions:
      description: Options to manage the explanation of the solution
      example:
        enabled: true
        filterHardConstraints: true
      properties:
        enabled:
          description: When enabled the explanation will contain a map of all the
            alternative positions for each job
          example: true
          nullable: true
          type: boolean
        filterHardConstraints:
          description: When true the map of alternative positions will contain only
            feasible alternatives
          example: true
          nullable: true
          type: boolean
        onlyUnassigned:
          nullable: true
          type: boolean
      type: object
    RelationType:
      description: Type of relation between jobs
      enum:
      - SAME_TRIP
      - SEQUENCE
      - DIRECT_SEQUENCE
      - SAME_TIME
      - NEIGHBOR
      - PICKUP_AND_DELIVERY
      - SAME_RESOURCE
      - SAME_DAY
      - GROUP_SEQUENCE
      example: SEQUENCE
      type: string
    TimeInterval:
      description: Determines if the time interval between jobs should be measured
        from arrival or departure
      enum:
      - FROM_ARRIVAL
      - FROM_DEPARTURE
      example: FROM_ARRIVAL
      type: string
    Visit:
      description: "Single visit for a resource. Holds information of the actual arrival\
        \ time, the job, the location and the latlng."
      example:
        job: Job-1
        arrival: 2023-01-13T08:30:00Z
        serviceTime: 600
        travelTime: 1800
        distance: 15000
        activity: service
        location:
          latitude: 51.0543
          longitude: 3.7174
        latlng:
        - 51.0543
        - 3.7174
        breakTime: 0
        waitTime: 0
      properties:
        arrival:
          allOf:
          - $ref: "#/components/schemas/ZonedDateTime"
          description: Actual arrival date-time
          nullable: true
          type: string
        serviceTime:
          description: Total service time of that job in seconds
          format: int64
          nullable: true
          type: integer
        travelTime:
          description: Total travel time to that job in seconds
          format: int64
          nullable: true
          type: integer
        distance:
          description: Total travel distance to that job in meters
          format: int64
          nullable: true
          type: integer
        job:
          description: Job
          nullable: true
          type: string
        activity:
          description: 'The activity to '
          nullable: true
          type: string
        location:
          allOf:
          - $ref: "#/components/schemas/Location"
          description: Location with lat/lon
          nullable: true
          type: object
        latlon:
          description: "Snapped Latlng. When we get your lat/lon in input, we snap\
            \ it on our map to a valid point in the graph. We return all snapped points."
          items:
            format: double
            type: number
          nullable: true
          type: array
        snappedLocation:
          allOf:
          - $ref: "#/components/schemas/Location"
          description: "Snapped location. When we get your lat/lon in input, we snap\
            \ it on our map to a valid point in the graph. We return all snapped points."
          nullable: true
          type: object
        breakTime:
          description: Break time in seconds
          format: int32
          nullable: true
          type: integer
        waitTime:
          description: Wait time in seconds
          format: int64
          nullable: true
          type: integer
      type: object
    Score:
      description: The score of a solution shows how good this solution is w.r.t all
        the constraints. All solvers try to maximize the score.
      nullable: false
      properties:
        hardScore:
          description: The score of the constraints that are hard. This should be
            0 in order to be feasible.
          format: int64
          nullable: true
          type: integer
        mediumScore:
          description: The score of the constraints that are medium.
          format: int64
          nullable: true
          type: integer
        softScore:
          description: The score of the constraints that are soft.
          format: int64
          nullable: true
          type: integer
        feasible:
          nullable: true
          type: boolean
      type: object
    JobAssignment:
      description: "Assignment for a job to a resource. Holds information of the actual\
        \ arrival time, the job, the resource and the suggested arrival time."
      example:
        job: Job-1
        resource: vehicle-1
        suggestedArrival: 2023-01-13T09:30:00Z
        latestArrival: 2023-01-13T10:00:00Z
        executedAfter: Job-0
        suggestedInitialArrival: 2023-01-13T09:00:00Z
        score:
          hard: 0
          soft: -1500
          feasible: true
        violations:
        - constraint: TRAVEL_TIME
          score: "-1500"
      properties:
        job:
          description: Job
          type: string
        resource:
          description: Resource
          type: string
        suggestedArrival:
          description: Suggested arrival date-time
          example: 2022-03-10T12:15:50-04:00
          format: ISO8601 datetime string
          nullable: true
          type: string
        latestArrival:
          description: Latest arrival date-time
          example: 2022-03-10T12:15:50-04:00
          format: ISO8601 datetime string
          nullable: true
          type: string
        executedAfter:
          description: Executed after date-time
          type: string
        score:
          $ref: "#/components/schemas/JobAssignment_score"
        scoreExplanation:
          $ref: "#/components/schemas/JobAssignment_scoreExplanation"
        suggestedInitialArrival:
          allOf:
          - $ref: "#/components/schemas/ZonedDateTime"
          nullable: true
          type: string
        violations:
          items:
            $ref: "#/components/schemas/Unresolved"
          nullable: true
          type: array
      required:
      - executedAfter
      - job
      - resource
      type: object
    Level:
      enum:
      - HARD
      - SOFT
      - MEDIUM
      type: string
    BreakDto1:
      properties:
        type:
          $ref: "#/components/schemas/BreakType"
      required:
      - type
      type: object
    PeriodDto:
      description: Subset of the planning period
      example:
        from: 2024-01-01T08:00:00Z
        to: 2024-01-07T17:00:00Z
      properties:
        from:
          allOf:
          - $ref: "#/components/schemas/ZonedDateTime"
          description: 'Start date-time '
          example: 2007-12-01T08:00:00
          type: string
        end:
          description: 'End date-time '
          example: 2007-12-31T17:00:00
        to:
          example: 2022-03-10T12:15:50-04:00
          format: date-time
          type: string
      required:
      - end
      - from
      - start
      - to
      type: object
    ZonedDateTime:
      example: 2022-03-10T12:15:50-04:00
      format: date-time
      type: string
    BreakType:
      description: Type of break that can be defined for a resource
      enum:
      - WINDOWED
      - DRIVE
      - UNAVAILABILITY
      example: WINDOWED
      type: string
    RoutingExplanation_score:
      description: Score of the solution.
      nullable: true
      properties:
        hardScore:
          description: The score of the constraints that are hard. This should be
            0 in order to be feasible.
          format: int64
          nullable: true
          type: integer
        mediumScore:
          description: The score of the constraints that are medium.
          format: int64
          nullable: true
          type: integer
        softScore:
          description: The score of the constraints that are soft.
          format: int64
          nullable: true
          type: integer
        feasible:
          nullable: true
          type: boolean
      type: object
    OnRouteResponse_score:
      description: Score tells you how good a solution is.
      nullable: true
      properties:
        hardScore:
          description: The score of the constraints that are hard. This should be
            0 in order to be feasible.
          format: int64
          nullable: true
          type: integer
        mediumScore:
          description: The score of the constraints that are medium.
          format: int64
          nullable: true
          type: integer
        softScore:
          description: The score of the constraints that are soft.
          format: int64
          nullable: true
          type: integer
        feasible:
          nullable: true
          type: boolean
      type: object
    JobAssignment_score:
      description: Score of the assignment
      nullable: true
      properties:
        hardScore:
          description: The score of the constraints that are hard. This should be
            0 in order to be feasible.
          format: int64
          nullable: true
          type: integer
        mediumScore:
          description: The score of the constraints that are medium.
          format: int64
          nullable: true
          type: integer
        softScore:
          description: The score of the constraints that are soft.
          format: int64
          nullable: true
          type: integer
        feasible:
          nullable: true
          type: boolean
      type: object
    JobAssignment_scoreExplanation:
      description: Unresolved constraints in this alternative solution
      example:
        constraint: TRAVEL_TIME
        score: "-1500"
      nullable: true
      properties:
        constraint:
          allOf:
          - $ref: "#/components/schemas/OnrouteConstraint"
          description: Constraint type.
          nullable: false
          type: string
        score:
          description: Score impact of this conflict.
          nullable: false
          type: string
      required:
      - constraint
      - score
      type: object
  securitySchemes:
    apikey:
      description: Api Key based authentication (apikey)
      in: header
      name: Authorization
      type: apiKey
