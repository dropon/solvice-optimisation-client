/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Visit type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Visit{}

// Visit Single visit for a resource. Holds information of the actual arrival time, the job, the location and the latlng.
type Visit struct {
	// Actual arrival date-time
	Arrival NullableTime `json:"arrival,omitempty"`
	// Total service time of that job in seconds
	ServiceTime NullableInt64 `json:"serviceTime,omitempty"`
	// Total travel time to that job in seconds
	TravelTime NullableInt64 `json:"travelTime,omitempty"`
	// Total travel distance to that job in meters
	Distance NullableInt64 `json:"distance,omitempty"`
	// Job
	Job NullableString `json:"job,omitempty"`
	// The activity to 
	Activity NullableString `json:"activity,omitempty"`
	// Location with lat/lon
	Location NullableLocation `json:"location,omitempty"`
	// Snapped Latlng. When we get your lat/lon in input, we snap it on our map to a valid point in the graph. We return all snapped points.
	Latlon []float64 `json:"latlon,omitempty"`
	// Snapped location. When we get your lat/lon in input, we snap it on our map to a valid point in the graph. We return all snapped points.
	SnappedLocation NullableLocation `json:"snappedLocation,omitempty"`
	// Break time in seconds
	BreakTime NullableInt32 `json:"breakTime,omitempty"`
	// Wait time in seconds
	WaitTime NullableInt64 `json:"waitTime,omitempty"`
}

// NewVisit instantiates a new Visit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVisit() *Visit {
	this := Visit{}
	return &this
}

// NewVisitWithDefaults instantiates a new Visit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVisitWithDefaults() *Visit {
	this := Visit{}
	return &this
}

// GetArrival returns the Arrival field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetArrival() time.Time {
	if o == nil || IsNil(o.Arrival.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Arrival.Get()
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetArrivalOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Arrival.Get(), o.Arrival.IsSet()
}

// HasArrival returns a boolean if a field has been set.
func (o *Visit) HasArrival() bool {
	if o != nil && o.Arrival.IsSet() {
		return true
	}

	return false
}

// SetArrival gets a reference to the given NullableTime and assigns it to the Arrival field.
func (o *Visit) SetArrival(v time.Time) {
	o.Arrival.Set(&v)
}
// SetArrivalNil sets the value for Arrival to be an explicit nil
func (o *Visit) SetArrivalNil() {
	o.Arrival.Set(nil)
}

// UnsetArrival ensures that no value is present for Arrival, not even an explicit nil
func (o *Visit) UnsetArrival() {
	o.Arrival.Unset()
}

// GetServiceTime returns the ServiceTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetServiceTime() int64 {
	if o == nil || IsNil(o.ServiceTime.Get()) {
		var ret int64
		return ret
	}
	return *o.ServiceTime.Get()
}

// GetServiceTimeOk returns a tuple with the ServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetServiceTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceTime.Get(), o.ServiceTime.IsSet()
}

// HasServiceTime returns a boolean if a field has been set.
func (o *Visit) HasServiceTime() bool {
	if o != nil && o.ServiceTime.IsSet() {
		return true
	}

	return false
}

// SetServiceTime gets a reference to the given NullableInt64 and assigns it to the ServiceTime field.
func (o *Visit) SetServiceTime(v int64) {
	o.ServiceTime.Set(&v)
}
// SetServiceTimeNil sets the value for ServiceTime to be an explicit nil
func (o *Visit) SetServiceTimeNil() {
	o.ServiceTime.Set(nil)
}

// UnsetServiceTime ensures that no value is present for ServiceTime, not even an explicit nil
func (o *Visit) UnsetServiceTime() {
	o.ServiceTime.Unset()
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetTravelTime() int64 {
	if o == nil || IsNil(o.TravelTime.Get()) {
		var ret int64
		return ret
	}
	return *o.TravelTime.Get()
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetTravelTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TravelTime.Get(), o.TravelTime.IsSet()
}

// HasTravelTime returns a boolean if a field has been set.
func (o *Visit) HasTravelTime() bool {
	if o != nil && o.TravelTime.IsSet() {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given NullableInt64 and assigns it to the TravelTime field.
func (o *Visit) SetTravelTime(v int64) {
	o.TravelTime.Set(&v)
}
// SetTravelTimeNil sets the value for TravelTime to be an explicit nil
func (o *Visit) SetTravelTimeNil() {
	o.TravelTime.Set(nil)
}

// UnsetTravelTime ensures that no value is present for TravelTime, not even an explicit nil
func (o *Visit) UnsetTravelTime() {
	o.TravelTime.Unset()
}

// GetDistance returns the Distance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetDistance() int64 {
	if o == nil || IsNil(o.Distance.Get()) {
		var ret int64
		return ret
	}
	return *o.Distance.Get()
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetDistanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distance.Get(), o.Distance.IsSet()
}

// HasDistance returns a boolean if a field has been set.
func (o *Visit) HasDistance() bool {
	if o != nil && o.Distance.IsSet() {
		return true
	}

	return false
}

// SetDistance gets a reference to the given NullableInt64 and assigns it to the Distance field.
func (o *Visit) SetDistance(v int64) {
	o.Distance.Set(&v)
}
// SetDistanceNil sets the value for Distance to be an explicit nil
func (o *Visit) SetDistanceNil() {
	o.Distance.Set(nil)
}

// UnsetDistance ensures that no value is present for Distance, not even an explicit nil
func (o *Visit) UnsetDistance() {
	o.Distance.Unset()
}

// GetJob returns the Job field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetJob() string {
	if o == nil || IsNil(o.Job.Get()) {
		var ret string
		return ret
	}
	return *o.Job.Get()
}

// GetJobOk returns a tuple with the Job field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetJobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Job.Get(), o.Job.IsSet()
}

// HasJob returns a boolean if a field has been set.
func (o *Visit) HasJob() bool {
	if o != nil && o.Job.IsSet() {
		return true
	}

	return false
}

// SetJob gets a reference to the given NullableString and assigns it to the Job field.
func (o *Visit) SetJob(v string) {
	o.Job.Set(&v)
}
// SetJobNil sets the value for Job to be an explicit nil
func (o *Visit) SetJobNil() {
	o.Job.Set(nil)
}

// UnsetJob ensures that no value is present for Job, not even an explicit nil
func (o *Visit) UnsetJob() {
	o.Job.Unset()
}

// GetActivity returns the Activity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetActivity() string {
	if o == nil || IsNil(o.Activity.Get()) {
		var ret string
		return ret
	}
	return *o.Activity.Get()
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetActivityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Activity.Get(), o.Activity.IsSet()
}

// HasActivity returns a boolean if a field has been set.
func (o *Visit) HasActivity() bool {
	if o != nil && o.Activity.IsSet() {
		return true
	}

	return false
}

// SetActivity gets a reference to the given NullableString and assigns it to the Activity field.
func (o *Visit) SetActivity(v string) {
	o.Activity.Set(&v)
}
// SetActivityNil sets the value for Activity to be an explicit nil
func (o *Visit) SetActivityNil() {
	o.Activity.Set(nil)
}

// UnsetActivity ensures that no value is present for Activity, not even an explicit nil
func (o *Visit) UnsetActivity() {
	o.Activity.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetLocation() Location {
	if o == nil || IsNil(o.Location.Get()) {
		var ret Location
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetLocationOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *Visit) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableLocation and assigns it to the Location field.
func (o *Visit) SetLocation(v Location) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *Visit) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *Visit) UnsetLocation() {
	o.Location.Unset()
}

// GetLatlon returns the Latlon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetLatlon() []float64 {
	if o == nil {
		var ret []float64
		return ret
	}
	return o.Latlon
}

// GetLatlonOk returns a tuple with the Latlon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetLatlonOk() ([]float64, bool) {
	if o == nil || IsNil(o.Latlon) {
		return nil, false
	}
	return o.Latlon, true
}

// HasLatlon returns a boolean if a field has been set.
func (o *Visit) HasLatlon() bool {
	if o != nil && !IsNil(o.Latlon) {
		return true
	}

	return false
}

// SetLatlon gets a reference to the given []float64 and assigns it to the Latlon field.
func (o *Visit) SetLatlon(v []float64) {
	o.Latlon = v
}

// GetSnappedLocation returns the SnappedLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetSnappedLocation() Location {
	if o == nil || IsNil(o.SnappedLocation.Get()) {
		var ret Location
		return ret
	}
	return *o.SnappedLocation.Get()
}

// GetSnappedLocationOk returns a tuple with the SnappedLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetSnappedLocationOk() (*Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnappedLocation.Get(), o.SnappedLocation.IsSet()
}

// HasSnappedLocation returns a boolean if a field has been set.
func (o *Visit) HasSnappedLocation() bool {
	if o != nil && o.SnappedLocation.IsSet() {
		return true
	}

	return false
}

// SetSnappedLocation gets a reference to the given NullableLocation and assigns it to the SnappedLocation field.
func (o *Visit) SetSnappedLocation(v Location) {
	o.SnappedLocation.Set(&v)
}
// SetSnappedLocationNil sets the value for SnappedLocation to be an explicit nil
func (o *Visit) SetSnappedLocationNil() {
	o.SnappedLocation.Set(nil)
}

// UnsetSnappedLocation ensures that no value is present for SnappedLocation, not even an explicit nil
func (o *Visit) UnsetSnappedLocation() {
	o.SnappedLocation.Unset()
}

// GetBreakTime returns the BreakTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetBreakTime() int32 {
	if o == nil || IsNil(o.BreakTime.Get()) {
		var ret int32
		return ret
	}
	return *o.BreakTime.Get()
}

// GetBreakTimeOk returns a tuple with the BreakTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetBreakTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BreakTime.Get(), o.BreakTime.IsSet()
}

// HasBreakTime returns a boolean if a field has been set.
func (o *Visit) HasBreakTime() bool {
	if o != nil && o.BreakTime.IsSet() {
		return true
	}

	return false
}

// SetBreakTime gets a reference to the given NullableInt32 and assigns it to the BreakTime field.
func (o *Visit) SetBreakTime(v int32) {
	o.BreakTime.Set(&v)
}
// SetBreakTimeNil sets the value for BreakTime to be an explicit nil
func (o *Visit) SetBreakTimeNil() {
	o.BreakTime.Set(nil)
}

// UnsetBreakTime ensures that no value is present for BreakTime, not even an explicit nil
func (o *Visit) UnsetBreakTime() {
	o.BreakTime.Unset()
}

// GetWaitTime returns the WaitTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Visit) GetWaitTime() int64 {
	if o == nil || IsNil(o.WaitTime.Get()) {
		var ret int64
		return ret
	}
	return *o.WaitTime.Get()
}

// GetWaitTimeOk returns a tuple with the WaitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Visit) GetWaitTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WaitTime.Get(), o.WaitTime.IsSet()
}

// HasWaitTime returns a boolean if a field has been set.
func (o *Visit) HasWaitTime() bool {
	if o != nil && o.WaitTime.IsSet() {
		return true
	}

	return false
}

// SetWaitTime gets a reference to the given NullableInt64 and assigns it to the WaitTime field.
func (o *Visit) SetWaitTime(v int64) {
	o.WaitTime.Set(&v)
}
// SetWaitTimeNil sets the value for WaitTime to be an explicit nil
func (o *Visit) SetWaitTimeNil() {
	o.WaitTime.Set(nil)
}

// UnsetWaitTime ensures that no value is present for WaitTime, not even an explicit nil
func (o *Visit) UnsetWaitTime() {
	o.WaitTime.Unset()
}

func (o Visit) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Visit) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Arrival.IsSet() {
		toSerialize["arrival"] = o.Arrival.Get()
	}
	if o.ServiceTime.IsSet() {
		toSerialize["serviceTime"] = o.ServiceTime.Get()
	}
	if o.TravelTime.IsSet() {
		toSerialize["travelTime"] = o.TravelTime.Get()
	}
	if o.Distance.IsSet() {
		toSerialize["distance"] = o.Distance.Get()
	}
	if o.Job.IsSet() {
		toSerialize["job"] = o.Job.Get()
	}
	if o.Activity.IsSet() {
		toSerialize["activity"] = o.Activity.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Latlon != nil {
		toSerialize["latlon"] = o.Latlon
	}
	if o.SnappedLocation.IsSet() {
		toSerialize["snappedLocation"] = o.SnappedLocation.Get()
	}
	if o.BreakTime.IsSet() {
		toSerialize["breakTime"] = o.BreakTime.Get()
	}
	if o.WaitTime.IsSet() {
		toSerialize["waitTime"] = o.WaitTime.Get()
	}
	return toSerialize, nil
}

type NullableVisit struct {
	value *Visit
	isSet bool
}

func (v NullableVisit) Get() *Visit {
	return v.value
}

func (v *NullableVisit) Set(val *Visit) {
	v.value = val
	v.isSet = true
}

func (v NullableVisit) IsSet() bool {
	return v.isSet
}

func (v *NullableVisit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVisit(val *Visit) *NullableVisit {
	return &NullableVisit{value: val, isSet: true}
}

func (v NullableVisit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVisit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


