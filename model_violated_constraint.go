/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViolatedConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViolatedConstraint{}

// ViolatedConstraint A constraint that is broken in the current solution with a certain value (penalty) and a certain level (hard, soft, medium).
type ViolatedConstraint struct {
	// Name of the constraint.
	Name NullableString `json:"name"`
	// Value of the unresolved constraint. The higher, the more deviation from perfection this constraint has.
	Value NullableInt32 `json:"value"`
	// Level of unresolved constraint.
	Level NullableLevel `json:"level"`
}

type _ViolatedConstraint ViolatedConstraint

// NewViolatedConstraint instantiates a new ViolatedConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViolatedConstraint(name NullableString, value NullableInt32, level NullableLevel) *ViolatedConstraint {
	this := ViolatedConstraint{}
	this.Name = name
	this.Value = value
	this.Level = level
	return &this
}

// NewViolatedConstraintWithDefaults instantiates a new ViolatedConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViolatedConstraintWithDefaults() *ViolatedConstraint {
	this := ViolatedConstraint{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ViolatedConstraint) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViolatedConstraint) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ViolatedConstraint) SetName(v string) {
	o.Name.Set(&v)
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *ViolatedConstraint) GetValue() int32 {
	if o == nil || o.Value.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViolatedConstraint) GetValueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *ViolatedConstraint) SetValue(v int32) {
	o.Value.Set(&v)
}

// GetLevel returns the Level field value
// If the value is explicit nil, the zero value for Level will be returned
func (o *ViolatedConstraint) GetLevel() Level {
	if o == nil || o.Level.Get() == nil {
		var ret Level
		return ret
	}

	return *o.Level.Get()
}

// GetLevelOk returns a tuple with the Level field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViolatedConstraint) GetLevelOk() (*Level, bool) {
	if o == nil {
		return nil, false
	}
	return o.Level.Get(), o.Level.IsSet()
}

// SetLevel sets field value
func (o *ViolatedConstraint) SetLevel(v Level) {
	o.Level.Set(&v)
}

func (o ViolatedConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViolatedConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	toSerialize["value"] = o.Value.Get()
	toSerialize["level"] = o.Level.Get()
	return toSerialize, nil
}

func (o *ViolatedConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
		"level",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViolatedConstraint := _ViolatedConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViolatedConstraint)

	if err != nil {
		return err
	}

	*o = ViolatedConstraint(varViolatedConstraint)

	return err
}

type NullableViolatedConstraint struct {
	value *ViolatedConstraint
	isSet bool
}

func (v NullableViolatedConstraint) Get() *ViolatedConstraint {
	return v.value
}

func (v *NullableViolatedConstraint) Set(val *ViolatedConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableViolatedConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableViolatedConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolatedConstraint(val *ViolatedConstraint) *NullableViolatedConstraint {
	return &NullableViolatedConstraint{value: val, isSet: true}
}

func (v NullableViolatedConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolatedConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


