/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ExplanationOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExplanationOptions{}

// ExplanationOptions Options to manage the explanation of the solution
type ExplanationOptions struct {
	// When enabled the explanation will contain a map of all the alternative positions for each job
	Enabled NullableBool `json:"enabled,omitempty"`
	// When true the map of alternative positions will contain only feasible alternatives
	FilterHardConstraints NullableBool `json:"filterHardConstraints,omitempty"`
	OnlyUnassigned NullableBool `json:"onlyUnassigned,omitempty"`
}

// NewExplanationOptions instantiates a new ExplanationOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExplanationOptions() *ExplanationOptions {
	this := ExplanationOptions{}
	return &this
}

// NewExplanationOptionsWithDefaults instantiates a new ExplanationOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExplanationOptionsWithDefaults() *ExplanationOptions {
	this := ExplanationOptions{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExplanationOptions) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExplanationOptions) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *ExplanationOptions) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *ExplanationOptions) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *ExplanationOptions) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *ExplanationOptions) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetFilterHardConstraints returns the FilterHardConstraints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExplanationOptions) GetFilterHardConstraints() bool {
	if o == nil || IsNil(o.FilterHardConstraints.Get()) {
		var ret bool
		return ret
	}
	return *o.FilterHardConstraints.Get()
}

// GetFilterHardConstraintsOk returns a tuple with the FilterHardConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExplanationOptions) GetFilterHardConstraintsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterHardConstraints.Get(), o.FilterHardConstraints.IsSet()
}

// HasFilterHardConstraints returns a boolean if a field has been set.
func (o *ExplanationOptions) HasFilterHardConstraints() bool {
	if o != nil && o.FilterHardConstraints.IsSet() {
		return true
	}

	return false
}

// SetFilterHardConstraints gets a reference to the given NullableBool and assigns it to the FilterHardConstraints field.
func (o *ExplanationOptions) SetFilterHardConstraints(v bool) {
	o.FilterHardConstraints.Set(&v)
}
// SetFilterHardConstraintsNil sets the value for FilterHardConstraints to be an explicit nil
func (o *ExplanationOptions) SetFilterHardConstraintsNil() {
	o.FilterHardConstraints.Set(nil)
}

// UnsetFilterHardConstraints ensures that no value is present for FilterHardConstraints, not even an explicit nil
func (o *ExplanationOptions) UnsetFilterHardConstraints() {
	o.FilterHardConstraints.Unset()
}

// GetOnlyUnassigned returns the OnlyUnassigned field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExplanationOptions) GetOnlyUnassigned() bool {
	if o == nil || IsNil(o.OnlyUnassigned.Get()) {
		var ret bool
		return ret
	}
	return *o.OnlyUnassigned.Get()
}

// GetOnlyUnassignedOk returns a tuple with the OnlyUnassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExplanationOptions) GetOnlyUnassignedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnlyUnassigned.Get(), o.OnlyUnassigned.IsSet()
}

// HasOnlyUnassigned returns a boolean if a field has been set.
func (o *ExplanationOptions) HasOnlyUnassigned() bool {
	if o != nil && o.OnlyUnassigned.IsSet() {
		return true
	}

	return false
}

// SetOnlyUnassigned gets a reference to the given NullableBool and assigns it to the OnlyUnassigned field.
func (o *ExplanationOptions) SetOnlyUnassigned(v bool) {
	o.OnlyUnassigned.Set(&v)
}
// SetOnlyUnassignedNil sets the value for OnlyUnassigned to be an explicit nil
func (o *ExplanationOptions) SetOnlyUnassignedNil() {
	o.OnlyUnassigned.Set(nil)
}

// UnsetOnlyUnassigned ensures that no value is present for OnlyUnassigned, not even an explicit nil
func (o *ExplanationOptions) UnsetOnlyUnassigned() {
	o.OnlyUnassigned.Unset()
}

func (o ExplanationOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExplanationOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.FilterHardConstraints.IsSet() {
		toSerialize["filterHardConstraints"] = o.FilterHardConstraints.Get()
	}
	if o.OnlyUnassigned.IsSet() {
		toSerialize["onlyUnassigned"] = o.OnlyUnassigned.Get()
	}
	return toSerialize, nil
}

type NullableExplanationOptions struct {
	value *ExplanationOptions
	isSet bool
}

func (v NullableExplanationOptions) Get() *ExplanationOptions {
	return v.value
}

func (v *NullableExplanationOptions) Set(val *ExplanationOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableExplanationOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableExplanationOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExplanationOptions(val *ExplanationOptions) *NullableExplanationOptions {
	return &NullableExplanationOptions{value: val, isSet: true}
}

func (v NullableExplanationOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExplanationOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


