/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// BreakType Type of break that can be defined for a resource
type BreakType string

// List of BreakType
const (
	WINDOWED BreakType = "WINDOWED"
	DRIVE BreakType = "DRIVE"
	UNAVAILABILITY BreakType = "UNAVAILABILITY"
)

// All allowed values of BreakType enum
var AllowedBreakTypeEnumValues = []BreakType{
	"WINDOWED",
	"DRIVE",
	"UNAVAILABILITY",
}

func (v *BreakType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BreakType(value)
	for _, existing := range AllowedBreakTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BreakType", value)
}

// NewBreakTypeFromValue returns a pointer to a valid BreakType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBreakTypeFromValue(v string) (*BreakType, error) {
	ev := BreakType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BreakType: valid values are %v", v, AllowedBreakTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BreakType) IsValid() bool {
	for _, existing := range AllowedBreakTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BreakType value
func (v BreakType) Ptr() *BreakType {
	return &v
}

type NullableBreakType struct {
	value *BreakType
	isSet bool
}

func (v NullableBreakType) Get() *BreakType {
	return v.value
}

func (v *NullableBreakType) Set(val *BreakType) {
	v.value = val
	v.isSet = true
}

func (v NullableBreakType) IsSet() bool {
	return v.isSet
}

func (v *NullableBreakType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBreakType(val *BreakType) *NullableBreakType {
	return &NullableBreakType{value: val, isSet: true}
}

func (v NullableBreakType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBreakType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

