/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnRouteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnRouteRequest{}

// OnRouteRequest OnRoute Request for solving, evaluating
type OnRouteRequest struct {
	// List of available resources (vehicles, drivers, workers) that can be assigned to perform jobs. Each resource defines their working schedules, location constraints, capacity limits, and capabilities. At least one resource is required, with a maximum of 2000 resources per request.
	Resources []Resource `json:"resources"`
	// List of jobs/tasks to be assigned to resources. Each job specifies service requirements, location, time constraints, duration, and resource preferences. Jobs represent the work that needs to be scheduled and optimized. At least one job is required, with a maximum of 10,000 jobs per request.
	Jobs []Job `json:"jobs"`
	// Configuration options that control the solver's behavior, optimization strategy, and output format. These settings affect how the solver approaches the problem, what data is included in responses, and performance characteristics.
	Options NullableOptions `json:"options,omitempty"`
	// Relative importance weights for different optimization objectives and constraint violations. These weights allow you to balance competing priorities such as travel time vs. resource utilization, or to emphasize certain constraints like customer preferences or service urgency.
	Weights NullableWeights `json:"weights,omitempty"`
	// Optional webhook URL that will receive a POST request with the job ID when the optimization is complete. This enables asynchronous processing where you can submit a request and be notified when results are ready, rather than waiting for the synchronous response.
	Hook NullableString `json:"hook,omitempty"`
	// Optional configuration for custom distance matrices supporting multiple vehicle profiles and time slices. When provided, these matrix IDs will be used instead of calculating distances through routing engines. This is useful for scenarios requiring pre-computed distance matrices with specific routing constraints or for improved performance.
	CustomDistanceMatrices NullableCustomDistanceMatrices `json:"customDistanceMatrices,omitempty"`
	Label NullableString `json:"label,omitempty"`
	Relations []Relation `json:"relations,omitempty"`
}

type _OnRouteRequest OnRouteRequest

// NewOnRouteRequest instantiates a new OnRouteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnRouteRequest(resources []Resource, jobs []Job) *OnRouteRequest {
	this := OnRouteRequest{}
	this.Resources = resources
	this.Jobs = jobs
	return &this
}

// NewOnRouteRequestWithDefaults instantiates a new OnRouteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnRouteRequestWithDefaults() *OnRouteRequest {
	this := OnRouteRequest{}
	return &this
}

// GetResources returns the Resources field value
func (o *OnRouteRequest) GetResources() []Resource {
	if o == nil {
		var ret []Resource
		return ret
	}

	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value
// and a boolean to check if the value has been set.
func (o *OnRouteRequest) GetResourcesOk() ([]Resource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resources, true
}

// SetResources sets field value
func (o *OnRouteRequest) SetResources(v []Resource) {
	o.Resources = v
}

// GetJobs returns the Jobs field value
func (o *OnRouteRequest) GetJobs() []Job {
	if o == nil {
		var ret []Job
		return ret
	}

	return o.Jobs
}

// GetJobsOk returns a tuple with the Jobs field value
// and a boolean to check if the value has been set.
func (o *OnRouteRequest) GetJobsOk() ([]Job, bool) {
	if o == nil {
		return nil, false
	}
	return o.Jobs, true
}

// SetJobs sets field value
func (o *OnRouteRequest) SetJobs(v []Job) {
	o.Jobs = v
}

// GetOptions returns the Options field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteRequest) GetOptions() Options {
	if o == nil || IsNil(o.Options.Get()) {
		var ret Options
		return ret
	}
	return *o.Options.Get()
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteRequest) GetOptionsOk() (*Options, bool) {
	if o == nil {
		return nil, false
	}
	return o.Options.Get(), o.Options.IsSet()
}

// HasOptions returns a boolean if a field has been set.
func (o *OnRouteRequest) HasOptions() bool {
	if o != nil && o.Options.IsSet() {
		return true
	}

	return false
}

// SetOptions gets a reference to the given NullableOptions and assigns it to the Options field.
func (o *OnRouteRequest) SetOptions(v Options) {
	o.Options.Set(&v)
}
// SetOptionsNil sets the value for Options to be an explicit nil
func (o *OnRouteRequest) SetOptionsNil() {
	o.Options.Set(nil)
}

// UnsetOptions ensures that no value is present for Options, not even an explicit nil
func (o *OnRouteRequest) UnsetOptions() {
	o.Options.Unset()
}

// GetWeights returns the Weights field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteRequest) GetWeights() Weights {
	if o == nil || IsNil(o.Weights.Get()) {
		var ret Weights
		return ret
	}
	return *o.Weights.Get()
}

// GetWeightsOk returns a tuple with the Weights field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteRequest) GetWeightsOk() (*Weights, bool) {
	if o == nil {
		return nil, false
	}
	return o.Weights.Get(), o.Weights.IsSet()
}

// HasWeights returns a boolean if a field has been set.
func (o *OnRouteRequest) HasWeights() bool {
	if o != nil && o.Weights.IsSet() {
		return true
	}

	return false
}

// SetWeights gets a reference to the given NullableWeights and assigns it to the Weights field.
func (o *OnRouteRequest) SetWeights(v Weights) {
	o.Weights.Set(&v)
}
// SetWeightsNil sets the value for Weights to be an explicit nil
func (o *OnRouteRequest) SetWeightsNil() {
	o.Weights.Set(nil)
}

// UnsetWeights ensures that no value is present for Weights, not even an explicit nil
func (o *OnRouteRequest) UnsetWeights() {
	o.Weights.Unset()
}

// GetHook returns the Hook field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteRequest) GetHook() string {
	if o == nil || IsNil(o.Hook.Get()) {
		var ret string
		return ret
	}
	return *o.Hook.Get()
}

// GetHookOk returns a tuple with the Hook field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteRequest) GetHookOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hook.Get(), o.Hook.IsSet()
}

// HasHook returns a boolean if a field has been set.
func (o *OnRouteRequest) HasHook() bool {
	if o != nil && o.Hook.IsSet() {
		return true
	}

	return false
}

// SetHook gets a reference to the given NullableString and assigns it to the Hook field.
func (o *OnRouteRequest) SetHook(v string) {
	o.Hook.Set(&v)
}
// SetHookNil sets the value for Hook to be an explicit nil
func (o *OnRouteRequest) SetHookNil() {
	o.Hook.Set(nil)
}

// UnsetHook ensures that no value is present for Hook, not even an explicit nil
func (o *OnRouteRequest) UnsetHook() {
	o.Hook.Unset()
}

// GetCustomDistanceMatrices returns the CustomDistanceMatrices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteRequest) GetCustomDistanceMatrices() CustomDistanceMatrices {
	if o == nil || IsNil(o.CustomDistanceMatrices.Get()) {
		var ret CustomDistanceMatrices
		return ret
	}
	return *o.CustomDistanceMatrices.Get()
}

// GetCustomDistanceMatricesOk returns a tuple with the CustomDistanceMatrices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteRequest) GetCustomDistanceMatricesOk() (*CustomDistanceMatrices, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomDistanceMatrices.Get(), o.CustomDistanceMatrices.IsSet()
}

// HasCustomDistanceMatrices returns a boolean if a field has been set.
func (o *OnRouteRequest) HasCustomDistanceMatrices() bool {
	if o != nil && o.CustomDistanceMatrices.IsSet() {
		return true
	}

	return false
}

// SetCustomDistanceMatrices gets a reference to the given NullableCustomDistanceMatrices and assigns it to the CustomDistanceMatrices field.
func (o *OnRouteRequest) SetCustomDistanceMatrices(v CustomDistanceMatrices) {
	o.CustomDistanceMatrices.Set(&v)
}
// SetCustomDistanceMatricesNil sets the value for CustomDistanceMatrices to be an explicit nil
func (o *OnRouteRequest) SetCustomDistanceMatricesNil() {
	o.CustomDistanceMatrices.Set(nil)
}

// UnsetCustomDistanceMatrices ensures that no value is present for CustomDistanceMatrices, not even an explicit nil
func (o *OnRouteRequest) UnsetCustomDistanceMatrices() {
	o.CustomDistanceMatrices.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteRequest) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteRequest) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *OnRouteRequest) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *OnRouteRequest) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *OnRouteRequest) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *OnRouteRequest) UnsetLabel() {
	o.Label.Unset()
}

// GetRelations returns the Relations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnRouteRequest) GetRelations() []Relation {
	if o == nil {
		var ret []Relation
		return ret
	}
	return o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnRouteRequest) GetRelationsOk() ([]Relation, bool) {
	if o == nil || IsNil(o.Relations) {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *OnRouteRequest) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given []Relation and assigns it to the Relations field.
func (o *OnRouteRequest) SetRelations(v []Relation) {
	o.Relations = v
}

func (o OnRouteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnRouteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["resources"] = o.Resources
	toSerialize["jobs"] = o.Jobs
	if o.Options.IsSet() {
		toSerialize["options"] = o.Options.Get()
	}
	if o.Weights.IsSet() {
		toSerialize["weights"] = o.Weights.Get()
	}
	if o.Hook.IsSet() {
		toSerialize["hook"] = o.Hook.Get()
	}
	if o.CustomDistanceMatrices.IsSet() {
		toSerialize["customDistanceMatrices"] = o.CustomDistanceMatrices.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Relations != nil {
		toSerialize["relations"] = o.Relations
	}
	return toSerialize, nil
}

func (o *OnRouteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"resources",
		"jobs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnRouteRequest := _OnRouteRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnRouteRequest)

	if err != nil {
		return err
	}

	*o = OnRouteRequest(varOnRouteRequest)

	return err
}

type NullableOnRouteRequest struct {
	value *OnRouteRequest
	isSet bool
}

func (v NullableOnRouteRequest) Get() *OnRouteRequest {
	return v.value
}

func (v *NullableOnRouteRequest) Set(val *OnRouteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOnRouteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOnRouteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnRouteRequest(val *OnRouteRequest) *NullableOnRouteRequest {
	return &NullableOnRouteRequest{value: val, isSet: true}
}

func (v NullableOnRouteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnRouteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


