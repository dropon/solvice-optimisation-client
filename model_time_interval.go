/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TimeInterval Determines if the time interval between jobs should be measured from arrival or departure
type TimeInterval string

// List of TimeInterval
const (
	FROM_ARRIVAL TimeInterval = "FROM_ARRIVAL"
	FROM_DEPARTURE TimeInterval = "FROM_DEPARTURE"
)

// All allowed values of TimeInterval enum
var AllowedTimeIntervalEnumValues = []TimeInterval{
	"FROM_ARRIVAL",
	"FROM_DEPARTURE",
}

func (v *TimeInterval) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeInterval(value)
	for _, existing := range AllowedTimeIntervalEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeInterval", value)
}

// NewTimeIntervalFromValue returns a pointer to a valid TimeInterval
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeIntervalFromValue(v string) (*TimeInterval, error) {
	ev := TimeInterval(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeInterval: valid values are %v", v, AllowedTimeIntervalEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeInterval) IsValid() bool {
	for _, existing := range AllowedTimeIntervalEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeInterval value
func (v TimeInterval) Ptr() *TimeInterval {
	return &v
}

type NullableTimeInterval struct {
	value *TimeInterval
	isSet bool
}

func (v NullableTimeInterval) Get() *TimeInterval {
	return v.value
}

func (v *NullableTimeInterval) Set(val *TimeInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeInterval(val *TimeInterval) *NullableTimeInterval {
	return &NullableTimeInterval{value: val, isSet: true}
}

func (v NullableTimeInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

