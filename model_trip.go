/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Trip type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trip{}

// Trip Trip for a resource. Holds a list of visits for a resource and a date.
type Trip struct {
	// List of visits for a resource and a date.
	Visits []Visit `json:"visits"`
	// Resource
	Resource NullableString `json:"resource,omitempty"`
	// Date
	Date NullableString `json:"date,omitempty"`
	// Departure date-time
	DepartureTime NullableString `json:"departureTime,omitempty"`
	// Wait time in seconds
	WaitTime NullableInt64 `json:"waitTime,omitempty"`
	// Travel time in seconds
	TravelTime NullableInt64 `json:"travelTime,omitempty"`
	// Work time in seconds
	WorkTime NullableInt64 `json:"workTime,omitempty"`
	// Service time in seconds
	ServiceTime NullableInt64 `json:"serviceTime,omitempty"`
	// Polyline of the trip
	Polyline NullableString `json:"polyline,omitempty"`
	// How full this trip is in terms of work time over capacity. Eg 80%
	Occupancy NullableFloat64 `json:"occupancy,omitempty"`
	Start NullableVisit `json:"start,omitempty"`
	End NullableVisit `json:"end,omitempty"`
	Distance NullableInt64 `json:"distance,omitempty"`
}

type _Trip Trip

// NewTrip instantiates a new Trip object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrip(visits []Visit) *Trip {
	this := Trip{}
	this.Visits = visits
	return &this
}

// NewTripWithDefaults instantiates a new Trip object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTripWithDefaults() *Trip {
	this := Trip{}
	return &this
}

// GetVisits returns the Visits field value
func (o *Trip) GetVisits() []Visit {
	if o == nil {
		var ret []Visit
		return ret
	}

	return o.Visits
}

// GetVisitsOk returns a tuple with the Visits field value
// and a boolean to check if the value has been set.
func (o *Trip) GetVisitsOk() ([]Visit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Visits, true
}

// SetVisits sets field value
func (o *Trip) SetVisits(v []Visit) {
	o.Visits = v
}

// GetResource returns the Resource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetResource() string {
	if o == nil || IsNil(o.Resource.Get()) {
		var ret string
		return ret
	}
	return *o.Resource.Get()
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetResourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resource.Get(), o.Resource.IsSet()
}

// HasResource returns a boolean if a field has been set.
func (o *Trip) HasResource() bool {
	if o != nil && o.Resource.IsSet() {
		return true
	}

	return false
}

// SetResource gets a reference to the given NullableString and assigns it to the Resource field.
func (o *Trip) SetResource(v string) {
	o.Resource.Set(&v)
}
// SetResourceNil sets the value for Resource to be an explicit nil
func (o *Trip) SetResourceNil() {
	o.Resource.Set(nil)
}

// UnsetResource ensures that no value is present for Resource, not even an explicit nil
func (o *Trip) UnsetResource() {
	o.Resource.Unset()
}

// GetDate returns the Date field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetDate() string {
	if o == nil || IsNil(o.Date.Get()) {
		var ret string
		return ret
	}
	return *o.Date.Get()
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Date.Get(), o.Date.IsSet()
}

// HasDate returns a boolean if a field has been set.
func (o *Trip) HasDate() bool {
	if o != nil && o.Date.IsSet() {
		return true
	}

	return false
}

// SetDate gets a reference to the given NullableString and assigns it to the Date field.
func (o *Trip) SetDate(v string) {
	o.Date.Set(&v)
}
// SetDateNil sets the value for Date to be an explicit nil
func (o *Trip) SetDateNil() {
	o.Date.Set(nil)
}

// UnsetDate ensures that no value is present for Date, not even an explicit nil
func (o *Trip) UnsetDate() {
	o.Date.Unset()
}

// GetDepartureTime returns the DepartureTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetDepartureTime() string {
	if o == nil || IsNil(o.DepartureTime.Get()) {
		var ret string
		return ret
	}
	return *o.DepartureTime.Get()
}

// GetDepartureTimeOk returns a tuple with the DepartureTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetDepartureTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DepartureTime.Get(), o.DepartureTime.IsSet()
}

// HasDepartureTime returns a boolean if a field has been set.
func (o *Trip) HasDepartureTime() bool {
	if o != nil && o.DepartureTime.IsSet() {
		return true
	}

	return false
}

// SetDepartureTime gets a reference to the given NullableString and assigns it to the DepartureTime field.
func (o *Trip) SetDepartureTime(v string) {
	o.DepartureTime.Set(&v)
}
// SetDepartureTimeNil sets the value for DepartureTime to be an explicit nil
func (o *Trip) SetDepartureTimeNil() {
	o.DepartureTime.Set(nil)
}

// UnsetDepartureTime ensures that no value is present for DepartureTime, not even an explicit nil
func (o *Trip) UnsetDepartureTime() {
	o.DepartureTime.Unset()
}

// GetWaitTime returns the WaitTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetWaitTime() int64 {
	if o == nil || IsNil(o.WaitTime.Get()) {
		var ret int64
		return ret
	}
	return *o.WaitTime.Get()
}

// GetWaitTimeOk returns a tuple with the WaitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetWaitTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WaitTime.Get(), o.WaitTime.IsSet()
}

// HasWaitTime returns a boolean if a field has been set.
func (o *Trip) HasWaitTime() bool {
	if o != nil && o.WaitTime.IsSet() {
		return true
	}

	return false
}

// SetWaitTime gets a reference to the given NullableInt64 and assigns it to the WaitTime field.
func (o *Trip) SetWaitTime(v int64) {
	o.WaitTime.Set(&v)
}
// SetWaitTimeNil sets the value for WaitTime to be an explicit nil
func (o *Trip) SetWaitTimeNil() {
	o.WaitTime.Set(nil)
}

// UnsetWaitTime ensures that no value is present for WaitTime, not even an explicit nil
func (o *Trip) UnsetWaitTime() {
	o.WaitTime.Unset()
}

// GetTravelTime returns the TravelTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetTravelTime() int64 {
	if o == nil || IsNil(o.TravelTime.Get()) {
		var ret int64
		return ret
	}
	return *o.TravelTime.Get()
}

// GetTravelTimeOk returns a tuple with the TravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetTravelTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TravelTime.Get(), o.TravelTime.IsSet()
}

// HasTravelTime returns a boolean if a field has been set.
func (o *Trip) HasTravelTime() bool {
	if o != nil && o.TravelTime.IsSet() {
		return true
	}

	return false
}

// SetTravelTime gets a reference to the given NullableInt64 and assigns it to the TravelTime field.
func (o *Trip) SetTravelTime(v int64) {
	o.TravelTime.Set(&v)
}
// SetTravelTimeNil sets the value for TravelTime to be an explicit nil
func (o *Trip) SetTravelTimeNil() {
	o.TravelTime.Set(nil)
}

// UnsetTravelTime ensures that no value is present for TravelTime, not even an explicit nil
func (o *Trip) UnsetTravelTime() {
	o.TravelTime.Unset()
}

// GetWorkTime returns the WorkTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetWorkTime() int64 {
	if o == nil || IsNil(o.WorkTime.Get()) {
		var ret int64
		return ret
	}
	return *o.WorkTime.Get()
}

// GetWorkTimeOk returns a tuple with the WorkTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetWorkTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkTime.Get(), o.WorkTime.IsSet()
}

// HasWorkTime returns a boolean if a field has been set.
func (o *Trip) HasWorkTime() bool {
	if o != nil && o.WorkTime.IsSet() {
		return true
	}

	return false
}

// SetWorkTime gets a reference to the given NullableInt64 and assigns it to the WorkTime field.
func (o *Trip) SetWorkTime(v int64) {
	o.WorkTime.Set(&v)
}
// SetWorkTimeNil sets the value for WorkTime to be an explicit nil
func (o *Trip) SetWorkTimeNil() {
	o.WorkTime.Set(nil)
}

// UnsetWorkTime ensures that no value is present for WorkTime, not even an explicit nil
func (o *Trip) UnsetWorkTime() {
	o.WorkTime.Unset()
}

// GetServiceTime returns the ServiceTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetServiceTime() int64 {
	if o == nil || IsNil(o.ServiceTime.Get()) {
		var ret int64
		return ret
	}
	return *o.ServiceTime.Get()
}

// GetServiceTimeOk returns a tuple with the ServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetServiceTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceTime.Get(), o.ServiceTime.IsSet()
}

// HasServiceTime returns a boolean if a field has been set.
func (o *Trip) HasServiceTime() bool {
	if o != nil && o.ServiceTime.IsSet() {
		return true
	}

	return false
}

// SetServiceTime gets a reference to the given NullableInt64 and assigns it to the ServiceTime field.
func (o *Trip) SetServiceTime(v int64) {
	o.ServiceTime.Set(&v)
}
// SetServiceTimeNil sets the value for ServiceTime to be an explicit nil
func (o *Trip) SetServiceTimeNil() {
	o.ServiceTime.Set(nil)
}

// UnsetServiceTime ensures that no value is present for ServiceTime, not even an explicit nil
func (o *Trip) UnsetServiceTime() {
	o.ServiceTime.Unset()
}

// GetPolyline returns the Polyline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetPolyline() string {
	if o == nil || IsNil(o.Polyline.Get()) {
		var ret string
		return ret
	}
	return *o.Polyline.Get()
}

// GetPolylineOk returns a tuple with the Polyline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetPolylineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Polyline.Get(), o.Polyline.IsSet()
}

// HasPolyline returns a boolean if a field has been set.
func (o *Trip) HasPolyline() bool {
	if o != nil && o.Polyline.IsSet() {
		return true
	}

	return false
}

// SetPolyline gets a reference to the given NullableString and assigns it to the Polyline field.
func (o *Trip) SetPolyline(v string) {
	o.Polyline.Set(&v)
}
// SetPolylineNil sets the value for Polyline to be an explicit nil
func (o *Trip) SetPolylineNil() {
	o.Polyline.Set(nil)
}

// UnsetPolyline ensures that no value is present for Polyline, not even an explicit nil
func (o *Trip) UnsetPolyline() {
	o.Polyline.Unset()
}

// GetOccupancy returns the Occupancy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetOccupancy() float64 {
	if o == nil || IsNil(o.Occupancy.Get()) {
		var ret float64
		return ret
	}
	return *o.Occupancy.Get()
}

// GetOccupancyOk returns a tuple with the Occupancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetOccupancyOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Occupancy.Get(), o.Occupancy.IsSet()
}

// HasOccupancy returns a boolean if a field has been set.
func (o *Trip) HasOccupancy() bool {
	if o != nil && o.Occupancy.IsSet() {
		return true
	}

	return false
}

// SetOccupancy gets a reference to the given NullableFloat64 and assigns it to the Occupancy field.
func (o *Trip) SetOccupancy(v float64) {
	o.Occupancy.Set(&v)
}
// SetOccupancyNil sets the value for Occupancy to be an explicit nil
func (o *Trip) SetOccupancyNil() {
	o.Occupancy.Set(nil)
}

// UnsetOccupancy ensures that no value is present for Occupancy, not even an explicit nil
func (o *Trip) UnsetOccupancy() {
	o.Occupancy.Unset()
}

// GetStart returns the Start field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetStart() Visit {
	if o == nil || IsNil(o.Start.Get()) {
		var ret Visit
		return ret
	}
	return *o.Start.Get()
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetStartOk() (*Visit, bool) {
	if o == nil {
		return nil, false
	}
	return o.Start.Get(), o.Start.IsSet()
}

// HasStart returns a boolean if a field has been set.
func (o *Trip) HasStart() bool {
	if o != nil && o.Start.IsSet() {
		return true
	}

	return false
}

// SetStart gets a reference to the given NullableVisit and assigns it to the Start field.
func (o *Trip) SetStart(v Visit) {
	o.Start.Set(&v)
}
// SetStartNil sets the value for Start to be an explicit nil
func (o *Trip) SetStartNil() {
	o.Start.Set(nil)
}

// UnsetStart ensures that no value is present for Start, not even an explicit nil
func (o *Trip) UnsetStart() {
	o.Start.Unset()
}

// GetEnd returns the End field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetEnd() Visit {
	if o == nil || IsNil(o.End.Get()) {
		var ret Visit
		return ret
	}
	return *o.End.Get()
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetEndOk() (*Visit, bool) {
	if o == nil {
		return nil, false
	}
	return o.End.Get(), o.End.IsSet()
}

// HasEnd returns a boolean if a field has been set.
func (o *Trip) HasEnd() bool {
	if o != nil && o.End.IsSet() {
		return true
	}

	return false
}

// SetEnd gets a reference to the given NullableVisit and assigns it to the End field.
func (o *Trip) SetEnd(v Visit) {
	o.End.Set(&v)
}
// SetEndNil sets the value for End to be an explicit nil
func (o *Trip) SetEndNil() {
	o.End.Set(nil)
}

// UnsetEnd ensures that no value is present for End, not even an explicit nil
func (o *Trip) UnsetEnd() {
	o.End.Unset()
}

// GetDistance returns the Distance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trip) GetDistance() int64 {
	if o == nil || IsNil(o.Distance.Get()) {
		var ret int64
		return ret
	}
	return *o.Distance.Get()
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trip) GetDistanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Distance.Get(), o.Distance.IsSet()
}

// HasDistance returns a boolean if a field has been set.
func (o *Trip) HasDistance() bool {
	if o != nil && o.Distance.IsSet() {
		return true
	}

	return false
}

// SetDistance gets a reference to the given NullableInt64 and assigns it to the Distance field.
func (o *Trip) SetDistance(v int64) {
	o.Distance.Set(&v)
}
// SetDistanceNil sets the value for Distance to be an explicit nil
func (o *Trip) SetDistanceNil() {
	o.Distance.Set(nil)
}

// UnsetDistance ensures that no value is present for Distance, not even an explicit nil
func (o *Trip) UnsetDistance() {
	o.Distance.Unset()
}

func (o Trip) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trip) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["visits"] = o.Visits
	if o.Resource.IsSet() {
		toSerialize["resource"] = o.Resource.Get()
	}
	if o.Date.IsSet() {
		toSerialize["date"] = o.Date.Get()
	}
	if o.DepartureTime.IsSet() {
		toSerialize["departureTime"] = o.DepartureTime.Get()
	}
	if o.WaitTime.IsSet() {
		toSerialize["waitTime"] = o.WaitTime.Get()
	}
	if o.TravelTime.IsSet() {
		toSerialize["travelTime"] = o.TravelTime.Get()
	}
	if o.WorkTime.IsSet() {
		toSerialize["workTime"] = o.WorkTime.Get()
	}
	if o.ServiceTime.IsSet() {
		toSerialize["serviceTime"] = o.ServiceTime.Get()
	}
	if o.Polyline.IsSet() {
		toSerialize["polyline"] = o.Polyline.Get()
	}
	if o.Occupancy.IsSet() {
		toSerialize["occupancy"] = o.Occupancy.Get()
	}
	if o.Start.IsSet() {
		toSerialize["start"] = o.Start.Get()
	}
	if o.End.IsSet() {
		toSerialize["end"] = o.End.Get()
	}
	if o.Distance.IsSet() {
		toSerialize["distance"] = o.Distance.Get()
	}
	return toSerialize, nil
}

func (o *Trip) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"visits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrip := _Trip{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrip)

	if err != nil {
		return err
	}

	*o = Trip(varTrip)

	return err
}

type NullableTrip struct {
	value *Trip
	isSet bool
}

func (v NullableTrip) Get() *Trip {
	return v.value
}

func (v *NullableTrip) Set(val *Trip) {
	v.value = val
	v.isSet = true
}

func (v NullableTrip) IsSet() bool {
	return v.isSet
}

func (v *NullableTrip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrip(val *Trip) *NullableTrip {
	return &NullableTrip{value: val, isSet: true}
}

func (v NullableTrip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


