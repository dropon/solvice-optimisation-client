/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RelationType Type of relation between jobs
type RelationType string

// List of RelationType
const (
	SAME_TRIP RelationType = "SAME_TRIP"
	SEQUENCE RelationType = "SEQUENCE"
	DIRECT_SEQUENCE RelationType = "DIRECT_SEQUENCE"
	SAME_TIME RelationType = "SAME_TIME"
	NEIGHBOR RelationType = "NEIGHBOR"
	PICKUP_AND_DELIVERY RelationType = "PICKUP_AND_DELIVERY"
	SAME_RESOURCE RelationType = "SAME_RESOURCE"
	SAME_DAY RelationType = "SAME_DAY"
	GROUP_SEQUENCE RelationType = "GROUP_SEQUENCE"
)

// All allowed values of RelationType enum
var AllowedRelationTypeEnumValues = []RelationType{
	"SAME_TRIP",
	"SEQUENCE",
	"DIRECT_SEQUENCE",
	"SAME_TIME",
	"NEIGHBOR",
	"PICKUP_AND_DELIVERY",
	"SAME_RESOURCE",
	"SAME_DAY",
	"GROUP_SEQUENCE",
}

func (v *RelationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelationType(value)
	for _, existing := range AllowedRelationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelationType", value)
}

// NewRelationTypeFromValue returns a pointer to a valid RelationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelationTypeFromValue(v string) (*RelationType, error) {
	ev := RelationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelationType: valid values are %v", v, AllowedRelationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelationType) IsValid() bool {
	for _, existing := range AllowedRelationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RelationType value
func (v RelationType) Ptr() *RelationType {
	return &v
}

type NullableRelationType struct {
	value *RelationType
	isSet bool
}

func (v NullableRelationType) Get() *RelationType {
	return v.value
}

func (v *NullableRelationType) Set(val *RelationType) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationType) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationType(val *RelationType) *NullableRelationType {
	return &NullableRelationType{value: val, isSet: true}
}

func (v NullableRelationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

