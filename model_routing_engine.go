/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RoutingEngine The routing engine to use for distance and travel time calculations
type RoutingEngine string

// List of RoutingEngine
const (
	OSM RoutingEngine = "OSM"
	TOMTOM RoutingEngine = "TOMTOM"
	GOOGLE RoutingEngine = "GOOGLE"
	ANYMAP RoutingEngine = "ANYMAP"
)

// All allowed values of RoutingEngine enum
var AllowedRoutingEngineEnumValues = []RoutingEngine{
	"OSM",
	"TOMTOM",
	"GOOGLE",
	"ANYMAP",
}

func (v *RoutingEngine) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingEngine(value)
	for _, existing := range AllowedRoutingEngineEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingEngine", value)
}

// NewRoutingEngineFromValue returns a pointer to a valid RoutingEngine
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingEngineFromValue(v string) (*RoutingEngine, error) {
	ev := RoutingEngine(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingEngine: valid values are %v", v, AllowedRoutingEngineEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingEngine) IsValid() bool {
	for _, existing := range AllowedRoutingEngineEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingEngine value
func (v RoutingEngine) Ptr() *RoutingEngine {
	return &v
}

type NullableRoutingEngine struct {
	value *RoutingEngine
	isSet bool
}

func (v NullableRoutingEngine) Get() *RoutingEngine {
	return v.value
}

func (v *NullableRoutingEngine) Set(val *RoutingEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingEngine(val *RoutingEngine) *NullableRoutingEngine {
	return &NullableRoutingEngine{value: val, isSet: true}
}

func (v NullableRoutingEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

