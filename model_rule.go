/*
VRP API

             Welcome to the Solvice API! You can use our API to access Solvice API endpoints,             which can get information on your solved jobs,             their statuses and of course post new solve jobs.         

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Rule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rule{}

// Rule Periodic time rule for a resource
type Rule struct {
	// Period of the rule. If null, then it encompasses the entire period.
	Period *PeriodDto `json:"period,omitempty"`
	// Minimum work time in seconds. Work time is service time + drive/travel time.
	MinWorkTime NullableInt32 `json:"minWorkTime,omitempty"`
	// Maximum work time in seconds. Work time is service time + drive/travel time.
	MaxWorkTime NullableInt32 `json:"maxWorkTime,omitempty"`
	// Minimum service time in seconds
	MinServiceTime NullableInt32 `json:"minServiceTime,omitempty"`
	// Maximum service time in seconds
	MaxServiceTime NullableInt32 `json:"maxServiceTime,omitempty"`
	// Minimum drive time in seconds
	MinDriveTime NullableInt32 `json:"minDriveTime,omitempty"`
	// Maximum drive time in seconds
	MaxDriveTime NullableInt32 `json:"maxDriveTime,omitempty"`
	// Sum of the complexity of the jobs completed by this resource should reach this value
	MinJobComplexity NullableInt32 `json:"minJobComplexity,omitempty"`
	// Sum of the complexity of the jobs completed by this resource should not go over this value
	MaxJobComplexity NullableInt32 `json:"maxJobComplexity,omitempty"`
	// Map of job type to maximum count allowed per period. Null means no limitations.
	JobTypeLimitations map[string]int32 `json:"jobTypeLimitations,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetPeriod returns the Period field value if set, zero value otherwise.
func (o *Rule) GetPeriod() PeriodDto {
	if o == nil || IsNil(o.Period) {
		var ret PeriodDto
		return ret
	}
	return *o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetPeriodOk() (*PeriodDto, bool) {
	if o == nil || IsNil(o.Period) {
		return nil, false
	}
	return o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *Rule) HasPeriod() bool {
	if o != nil && !IsNil(o.Period) {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given PeriodDto and assigns it to the Period field.
func (o *Rule) SetPeriod(v PeriodDto) {
	o.Period = &v
}

// GetMinWorkTime returns the MinWorkTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMinWorkTime() int32 {
	if o == nil || IsNil(o.MinWorkTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MinWorkTime.Get()
}

// GetMinWorkTimeOk returns a tuple with the MinWorkTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMinWorkTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinWorkTime.Get(), o.MinWorkTime.IsSet()
}

// HasMinWorkTime returns a boolean if a field has been set.
func (o *Rule) HasMinWorkTime() bool {
	if o != nil && o.MinWorkTime.IsSet() {
		return true
	}

	return false
}

// SetMinWorkTime gets a reference to the given NullableInt32 and assigns it to the MinWorkTime field.
func (o *Rule) SetMinWorkTime(v int32) {
	o.MinWorkTime.Set(&v)
}
// SetMinWorkTimeNil sets the value for MinWorkTime to be an explicit nil
func (o *Rule) SetMinWorkTimeNil() {
	o.MinWorkTime.Set(nil)
}

// UnsetMinWorkTime ensures that no value is present for MinWorkTime, not even an explicit nil
func (o *Rule) UnsetMinWorkTime() {
	o.MinWorkTime.Unset()
}

// GetMaxWorkTime returns the MaxWorkTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMaxWorkTime() int32 {
	if o == nil || IsNil(o.MaxWorkTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxWorkTime.Get()
}

// GetMaxWorkTimeOk returns a tuple with the MaxWorkTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMaxWorkTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxWorkTime.Get(), o.MaxWorkTime.IsSet()
}

// HasMaxWorkTime returns a boolean if a field has been set.
func (o *Rule) HasMaxWorkTime() bool {
	if o != nil && o.MaxWorkTime.IsSet() {
		return true
	}

	return false
}

// SetMaxWorkTime gets a reference to the given NullableInt32 and assigns it to the MaxWorkTime field.
func (o *Rule) SetMaxWorkTime(v int32) {
	o.MaxWorkTime.Set(&v)
}
// SetMaxWorkTimeNil sets the value for MaxWorkTime to be an explicit nil
func (o *Rule) SetMaxWorkTimeNil() {
	o.MaxWorkTime.Set(nil)
}

// UnsetMaxWorkTime ensures that no value is present for MaxWorkTime, not even an explicit nil
func (o *Rule) UnsetMaxWorkTime() {
	o.MaxWorkTime.Unset()
}

// GetMinServiceTime returns the MinServiceTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMinServiceTime() int32 {
	if o == nil || IsNil(o.MinServiceTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MinServiceTime.Get()
}

// GetMinServiceTimeOk returns a tuple with the MinServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMinServiceTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinServiceTime.Get(), o.MinServiceTime.IsSet()
}

// HasMinServiceTime returns a boolean if a field has been set.
func (o *Rule) HasMinServiceTime() bool {
	if o != nil && o.MinServiceTime.IsSet() {
		return true
	}

	return false
}

// SetMinServiceTime gets a reference to the given NullableInt32 and assigns it to the MinServiceTime field.
func (o *Rule) SetMinServiceTime(v int32) {
	o.MinServiceTime.Set(&v)
}
// SetMinServiceTimeNil sets the value for MinServiceTime to be an explicit nil
func (o *Rule) SetMinServiceTimeNil() {
	o.MinServiceTime.Set(nil)
}

// UnsetMinServiceTime ensures that no value is present for MinServiceTime, not even an explicit nil
func (o *Rule) UnsetMinServiceTime() {
	o.MinServiceTime.Unset()
}

// GetMaxServiceTime returns the MaxServiceTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMaxServiceTime() int32 {
	if o == nil || IsNil(o.MaxServiceTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxServiceTime.Get()
}

// GetMaxServiceTimeOk returns a tuple with the MaxServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMaxServiceTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxServiceTime.Get(), o.MaxServiceTime.IsSet()
}

// HasMaxServiceTime returns a boolean if a field has been set.
func (o *Rule) HasMaxServiceTime() bool {
	if o != nil && o.MaxServiceTime.IsSet() {
		return true
	}

	return false
}

// SetMaxServiceTime gets a reference to the given NullableInt32 and assigns it to the MaxServiceTime field.
func (o *Rule) SetMaxServiceTime(v int32) {
	o.MaxServiceTime.Set(&v)
}
// SetMaxServiceTimeNil sets the value for MaxServiceTime to be an explicit nil
func (o *Rule) SetMaxServiceTimeNil() {
	o.MaxServiceTime.Set(nil)
}

// UnsetMaxServiceTime ensures that no value is present for MaxServiceTime, not even an explicit nil
func (o *Rule) UnsetMaxServiceTime() {
	o.MaxServiceTime.Unset()
}

// GetMinDriveTime returns the MinDriveTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMinDriveTime() int32 {
	if o == nil || IsNil(o.MinDriveTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MinDriveTime.Get()
}

// GetMinDriveTimeOk returns a tuple with the MinDriveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMinDriveTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinDriveTime.Get(), o.MinDriveTime.IsSet()
}

// HasMinDriveTime returns a boolean if a field has been set.
func (o *Rule) HasMinDriveTime() bool {
	if o != nil && o.MinDriveTime.IsSet() {
		return true
	}

	return false
}

// SetMinDriveTime gets a reference to the given NullableInt32 and assigns it to the MinDriveTime field.
func (o *Rule) SetMinDriveTime(v int32) {
	o.MinDriveTime.Set(&v)
}
// SetMinDriveTimeNil sets the value for MinDriveTime to be an explicit nil
func (o *Rule) SetMinDriveTimeNil() {
	o.MinDriveTime.Set(nil)
}

// UnsetMinDriveTime ensures that no value is present for MinDriveTime, not even an explicit nil
func (o *Rule) UnsetMinDriveTime() {
	o.MinDriveTime.Unset()
}

// GetMaxDriveTime returns the MaxDriveTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMaxDriveTime() int32 {
	if o == nil || IsNil(o.MaxDriveTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxDriveTime.Get()
}

// GetMaxDriveTimeOk returns a tuple with the MaxDriveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMaxDriveTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDriveTime.Get(), o.MaxDriveTime.IsSet()
}

// HasMaxDriveTime returns a boolean if a field has been set.
func (o *Rule) HasMaxDriveTime() bool {
	if o != nil && o.MaxDriveTime.IsSet() {
		return true
	}

	return false
}

// SetMaxDriveTime gets a reference to the given NullableInt32 and assigns it to the MaxDriveTime field.
func (o *Rule) SetMaxDriveTime(v int32) {
	o.MaxDriveTime.Set(&v)
}
// SetMaxDriveTimeNil sets the value for MaxDriveTime to be an explicit nil
func (o *Rule) SetMaxDriveTimeNil() {
	o.MaxDriveTime.Set(nil)
}

// UnsetMaxDriveTime ensures that no value is present for MaxDriveTime, not even an explicit nil
func (o *Rule) UnsetMaxDriveTime() {
	o.MaxDriveTime.Unset()
}

// GetMinJobComplexity returns the MinJobComplexity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMinJobComplexity() int32 {
	if o == nil || IsNil(o.MinJobComplexity.Get()) {
		var ret int32
		return ret
	}
	return *o.MinJobComplexity.Get()
}

// GetMinJobComplexityOk returns a tuple with the MinJobComplexity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMinJobComplexityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinJobComplexity.Get(), o.MinJobComplexity.IsSet()
}

// HasMinJobComplexity returns a boolean if a field has been set.
func (o *Rule) HasMinJobComplexity() bool {
	if o != nil && o.MinJobComplexity.IsSet() {
		return true
	}

	return false
}

// SetMinJobComplexity gets a reference to the given NullableInt32 and assigns it to the MinJobComplexity field.
func (o *Rule) SetMinJobComplexity(v int32) {
	o.MinJobComplexity.Set(&v)
}
// SetMinJobComplexityNil sets the value for MinJobComplexity to be an explicit nil
func (o *Rule) SetMinJobComplexityNil() {
	o.MinJobComplexity.Set(nil)
}

// UnsetMinJobComplexity ensures that no value is present for MinJobComplexity, not even an explicit nil
func (o *Rule) UnsetMinJobComplexity() {
	o.MinJobComplexity.Unset()
}

// GetMaxJobComplexity returns the MaxJobComplexity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetMaxJobComplexity() int32 {
	if o == nil || IsNil(o.MaxJobComplexity.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxJobComplexity.Get()
}

// GetMaxJobComplexityOk returns a tuple with the MaxJobComplexity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetMaxJobComplexityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxJobComplexity.Get(), o.MaxJobComplexity.IsSet()
}

// HasMaxJobComplexity returns a boolean if a field has been set.
func (o *Rule) HasMaxJobComplexity() bool {
	if o != nil && o.MaxJobComplexity.IsSet() {
		return true
	}

	return false
}

// SetMaxJobComplexity gets a reference to the given NullableInt32 and assigns it to the MaxJobComplexity field.
func (o *Rule) SetMaxJobComplexity(v int32) {
	o.MaxJobComplexity.Set(&v)
}
// SetMaxJobComplexityNil sets the value for MaxJobComplexity to be an explicit nil
func (o *Rule) SetMaxJobComplexityNil() {
	o.MaxJobComplexity.Set(nil)
}

// UnsetMaxJobComplexity ensures that no value is present for MaxJobComplexity, not even an explicit nil
func (o *Rule) UnsetMaxJobComplexity() {
	o.MaxJobComplexity.Unset()
}

// GetJobTypeLimitations returns the JobTypeLimitations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetJobTypeLimitations() map[string]int32 {
	if o == nil {
		var ret map[string]int32
		return ret
	}
	return o.JobTypeLimitations
}

// GetJobTypeLimitationsOk returns a tuple with the JobTypeLimitations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetJobTypeLimitationsOk() (*map[string]int32, bool) {
	if o == nil || IsNil(o.JobTypeLimitations) {
		return nil, false
	}
	return &o.JobTypeLimitations, true
}

// HasJobTypeLimitations returns a boolean if a field has been set.
func (o *Rule) HasJobTypeLimitations() bool {
	if o != nil && !IsNil(o.JobTypeLimitations) {
		return true
	}

	return false
}

// SetJobTypeLimitations gets a reference to the given map[string]int32 and assigns it to the JobTypeLimitations field.
func (o *Rule) SetJobTypeLimitations(v map[string]int32) {
	o.JobTypeLimitations = v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Period) {
		toSerialize["period"] = o.Period
	}
	if o.MinWorkTime.IsSet() {
		toSerialize["minWorkTime"] = o.MinWorkTime.Get()
	}
	if o.MaxWorkTime.IsSet() {
		toSerialize["maxWorkTime"] = o.MaxWorkTime.Get()
	}
	if o.MinServiceTime.IsSet() {
		toSerialize["minServiceTime"] = o.MinServiceTime.Get()
	}
	if o.MaxServiceTime.IsSet() {
		toSerialize["maxServiceTime"] = o.MaxServiceTime.Get()
	}
	if o.MinDriveTime.IsSet() {
		toSerialize["minDriveTime"] = o.MinDriveTime.Get()
	}
	if o.MaxDriveTime.IsSet() {
		toSerialize["maxDriveTime"] = o.MaxDriveTime.Get()
	}
	if o.MinJobComplexity.IsSet() {
		toSerialize["minJobComplexity"] = o.MinJobComplexity.Get()
	}
	if o.MaxJobComplexity.IsSet() {
		toSerialize["maxJobComplexity"] = o.MaxJobComplexity.Get()
	}
	if o.JobTypeLimitations != nil {
		toSerialize["jobTypeLimitations"] = o.JobTypeLimitations
	}
	return toSerialize, nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


